
c:/Users/nick.charlton.JOSEPHJOSEPHLTD/Documents/ParticleProjects/WashingLine/WashingLine/target/4.2.0/argon/WashingLine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004414  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8430  000b8430  00008430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b8454  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  2003e42c  000b8458  0001e42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000330  2003e4c0  2003e4c0  0002e4c0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b84ec  000b84ec  000284ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b8514  000b8514  00028514  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00143854  00000000  00000000  00028518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00014d2d  00000000  00000000  0016bd6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003e7cb  00000000  00000000  00180a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002f68  00000000  00000000  001bf264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000aff0  00000000  00000000  001c21cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a7f6  00000000  00000000  001cd1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000440d0  00000000  00000000  002079b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013a680  00000000  00000000  0024ba82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008824  00000000  00000000  00386104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 fd43 	bl	b7ab8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fd65 	bl	b7b08 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e42c 	.word	0x2003e42c
   b4048:	000b8458 	.word	0x000b8458
   b404c:	2003e4c0 	.word	0x2003e4c0
   b4050:	2003e4c0 	.word	0x2003e4c0
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 f851 	bl	b6104 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b8404 	.word	0x000b8404
   b407c:	000b8428 	.word	0x000b8428

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b9e2 	b.w	b4448 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f989 	bl	b439c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bff1 	b.w	b6074 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 be3f 	b.w	b4d14 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 be3d 	b.w	b4d14 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 be43 	b.w	b4d24 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f000 fd50 	bl	b4b4c <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b492d 	.word	0x000b492d
   b40b4:	000b7e5c 	.word	0x000b7e5c

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40c8:	4770      	bx	lr

000b40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ca:	6a00      	ldr	r0, [r0, #32]
   b40cc:	6803      	ldr	r3, [r0, #0]
   b40ce:	68db      	ldr	r3, [r3, #12]
   b40d0:	4718      	bx	r3
	...

000b40d4 <_Z10weightFuncPKcS0_>:
HX711ADC scale2;

float calibration_factor1 = -33700; //-7050 worked for my 440lb max scale setup
float calibration_factor2 = -33700; //-7050 worked for my 440lb max scale setup
int weightFunc(const char *topic, const char *data) {
    shouldGetWeight = true;
   b40d4:	4b02      	ldr	r3, [pc, #8]	; (b40e0 <_Z10weightFuncPKcS0_+0xc>)
   b40d6:	2201      	movs	r2, #1
   b40d8:	701a      	strb	r2, [r3, #0]
 return 0;
}
   b40da:	2000      	movs	r0, #0
   b40dc:	4770      	bx	lr
   b40de:	bf00      	nop
   b40e0:	2003e518 	.word	0x2003e518

000b40e4 <_Z8onChangev>:
int windSpeed[30];
int strain1[30];
int strain2[30];
void publishData();

void onChange() {
   b40e4:	b508      	push	{r3, lr}
  if (digitalRead(pinInterrupt) == LOW )
   b40e6:	4b05      	ldr	r3, [pc, #20]	; (b40fc <_Z8onChangev+0x18>)
   b40e8:	8818      	ldrh	r0, [r3, #0]
   b40ea:	f002 fff9 	bl	b70e0 <digitalRead>
   b40ee:	b918      	cbnz	r0, b40f8 <_Z8onChangev+0x14>
    Count++;
   b40f0:	4a03      	ldr	r2, [pc, #12]	; (b4100 <_Z8onChangev+0x1c>)
   b40f2:	6813      	ldr	r3, [r2, #0]
   b40f4:	3301      	adds	r3, #1
   b40f6:	6013      	str	r3, [r2, #0]
}
   b40f8:	bd08      	pop	{r3, pc}
   b40fa:	bf00      	nop
   b40fc:	2003e448 	.word	0x2003e448
   b4100:	2003e4c0 	.word	0x2003e4c0

000b4104 <_ZNSt17_Function_handlerIFvPKcS1_EPFiS1_S1_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   b4104:	2a01      	cmp	r2, #1
   b4106:	d102      	bne.n	b410e <_ZNSt17_Function_handlerIFvPKcS1_EPFiS1_S1_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4108:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   b410a:	2000      	movs	r0, #0
   b410c:	4770      	bx	lr
	  switch (__op)
   b410e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4110:	bf04      	itt	eq
   b4112:	680b      	ldreq	r3, [r1, #0]
   b4114:	6003      	streq	r3, [r0, #0]
	      break;
   b4116:	e7f8      	b.n	b410a <_ZNSt17_Function_handlerIFvPKcS1_EPFiS1_S1_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b4118 <_ZNSt17_Function_handlerIFvPKcS1_EPFiS1_S1_EE9_M_invokeERKSt9_Any_dataOS1_S9_>:

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4118:	b410      	push	{r4}
   b411a:	460c      	mov	r4, r1
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b411c:	6803      	ldr	r3, [r0, #0]
   b411e:	6811      	ldr	r1, [r2, #0]
   b4120:	6820      	ldr	r0, [r4, #0]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4122:	f85d 4b04 	ldr.w	r4, [sp], #4
   b4126:	4718      	bx	r3

000b4128 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4128:	4b0a      	ldr	r3, [pc, #40]	; (b4154 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b412a:	b510      	push	{r4, lr}
   b412c:	4604      	mov	r4, r0
   b412e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4130:	f001 f952 	bl	b53d8 <_ZN5spark10LogManager8instanceEv>
   b4134:	4621      	mov	r1, r4
   b4136:	f001 fb8a 	bl	b584e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b413a:	f002 fb95 	bl	b6868 <_Z16_fetch_usbserialv>
   b413e:	f002 fb87 	bl	b6850 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4142:	4620      	mov	r0, r4
   b4144:	4b04      	ldr	r3, [pc, #16]	; (b4158 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4146:	f840 3b04 	str.w	r3, [r0], #4
   b414a:	f001 fa1b 	bl	b5584 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b414e:	4620      	mov	r0, r4
   b4150:	bd10      	pop	{r4, pc}
   b4152:	bf00      	nop
   b4154:	000b7fbc 	.word	0x000b7fbc
   b4158:	000b7fa4 	.word	0x000b7fa4

000b415c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b415c:	b510      	push	{r4, lr}
   b415e:	4604      	mov	r4, r0
    }
   b4160:	f7ff ffe2 	bl	b4128 <_ZN5spark16SerialLogHandlerD1Ev>
   b4164:	4620      	mov	r0, r4
   b4166:	2124      	movs	r1, #36	; 0x24
   b4168:	f7ff ff97 	bl	b409a <_ZdlPvj>
   b416c:	4620      	mov	r0, r4
   b416e:	bd10      	pop	{r4, pc}

000b4170 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4170:	b510      	push	{r4, lr}
      if (_M_manager)
   b4172:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4174:	4604      	mov	r4, r0
      if (_M_manager)
   b4176:	b113      	cbz	r3, b417e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4178:	2203      	movs	r2, #3
   b417a:	4601      	mov	r1, r0
   b417c:	4798      	blx	r3
    }
   b417e:	4620      	mov	r0, r4
   b4180:	bd10      	pop	{r4, pc}

000b4182 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4182:	b40e      	push	{r1, r2, r3}
   b4184:	b500      	push	{lr}
   b4186:	b08c      	sub	sp, #48	; 0x30
   b4188:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b418a:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b418e:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4192:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4194:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4198:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b419a:	6801      	ldr	r1, [r0, #0]
   b419c:	aa04      	add	r2, sp, #16
   b419e:	201e      	movs	r0, #30
    attr.flags = 0;
   b41a0:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b41a4:	f000 fcda 	bl	b4b5c <log_message_v>
}
   b41a8:	b00c      	add	sp, #48	; 0x30
   b41aa:	f85d eb04 	ldr.w	lr, [sp], #4
   b41ae:	b003      	add	sp, #12
   b41b0:	4770      	bx	lr
	...

000b41b4 <_Z11publishDatav>:
  }
  if (Particle.connected()) {
    publishData();
  }
}
void publishData() {
   b41b4:	b510      	push	{r4, lr}
  char buffer[1024];

  snprintf(buffer, sizeof(buffer), "[%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d]",
   b41b6:	4a71      	ldr	r2, [pc, #452]	; (b437c <_Z11publishDatav+0x1c8>)
   b41b8:	4b71      	ldr	r3, [pc, #452]	; (b4380 <_Z11publishDatav+0x1cc>)
   b41ba:	6f51      	ldr	r1, [r2, #116]	; 0x74
void publishData() {
   b41bc:	f5ad 6dae 	sub.w	sp, sp, #1392	; 0x570
  snprintf(buffer, sizeof(buffer), "[%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d]",
   b41c0:	a85c      	add	r0, sp, #368	; 0x170
   b41c2:	9158      	str	r1, [sp, #352]	; 0x160
   b41c4:	6f11      	ldr	r1, [r2, #112]	; 0x70
   b41c6:	9157      	str	r1, [sp, #348]	; 0x15c
   b41c8:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
   b41ca:	9156      	str	r1, [sp, #344]	; 0x158
   b41cc:	6e91      	ldr	r1, [r2, #104]	; 0x68
   b41ce:	9155      	str	r1, [sp, #340]	; 0x154
   b41d0:	6e51      	ldr	r1, [r2, #100]	; 0x64
   b41d2:	9154      	str	r1, [sp, #336]	; 0x150
   b41d4:	6e11      	ldr	r1, [r2, #96]	; 0x60
   b41d6:	9153      	str	r1, [sp, #332]	; 0x14c
   b41d8:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
   b41da:	9152      	str	r1, [sp, #328]	; 0x148
   b41dc:	6d91      	ldr	r1, [r2, #88]	; 0x58
   b41de:	9151      	str	r1, [sp, #324]	; 0x144
   b41e0:	6d51      	ldr	r1, [r2, #84]	; 0x54
   b41e2:	9150      	str	r1, [sp, #320]	; 0x140
   b41e4:	6d11      	ldr	r1, [r2, #80]	; 0x50
   b41e6:	914f      	str	r1, [sp, #316]	; 0x13c
   b41e8:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
   b41ea:	914e      	str	r1, [sp, #312]	; 0x138
   b41ec:	6c91      	ldr	r1, [r2, #72]	; 0x48
   b41ee:	914d      	str	r1, [sp, #308]	; 0x134
   b41f0:	6c51      	ldr	r1, [r2, #68]	; 0x44
   b41f2:	914c      	str	r1, [sp, #304]	; 0x130
   b41f4:	6c11      	ldr	r1, [r2, #64]	; 0x40
   b41f6:	914b      	str	r1, [sp, #300]	; 0x12c
   b41f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
   b41fa:	914a      	str	r1, [sp, #296]	; 0x128
   b41fc:	6b91      	ldr	r1, [r2, #56]	; 0x38
   b41fe:	9149      	str	r1, [sp, #292]	; 0x124
   b4200:	6b51      	ldr	r1, [r2, #52]	; 0x34
   b4202:	9148      	str	r1, [sp, #288]	; 0x120
   b4204:	6b11      	ldr	r1, [r2, #48]	; 0x30
   b4206:	9147      	str	r1, [sp, #284]	; 0x11c
   b4208:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   b420a:	9146      	str	r1, [sp, #280]	; 0x118
   b420c:	6a91      	ldr	r1, [r2, #40]	; 0x28
   b420e:	9145      	str	r1, [sp, #276]	; 0x114
   b4210:	6a51      	ldr	r1, [r2, #36]	; 0x24
   b4212:	9144      	str	r1, [sp, #272]	; 0x110
   b4214:	6a11      	ldr	r1, [r2, #32]
   b4216:	9143      	str	r1, [sp, #268]	; 0x10c
   b4218:	69d1      	ldr	r1, [r2, #28]
   b421a:	9142      	str	r1, [sp, #264]	; 0x108
   b421c:	6991      	ldr	r1, [r2, #24]
   b421e:	9141      	str	r1, [sp, #260]	; 0x104
   b4220:	6951      	ldr	r1, [r2, #20]
   b4222:	9140      	str	r1, [sp, #256]	; 0x100
   b4224:	6911      	ldr	r1, [r2, #16]
   b4226:	913f      	str	r1, [sp, #252]	; 0xfc
   b4228:	68d1      	ldr	r1, [r2, #12]
   b422a:	913e      	str	r1, [sp, #248]	; 0xf8
   b422c:	6891      	ldr	r1, [r2, #8]
   b422e:	913d      	str	r1, [sp, #244]	; 0xf4
   b4230:	6851      	ldr	r1, [r2, #4]
   b4232:	913c      	str	r1, [sp, #240]	; 0xf0
   b4234:	6812      	ldr	r2, [r2, #0]
   b4236:	923b      	str	r2, [sp, #236]	; 0xec
   b4238:	4a52      	ldr	r2, [pc, #328]	; (b4384 <_Z11publishDatav+0x1d0>)
   b423a:	6f51      	ldr	r1, [r2, #116]	; 0x74
   b423c:	913a      	str	r1, [sp, #232]	; 0xe8
   b423e:	6f11      	ldr	r1, [r2, #112]	; 0x70
   b4240:	9139      	str	r1, [sp, #228]	; 0xe4
   b4242:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
   b4244:	9138      	str	r1, [sp, #224]	; 0xe0
   b4246:	6e91      	ldr	r1, [r2, #104]	; 0x68
   b4248:	9137      	str	r1, [sp, #220]	; 0xdc
   b424a:	6e51      	ldr	r1, [r2, #100]	; 0x64
   b424c:	9136      	str	r1, [sp, #216]	; 0xd8
   b424e:	6e11      	ldr	r1, [r2, #96]	; 0x60
   b4250:	9135      	str	r1, [sp, #212]	; 0xd4
   b4252:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
   b4254:	9134      	str	r1, [sp, #208]	; 0xd0
   b4256:	6d91      	ldr	r1, [r2, #88]	; 0x58
   b4258:	9133      	str	r1, [sp, #204]	; 0xcc
   b425a:	6d51      	ldr	r1, [r2, #84]	; 0x54
   b425c:	9132      	str	r1, [sp, #200]	; 0xc8
   b425e:	6d11      	ldr	r1, [r2, #80]	; 0x50
   b4260:	9131      	str	r1, [sp, #196]	; 0xc4
   b4262:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
   b4264:	9130      	str	r1, [sp, #192]	; 0xc0
   b4266:	6c91      	ldr	r1, [r2, #72]	; 0x48
   b4268:	912f      	str	r1, [sp, #188]	; 0xbc
   b426a:	6c51      	ldr	r1, [r2, #68]	; 0x44
   b426c:	912e      	str	r1, [sp, #184]	; 0xb8
   b426e:	6c11      	ldr	r1, [r2, #64]	; 0x40
   b4270:	912d      	str	r1, [sp, #180]	; 0xb4
   b4272:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
   b4274:	912c      	str	r1, [sp, #176]	; 0xb0
   b4276:	6b91      	ldr	r1, [r2, #56]	; 0x38
   b4278:	912b      	str	r1, [sp, #172]	; 0xac
   b427a:	6b51      	ldr	r1, [r2, #52]	; 0x34
   b427c:	912a      	str	r1, [sp, #168]	; 0xa8
   b427e:	6b11      	ldr	r1, [r2, #48]	; 0x30
   b4280:	9129      	str	r1, [sp, #164]	; 0xa4
   b4282:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   b4284:	9128      	str	r1, [sp, #160]	; 0xa0
   b4286:	6a91      	ldr	r1, [r2, #40]	; 0x28
   b4288:	9127      	str	r1, [sp, #156]	; 0x9c
   b428a:	6a51      	ldr	r1, [r2, #36]	; 0x24
   b428c:	9126      	str	r1, [sp, #152]	; 0x98
   b428e:	6a11      	ldr	r1, [r2, #32]
   b4290:	9125      	str	r1, [sp, #148]	; 0x94
   b4292:	69d1      	ldr	r1, [r2, #28]
   b4294:	9124      	str	r1, [sp, #144]	; 0x90
   b4296:	6991      	ldr	r1, [r2, #24]
   b4298:	9123      	str	r1, [sp, #140]	; 0x8c
   b429a:	6951      	ldr	r1, [r2, #20]
   b429c:	9122      	str	r1, [sp, #136]	; 0x88
   b429e:	6911      	ldr	r1, [r2, #16]
   b42a0:	9121      	str	r1, [sp, #132]	; 0x84
   b42a2:	68d1      	ldr	r1, [r2, #12]
   b42a4:	9120      	str	r1, [sp, #128]	; 0x80
   b42a6:	6891      	ldr	r1, [r2, #8]
   b42a8:	911f      	str	r1, [sp, #124]	; 0x7c
   b42aa:	6851      	ldr	r1, [r2, #4]
   b42ac:	911e      	str	r1, [sp, #120]	; 0x78
   b42ae:	6812      	ldr	r2, [r2, #0]
   b42b0:	921d      	str	r2, [sp, #116]	; 0x74
   b42b2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   b42b4:	921c      	str	r2, [sp, #112]	; 0x70
   b42b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   b42b8:	921b      	str	r2, [sp, #108]	; 0x6c
   b42ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   b42bc:	921a      	str	r2, [sp, #104]	; 0x68
   b42be:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b42c0:	9219      	str	r2, [sp, #100]	; 0x64
   b42c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   b42c4:	9218      	str	r2, [sp, #96]	; 0x60
   b42c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   b42c8:	9217      	str	r2, [sp, #92]	; 0x5c
   b42ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   b42cc:	9216      	str	r2, [sp, #88]	; 0x58
   b42ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   b42d0:	9215      	str	r2, [sp, #84]	; 0x54
   b42d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   b42d4:	9214      	str	r2, [sp, #80]	; 0x50
   b42d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   b42d8:	9213      	str	r2, [sp, #76]	; 0x4c
   b42da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   b42dc:	9212      	str	r2, [sp, #72]	; 0x48
   b42de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   b42e0:	9211      	str	r2, [sp, #68]	; 0x44
   b42e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   b42e4:	9210      	str	r2, [sp, #64]	; 0x40
   b42e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   b42e8:	920f      	str	r2, [sp, #60]	; 0x3c
   b42ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   b42ec:	920e      	str	r2, [sp, #56]	; 0x38
   b42ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   b42f0:	920d      	str	r2, [sp, #52]	; 0x34
   b42f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b42f4:	920c      	str	r2, [sp, #48]	; 0x30
   b42f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   b42f8:	920b      	str	r2, [sp, #44]	; 0x2c
   b42fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   b42fc:	920a      	str	r2, [sp, #40]	; 0x28
   b42fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   b4300:	9209      	str	r2, [sp, #36]	; 0x24
   b4302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b4304:	9208      	str	r2, [sp, #32]
   b4306:	6a1a      	ldr	r2, [r3, #32]
   b4308:	9207      	str	r2, [sp, #28]
   b430a:	69da      	ldr	r2, [r3, #28]
   b430c:	9206      	str	r2, [sp, #24]
   b430e:	699a      	ldr	r2, [r3, #24]
   b4310:	9205      	str	r2, [sp, #20]
   b4312:	695a      	ldr	r2, [r3, #20]
   b4314:	9204      	str	r2, [sp, #16]
   b4316:	691a      	ldr	r2, [r3, #16]
   b4318:	9203      	str	r2, [sp, #12]
   b431a:	68da      	ldr	r2, [r3, #12]
   b431c:	9202      	str	r2, [sp, #8]
   b431e:	689a      	ldr	r2, [r3, #8]
   b4320:	9201      	str	r2, [sp, #4]
   b4322:	685a      	ldr	r2, [r3, #4]
   b4324:	9200      	str	r2, [sp, #0]
   b4326:	681b      	ldr	r3, [r3, #0]
   b4328:	4a17      	ldr	r2, [pc, #92]	; (b4388 <_Z11publishDatav+0x1d4>)
   b432a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   b432e:	f000 fd09 	bl	b4d44 <snprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4332:	4b16      	ldr	r3, [pc, #88]	; (b438c <_Z11publishDatav+0x1d8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4334:	4916      	ldr	r1, [pc, #88]	; (b4390 <_Z11publishDatav+0x1dc>)
   b4336:	781b      	ldrb	r3, [r3, #0]
   b4338:	f88d 3000 	strb.w	r3, [sp]
   b433c:	6809      	ldr	r1, [r1, #0]
   b433e:	233c      	movs	r3, #60	; 0x3c
   b4340:	aa5c      	add	r2, sp, #368	; 0x170
   b4342:	a85a      	add	r0, sp, #360	; 0x168
   b4344:	f002 f84a 	bl	b63dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4348:	9c5b      	ldr	r4, [sp, #364]	; 0x16c
   b434a:	b17c      	cbz	r4, b436c <_Z11publishDatav+0x1b8>
      if (--_M_use_count == 0)
   b434c:	6863      	ldr	r3, [r4, #4]
   b434e:	3b01      	subs	r3, #1
   b4350:	6063      	str	r3, [r4, #4]
   b4352:	b95b      	cbnz	r3, b436c <_Z11publishDatav+0x1b8>
          _M_dispose();
   b4354:	6823      	ldr	r3, [r4, #0]
   b4356:	4620      	mov	r0, r4
   b4358:	689b      	ldr	r3, [r3, #8]
   b435a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b435c:	68a3      	ldr	r3, [r4, #8]
   b435e:	3b01      	subs	r3, #1
   b4360:	60a3      	str	r3, [r4, #8]
   b4362:	b91b      	cbnz	r3, b436c <_Z11publishDatav+0x1b8>
            _M_destroy();
   b4364:	6823      	ldr	r3, [r4, #0]
   b4366:	4620      	mov	r0, r4
   b4368:	68db      	ldr	r3, [r3, #12]
   b436a:	4798      	blx	r3
  strain1[4], strain1[5], strain1[6], strain1[7], strain1[8], strain1[9], strain1[10], strain1[11], strain1[12], strain1[13], strain1[14], strain1[15], strain1[16], strain1[17], strain1[18], strain1[19], strain1[20], strain1[21], strain1[22], strain1[23], 
  strain1[24], strain1[25], strain1[26], strain1[27], strain1[28], strain1[29], strain2[0], strain2[1], strain2[2], strain2[3], strain2[4], strain2[5], strain2[6], strain2[7], strain2[8], strain2[9], strain2[10], strain2[11], strain2[12], strain2[13], 
  strain2[14], strain2[15], strain2[16], strain2[17], strain2[18], strain2[19], strain2[20], strain2[21], strain2[22], strain2[23], strain2[24], strain2[25], strain2[26], strain2[27], strain2[28], strain2[29]);

  Particle.publish(eventName, buffer, PRIVATE);
  Log.info("published: %s", buffer);
   b436c:	4909      	ldr	r1, [pc, #36]	; (b4394 <_Z11publishDatav+0x1e0>)
   b436e:	480a      	ldr	r0, [pc, #40]	; (b4398 <_Z11publishDatav+0x1e4>)
   b4370:	aa5c      	add	r2, sp, #368	; 0x170
   b4372:	f7ff ff06 	bl	b4182 <_ZNK5spark6Logger4infoEPKcz>
} 
   b4376:	f50d 6dae 	add.w	sp, sp, #1392	; 0x570
   b437a:	bd10      	pop	{r4, pc}
   b437c:	2003e594 	.word	0x2003e594
   b4380:	2003e60c 	.word	0x2003e60c
   b4384:	2003e51c 	.word	0x2003e51c
   b4388:	000b7e71 	.word	0x000b7e71
   b438c:	2003e4d0 	.word	0x2003e4d0
   b4390:	2003e444 	.word	0x2003e444
   b4394:	000b7f81 	.word	0x000b7f81
   b4398:	2003e6ac 	.word	0x2003e6ac

000b439c <loop>:
void loop() {
   b439c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b43a0:	ed2d 8b02 	vpush	{d8}
   b43a4:	f8df 807c 	ldr.w	r8, [pc, #124]	; b4424 <loop+0x88>
   b43a8:	4e19      	ldr	r6, [pc, #100]	; (b4410 <loop+0x74>)
   b43aa:	4d1a      	ldr	r5, [pc, #104]	; (b4414 <loop+0x78>)
    windSpeed[i] = Count;
   b43ac:	4f1a      	ldr	r7, [pc, #104]	; (b4418 <loop+0x7c>)
void loop() {
   b43ae:	241e      	movs	r4, #30
    Count = 0;
   b43b0:	f04f 0900 	mov.w	r9, #0
    windSpeed[i] = Count;
   b43b4:	683b      	ldr	r3, [r7, #0]
    strain1[i] = scale1.get_units() * 10;
   b43b6:	4819      	ldr	r0, [pc, #100]	; (b441c <loop+0x80>)
    windSpeed[i] = Count;
   b43b8:	f848 3b04 	str.w	r3, [r8], #4
    strain1[i] = scale1.get_units() * 10;
   b43bc:	2101      	movs	r1, #1
    Count = 0;
   b43be:	f8c7 9000 	str.w	r9, [r7]
    strain1[i] = scale1.get_units() * 10;
   b43c2:	f000 fa46 	bl	b4852 <_ZN8HX711ADC9get_unitsEh>
   b43c6:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
   b43ca:	ee20 0a08 	vmul.f32	s0, s0, s16
    strain2[i] = scale2.get_units() * 10;
   b43ce:	4814      	ldr	r0, [pc, #80]	; (b4420 <loop+0x84>)
    strain1[i] = scale1.get_units() * 10;
   b43d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    strain2[i] = scale2.get_units() * 10;
   b43d4:	2101      	movs	r1, #1
    strain1[i] = scale1.get_units() * 10;
   b43d6:	eca6 0a01 	vstmia	r6!, {s0}
    strain2[i] = scale2.get_units() * 10;
   b43da:	f000 fa3a 	bl	b4852 <_ZN8HX711ADC9get_unitsEh>
   b43de:	ee20 0a08 	vmul.f32	s0, s0, s16
    delay(1000);
   b43e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    strain2[i] = scale2.get_units() * 10;
   b43e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b43ea:	eca5 0a01 	vstmia	r5!, {s0}
    delay(1000);
   b43ee:	f001 fe15 	bl	b601c <delay>
 while(i<30) {   
   b43f2:	3c01      	subs	r4, #1
   b43f4:	d1de      	bne.n	b43b4 <loop+0x18>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b43f6:	f000 fc6d 	bl	b4cd4 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b43fa:	b128      	cbz	r0, b4408 <loop+0x6c>
}
   b43fc:	ecbd 8b02 	vpop	{d8}
   b4400:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    publishData();
   b4404:	f7ff bed6 	b.w	b41b4 <_Z11publishDatav>
}
   b4408:	ecbd 8b02 	vpop	{d8}
   b440c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4410:	2003e51c 	.word	0x2003e51c
   b4414:	2003e594 	.word	0x2003e594
   b4418:	2003e4c0 	.word	0x2003e4c0
   b441c:	2003e4f8 	.word	0x2003e4f8
   b4420:	2003e508 	.word	0x2003e508
   b4424:	2003e60c 	.word	0x2003e60c

000b4428 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   b4428:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b442a:	2300      	movs	r3, #0
   b442c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b442e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4430:	4604      	mov	r4, r0
   b4432:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   b4434:	b12b      	cbz	r3, b4442 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4436:	2202      	movs	r2, #2
   b4438:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b443a:	68eb      	ldr	r3, [r5, #12]
   b443c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b443e:	68ab      	ldr	r3, [r5, #8]
   b4440:	60a3      	str	r3, [r4, #8]
	}
    }
   b4442:	4620      	mov	r0, r4
   b4444:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4448 <setup>:
void setup() {
   b4448:	b530      	push	{r4, r5, lr}
  pinMode(pinInterrupt, INPUT_PULLUP);// set the interrupt pin
   b444a:	4c2e      	ldr	r4, [pc, #184]	; (b4504 <setup+0xbc>)
void setup() {
   b444c:	b08b      	sub	sp, #44	; 0x2c
  Serial.begin(9600);
   b444e:	f002 fa0b 	bl	b6868 <_Z16_fetch_usbserialv>
   b4452:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4456:	f002 f9f7 	bl	b6848 <_ZN9USBSerial5beginEl>
  attachInterrupt(pinInterrupt, onChange, FALLING);
   b445a:	2500      	movs	r5, #0
  pinMode(pinInterrupt, INPUT_PULLUP);// set the interrupt pin
   b445c:	8820      	ldrh	r0, [r4, #0]
   b445e:	2102      	movs	r1, #2
   b4460:	f002 fe14 	bl	b708c <pinMode>
  attachInterrupt(pinInterrupt, onChange, FALLING);
   b4464:	9500      	str	r5, [sp, #0]
   b4466:	4928      	ldr	r1, [pc, #160]	; (b4508 <setup+0xc0>)
   b4468:	8820      	ldrh	r0, [r4, #0]
   b446a:	f04f 33ff 	mov.w	r3, #4294967295
   b446e:	2202      	movs	r2, #2
   b4470:	f002 fa22 	bl	b68b8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  scale1.begin(DOUT1, CLK1);  //initialise the first ADC board
   b4474:	4a25      	ldr	r2, [pc, #148]	; (b450c <setup+0xc4>)
   b4476:	4926      	ldr	r1, [pc, #152]	; (b4510 <setup+0xc8>)
   b4478:	7812      	ldrb	r2, [r2, #0]
   b447a:	7809      	ldrb	r1, [r1, #0]
   b447c:	4825      	ldr	r0, [pc, #148]	; (b4514 <setup+0xcc>)
   b447e:	2380      	movs	r3, #128	; 0x80
   b4480:	f000 f957 	bl	b4732 <_ZN8HX711ADC5beginEhhh>
  scale2.begin(DOUT2, CLK2);  //initialise the second ADC board
   b4484:	4a24      	ldr	r2, [pc, #144]	; (b4518 <setup+0xd0>)
   b4486:	4925      	ldr	r1, [pc, #148]	; (b451c <setup+0xd4>)
   b4488:	7812      	ldrb	r2, [r2, #0]
   b448a:	7809      	ldrb	r1, [r1, #0]
   b448c:	4824      	ldr	r0, [pc, #144]	; (b4520 <setup+0xd8>)
   b448e:	2380      	movs	r3, #128	; 0x80
   b4490:	f000 f94f 	bl	b4732 <_ZN8HX711ADC5beginEhhh>
  scale1.set_scale(calibration_factor1); //apply the calibration factor to strain gauge 1
   b4494:	4b23      	ldr	r3, [pc, #140]	; (b4524 <setup+0xdc>)
   b4496:	481f      	ldr	r0, [pc, #124]	; (b4514 <setup+0xcc>)
   b4498:	ed93 0a00 	vldr	s0, [r3]
   b449c:	f000 f9f3 	bl	b4886 <_ZN8HX711ADC9set_scaleEf>
  scale1.tare();
   b44a0:	210a      	movs	r1, #10
   b44a2:	481c      	ldr	r0, [pc, #112]	; (b4514 <setup+0xcc>)
   b44a4:	f000 f9e9 	bl	b487a <_ZN8HX711ADC4tareEh>
  scale2.set_scale(calibration_factor2); //apply the callibration factor to strain gauge 2
   b44a8:	4b1f      	ldr	r3, [pc, #124]	; (b4528 <setup+0xe0>)
   b44aa:	481d      	ldr	r0, [pc, #116]	; (b4520 <setup+0xd8>)
   b44ac:	ed93 0a00 	vldr	s0, [r3]
   b44b0:	f000 f9e9 	bl	b4886 <_ZN8HX711ADC9set_scaleEf>
  scale2.tare();
   b44b4:	481a      	ldr	r0, [pc, #104]	; (b4520 <setup+0xd8>)
   b44b6:	210a      	movs	r1, #10
   b44b8:	f000 f9df 	bl	b487a <_ZN8HX711ADC4tareEh>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b44bc:	4b1b      	ldr	r3, [pc, #108]	; (b452c <setup+0xe4>)
   b44be:	9302      	str	r3, [sp, #8]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b44c0:	4b1b      	ldr	r3, [pc, #108]	; (b4530 <setup+0xe8>)
   b44c2:	9305      	str	r3, [sp, #20]
        return subscribe_wiring(eventName, handler, scope);
   b44c4:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   b44c6:	4b1b      	ldr	r3, [pc, #108]	; (b4534 <setup+0xec>)
   b44c8:	9304      	str	r3, [sp, #16]
   b44ca:	a806      	add	r0, sp, #24
   b44cc:	f7ff ffac 	bl	b4428 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    static particle::Future<bool> publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags);

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
   b44d0:	9b08      	ldr	r3, [sp, #32]
   b44d2:	b17b      	cbz	r3, b44f4 <setup+0xac>
        {
            auto wrapper = new wiring_event_handler_t(handler);
   b44d4:	2010      	movs	r0, #16
   b44d6:	f7ff fddc 	bl	b4092 <_Znwj>
   b44da:	4604      	mov	r4, r0
   b44dc:	b150      	cbz	r0, b44f4 <setup+0xac>
   b44de:	a906      	add	r1, sp, #24
   b44e0:	f7ff ffa2 	bl	b4428 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-function-type"
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   b44e4:	e9cd 5500 	strd	r5, r5, [sp]
   b44e8:	4913      	ldr	r1, [pc, #76]	; (b4538 <setup+0xf0>)
   b44ea:	4814      	ldr	r0, [pc, #80]	; (b453c <setup+0xf4>)
   b44ec:	462b      	mov	r3, r5
   b44ee:	4622      	mov	r2, r4
   b44f0:	f000 fc00 	bl	b4cf4 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   b44f4:	a806      	add	r0, sp, #24
   b44f6:	f7ff fe3b 	bl	b4170 <_ZNSt14_Function_baseD1Ev>
   b44fa:	a802      	add	r0, sp, #8
   b44fc:	f7ff fe38 	bl	b4170 <_ZNSt14_Function_baseD1Ev>
}
   b4500:	b00b      	add	sp, #44	; 0x2c
   b4502:	bd30      	pop	{r4, r5, pc}
   b4504:	2003e448 	.word	0x2003e448
   b4508:	000b40e5 	.word	0x000b40e5
   b450c:	2003e42c 	.word	0x2003e42c
   b4510:	2003e434 	.word	0x2003e434
   b4514:	2003e4f8 	.word	0x2003e4f8
   b4518:	2003e430 	.word	0x2003e430
   b451c:	2003e438 	.word	0x2003e438
   b4520:	2003e508 	.word	0x2003e508
   b4524:	2003e43c 	.word	0x2003e43c
   b4528:	2003e440 	.word	0x2003e440
   b452c:	000b40d5 	.word	0x000b40d5
   b4530:	000b4119 	.word	0x000b4119
   b4534:	000b4105 	.word	0x000b4105
   b4538:	000b61f3 	.word	0x000b61f3
   b453c:	000b7f8f 	.word	0x000b7f8f

000b4540 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4540:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4542:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4546:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4548:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b454a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b454e:	42ae      	cmp	r6, r5
   b4550:	d004      	beq.n	b455c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4552:	4628      	mov	r0, r5
   b4554:	f000 fc88 	bl	b4e68 <_ZN6StringD1Ev>
   b4558:	3514      	adds	r5, #20
   b455a:	e7f8      	b.n	b454e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b455c:	6820      	ldr	r0, [r4, #0]
   b455e:	f000 fbe1 	bl	b4d24 <free>
    AllocatorT::free(data_);
}
   b4562:	4620      	mov	r0, r4
   b4564:	bd70      	pop	{r4, r5, r6, pc}

000b4566 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4566:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b456a:	4604      	mov	r4, r0
   b456c:	460d      	mov	r5, r1
   b456e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4570:	d916      	bls.n	b45a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4572:	4290      	cmp	r0, r2
   b4574:	d215      	bcs.n	b45a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4576:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b457a:	1a75      	subs	r5, r6, r1
   b457c:	f1a1 0714 	sub.w	r7, r1, #20
   b4580:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4582:	42b7      	cmp	r7, r6
   b4584:	d01c      	beq.n	b45c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4586:	b12c      	cbz	r4, b4594 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4588:	4631      	mov	r1, r6
   b458a:	4620      	mov	r0, r4
   b458c:	f000 fcd5 	bl	b4f3a <_ZN6StringC1EOS_>
   b4590:	7c33      	ldrb	r3, [r6, #16]
   b4592:	7423      	strb	r3, [r4, #16]
   b4594:	4630      	mov	r0, r6
   b4596:	f000 fc67 	bl	b4e68 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b459a:	3e14      	subs	r6, #20
   b459c:	3c14      	subs	r4, #20
   b459e:	e7f0      	b.n	b4582 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b45a0:	d00e      	beq.n	b45c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b45a2:	42b5      	cmp	r5, r6
   b45a4:	d00c      	beq.n	b45c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b45a6:	b12c      	cbz	r4, b45b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b45a8:	4629      	mov	r1, r5
   b45aa:	4620      	mov	r0, r4
   b45ac:	f000 fcc5 	bl	b4f3a <_ZN6StringC1EOS_>
   b45b0:	7c2b      	ldrb	r3, [r5, #16]
   b45b2:	7423      	strb	r3, [r4, #16]
   b45b4:	4628      	mov	r0, r5
   b45b6:	f000 fc57 	bl	b4e68 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b45ba:	3514      	adds	r5, #20
   b45bc:	3414      	adds	r4, #20
   b45be:	e7f0      	b.n	b45a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b45c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b45c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b45c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b45c6:	2300      	movs	r3, #0
   b45c8:	e9c0 3300 	strd	r3, r3, [r0]
   b45cc:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b45ce:	684f      	ldr	r7, [r1, #4]
   b45d0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b45d2:	4604      	mov	r4, r0
   b45d4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b45d6:	dd23      	ble.n	b4620 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b45d8:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b45dc:	fb08 f007 	mul.w	r0, r8, r7
   b45e0:	f000 fb98 	bl	b4d14 <malloc>
            if (!d) {
   b45e4:	4605      	mov	r5, r0
   b45e6:	b1d8      	cbz	r0, b4620 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b45e8:	e9d4 1200 	ldrd	r1, r2, [r4]
   b45ec:	fb08 1202 	mla	r2, r8, r2, r1
   b45f0:	f7ff ffb9 	bl	b4566 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b45f4:	6820      	ldr	r0, [r4, #0]
   b45f6:	f000 fb95 	bl	b4d24 <free>
        data_ = d;
   b45fa:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b45fc:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b45fe:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4602:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4606:	45b8      	cmp	r8, r7
   b4608:	d008      	beq.n	b461c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b460a:	4639      	mov	r1, r7
   b460c:	4628      	mov	r0, r5
   b460e:	f000 fcae 	bl	b4f6e <_ZN6StringC1ERKS_>
   b4612:	7c3b      	ldrb	r3, [r7, #16]
   b4614:	742b      	strb	r3, [r5, #16]
   b4616:	3714      	adds	r7, #20
   b4618:	3514      	adds	r5, #20
   b461a:	e7f4      	b.n	b4606 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b461c:	6873      	ldr	r3, [r6, #4]
   b461e:	6063      	str	r3, [r4, #4]
}
   b4620:	4620      	mov	r0, r4
   b4622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4628 <_GLOBAL__sub_I_SystemMode>:
} 
   b4628:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b462a:	4b29      	ldr	r3, [pc, #164]	; (b46d0 <_GLOBAL__sub_I_SystemMode+0xa8>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b462c:	4a29      	ldr	r2, [pc, #164]	; (b46d4 <_GLOBAL__sub_I_SystemMode+0xac>)
   b462e:	2501      	movs	r5, #1
   b4630:	701d      	strb	r5, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4632:	4b29      	ldr	r3, [pc, #164]	; (b46d8 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b4634:	2400      	movs	r4, #0
   b4636:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b4638:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b463a:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b463e:	4628      	mov	r0, r5
   b4640:	f000 faa4 	bl	b4b8c <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4644:	4621      	mov	r1, r4
   b4646:	4628      	mov	r0, r5
   b4648:	f000 fab0 	bl	b4bac <system_thread_set_state>
        capacity_(0) {
   b464c:	e9cd 4400 	strd	r4, r4, [sp]
   b4650:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4652:	f002 f909 	bl	b6868 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4656:	4c21      	ldr	r4, [pc, #132]	; (b46dc <_GLOBAL__sub_I_SystemMode+0xb4>)
   b4658:	4605      	mov	r5, r0
   b465a:	4669      	mov	r1, sp
   b465c:	a803      	add	r0, sp, #12
   b465e:	f7ff ffb0 	bl	b45c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4662:	4626      	mov	r6, r4
        stream_(&stream) {
   b4664:	a903      	add	r1, sp, #12
   b4666:	a806      	add	r0, sp, #24
   b4668:	f7ff ffab 	bl	b45c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b466c:	4b1c      	ldr	r3, [pc, #112]	; (b46e0 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b466e:	f846 3b04 	str.w	r3, [r6], #4
   b4672:	a906      	add	r1, sp, #24
   b4674:	a809      	add	r0, sp, #36	; 0x24
   b4676:	f7ff ffa4 	bl	b45c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b467a:	aa09      	add	r2, sp, #36	; 0x24
   b467c:	211e      	movs	r1, #30
   b467e:	4630      	mov	r0, r6
   b4680:	f001 f9c8 	bl	b5a14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4684:	a809      	add	r0, sp, #36	; 0x24
   b4686:	f7ff ff5b 	bl	b4540 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b468a:	a806      	add	r0, sp, #24
   b468c:	f7ff ff58 	bl	b4540 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4690:	4b14      	ldr	r3, [pc, #80]	; (b46e4 <_GLOBAL__sub_I_SystemMode+0xbc>)
   b4692:	6023      	str	r3, [r4, #0]
   b4694:	6225      	str	r5, [r4, #32]
   b4696:	a803      	add	r0, sp, #12
   b4698:	f7ff ff52 	bl	b4540 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b469c:	4b12      	ldr	r3, [pc, #72]	; (b46e8 <_GLOBAL__sub_I_SystemMode+0xc0>)
   b469e:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b46a0:	f002 f8e2 	bl	b6868 <_Z16_fetch_usbserialv>
   b46a4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b46a8:	f002 f8ce 	bl	b6848 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b46ac:	f000 fe94 	bl	b53d8 <_ZN5spark10LogManager8instanceEv>
   b46b0:	4621      	mov	r1, r4
   b46b2:	f001 f885 	bl	b57c0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   b46b6:	4668      	mov	r0, sp
   b46b8:	f7ff ff42 	bl	b4540 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
HX711ADC scale1;
   b46bc:	480b      	ldr	r0, [pc, #44]	; (b46ec <_GLOBAL__sub_I_SystemMode+0xc4>)
   b46be:	f000 f821 	bl	b4704 <_ZN8HX711ADCC1Ev>
HX711ADC scale2;
   b46c2:	480b      	ldr	r0, [pc, #44]	; (b46f0 <_GLOBAL__sub_I_SystemMode+0xc8>)
} 
   b46c4:	b00c      	add	sp, #48	; 0x30
   b46c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
HX711ADC scale2;
   b46ca:	f000 b81b 	b.w	b4704 <_ZN8HX711ADCC1Ev>
   b46ce:	bf00      	nop
   b46d0:	2003e4d0 	.word	0x2003e4d0
   b46d4:	ffff0000 	.word	0xffff0000
   b46d8:	2003e4c4 	.word	0x2003e4c4
   b46dc:	2003e4d4 	.word	0x2003e4d4
   b46e0:	000b7fa4 	.word	0x000b7fa4
   b46e4:	000b80c0 	.word	0x000b80c0
   b46e8:	000b7fbc 	.word	0x000b7fbc
   b46ec:	2003e4f8 	.word	0x2003e4f8
   b46f0:	2003e508 	.word	0x2003e508

000b46f4 <_ZN8HX711ADCD1Ev>:

HX711ADC::HX711ADC() {
}

HX711ADC::~HX711ADC() {
}
   b46f4:	4770      	bx	lr

000b46f6 <_ZN8HX711ADCD0Ev>:
HX711ADC::~HX711ADC() {
   b46f6:	b510      	push	{r4, lr}
}
   b46f8:	2110      	movs	r1, #16
HX711ADC::~HX711ADC() {
   b46fa:	4604      	mov	r4, r0
}
   b46fc:	f7ff fccd 	bl	b409a <_ZdlPvj>
   b4700:	4620      	mov	r0, r4
   b4702:	bd10      	pop	{r4, pc}

000b4704 <_ZN8HX711ADCC1Ev>:
HX711ADC::HX711ADC() {
   b4704:	4a03      	ldr	r2, [pc, #12]	; (b4714 <_ZN8HX711ADCC1Ev+0x10>)
   b4706:	6002      	str	r2, [r0, #0]
   b4708:	2200      	movs	r2, #0
   b470a:	6082      	str	r2, [r0, #8]
   b470c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   b4710:	60c2      	str	r2, [r0, #12]
}
   b4712:	4770      	bx	lr
   b4714:	000b7fe8 	.word	0x000b7fe8

000b4718 <_ZN8HX711ADC8set_gainEh>:
	pinMode(DOUT, INPUT);
  set_gain(gain);
}

void HX711ADC::set_gain(byte gain) {
	switch (gain) {
   b4718:	2920      	cmp	r1, #32
   b471a:	d008      	beq.n	b472e <_ZN8HX711ADC8set_gainEh+0x16>
   b471c:	2940      	cmp	r1, #64	; 0x40
		case 128:		// channel A, gain factor 128
			GAIN = 1;
   b471e:	bf14      	ite	ne
   b4720:	2301      	movne	r3, #1
			break;
		case 64:		// channel A, gain factor 64
			GAIN = 3;
   b4722:	2303      	moveq	r3, #3
			break;
		case 32:		// channel B, gain factor 32
			GAIN = 2;
   b4724:	7183      	strb	r3, [r0, #6]
    default:
      GAIN = 1;
      break;
	}

	digitalWrite(PD_SCK, LOW);
   b4726:	2100      	movs	r1, #0
   b4728:	7900      	ldrb	r0, [r0, #4]
   b472a:	f002 bcc0 	b.w	b70ae <digitalWrite>
			GAIN = 2;
   b472e:	2302      	movs	r3, #2
   b4730:	e7f8      	b.n	b4724 <_ZN8HX711ADC8set_gainEh+0xc>

000b4732 <_ZN8HX711ADC5beginEhhh>:
void HX711ADC::begin(byte dout, byte pd_sck, byte gain) {
   b4732:	b538      	push	{r3, r4, r5, lr}
   b4734:	4604      	mov	r4, r0
   b4736:	4610      	mov	r0, r2
 	PD_SCK = pd_sck;
   b4738:	7122      	strb	r2, [r4, #4]
	DOUT = dout;
   b473a:	7161      	strb	r1, [r4, #5]
	pinMode(PD_SCK, OUTPUT);
   b473c:	2101      	movs	r1, #1
void HX711ADC::begin(byte dout, byte pd_sck, byte gain) {
   b473e:	461d      	mov	r5, r3
	pinMode(PD_SCK, OUTPUT);
   b4740:	f002 fca4 	bl	b708c <pinMode>
	pinMode(DOUT, INPUT);
   b4744:	7960      	ldrb	r0, [r4, #5]
   b4746:	2100      	movs	r1, #0
   b4748:	f002 fca0 	bl	b708c <pinMode>
  set_gain(gain);
   b474c:	4629      	mov	r1, r5
   b474e:	4620      	mov	r0, r4
}
   b4750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  set_gain(gain);
   b4754:	f7ff bfe0 	b.w	b4718 <_ZN8HX711ADC8set_gainEh>

000b4758 <_ZN8HX711ADC4readEx>:
	//read();
}

long HX711ADC::read(time_t timeout) {
   b4758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b475c:	4604      	mov	r4, r0
   b475e:	4616      	mov	r6, r2
   b4760:	461f      	mov	r7, r3

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4762:	f000 f8eb 	bl	b493c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4766:	f8df 808c 	ldr.w	r8, [pc, #140]	; b47f4 <_ZN8HX711ADC4readEx+0x9c>
   b476a:	4605      	mov	r5, r0
		void begin(byte dout, byte pd_sck, byte gain = 128);

		// check if HX711 is ready
		// from the datasheet: When output data is not ready for retrieval, digital output pin DOUT is high. Serial clock
		// input PD_SCK should be low. When DOUT goes to low, it indicates data is ready for retrieval.
		inline bool is_ready() { return !digitalRead(DOUT); };
   b476c:	7960      	ldrb	r0, [r4, #5]
   b476e:	f002 fcb7 	bl	b70e0 <digitalRead>
	// wait for the chip to become ready
	for (time_t ms=millis(); !is_ready() && (millis() - ms < timeout);) {
   b4772:	b170      	cbz	r0, b4792 <_ZN8HX711ADC4readEx+0x3a>
   b4774:	f000 f8e2 	bl	b493c <HAL_Timer_Get_Milli_Seconds>
   b4778:	1b40      	subs	r0, r0, r5
   b477a:	eb63 0303 	sbc.w	r3, r3, r3
   b477e:	42b0      	cmp	r0, r6
   b4780:	41bb      	sbcs	r3, r7
   b4782:	da06      	bge.n	b4792 <_ZN8HX711ADC4readEx+0x3a>
		return HAL_Timer_Get_Milli_Seconds();
   b4784:	f000 f8da 	bl	b493c <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b4788:	f8c8 0000 	str.w	r0, [r8]
            return spark_process();
   b478c:	f000 fa9a 	bl	b4cc4 <spark_process>
   b4790:	e7ec      	b.n	b476c <_ZN8HX711ADC4readEx+0x14>
   b4792:	7960      	ldrb	r0, [r4, #5]
   b4794:	f002 fca4 	bl	b70e0 <digitalRead>
    // prevent resets of ESP8266 (Watchdog Issue)
    // or keeps cloud housekeeping running on Particle devices
		yield();
	}
  // still not ready after timeout periode, report error Not-A-Number
  if (!is_ready()) return NAN;
   b4798:	4606      	mov	r6, r0
   b479a:	bb48      	cbnz	r0, b47f0 <_ZN8HX711ADC4readEx+0x98>
	unsigned long value = 0;
	uint8_t data[3] = { 0 };
	uint8_t filler = 0x00;

	// pulse the clock pin 24 times to read the data
	data[2] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b479c:	7921      	ldrb	r1, [r4, #4]
   b479e:	7960      	ldrb	r0, [r4, #5]
   b47a0:	2201      	movs	r2, #1
   b47a2:	f002 fcb0 	bl	b7106 <shiftIn>
	data[1] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b47a6:	7921      	ldrb	r1, [r4, #4]
   b47a8:	2201      	movs	r2, #1
	data[2] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b47aa:	4607      	mov	r7, r0
	data[1] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b47ac:	7960      	ldrb	r0, [r4, #5]
   b47ae:	f002 fcaa 	bl	b7106 <shiftIn>
	data[0] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b47b2:	7921      	ldrb	r1, [r4, #4]
	data[1] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b47b4:	4605      	mov	r5, r0
	data[0] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b47b6:	2201      	movs	r2, #1
   b47b8:	7960      	ldrb	r0, [r4, #5]
   b47ba:	f002 fca4 	bl	b7106 <shiftIn>
   b47be:	4680      	mov	r8, r0

	// set the channel and the gain factor for the next reading using the clock pin
	for (unsigned int i = 0; i < GAIN; i++) {
   b47c0:	79a3      	ldrb	r3, [r4, #6]
   b47c2:	42b3      	cmp	r3, r6
   b47c4:	d909      	bls.n	b47da <_ZN8HX711ADC4readEx+0x82>
		digitalWrite(PD_SCK, HIGH);
   b47c6:	7920      	ldrb	r0, [r4, #4]
   b47c8:	2101      	movs	r1, #1
   b47ca:	f002 fc70 	bl	b70ae <digitalWrite>
		digitalWrite(PD_SCK, LOW);
   b47ce:	7920      	ldrb	r0, [r4, #4]
   b47d0:	2100      	movs	r1, #0
   b47d2:	f002 fc6c 	bl	b70ae <digitalWrite>
	for (unsigned int i = 0; i < GAIN; i++) {
   b47d6:	3601      	adds	r6, #1
   b47d8:	e7f2      	b.n	b47c0 <_ZN8HX711ADC4readEx+0x68>
	}

	// Construct a 32-bit signed integer
	value = static_cast<unsigned long>(filler)  << 24
		  | static_cast<unsigned long>(data[2]) << 16
		  | static_cast<unsigned long>(data[1]) << 8
   b47da:	022b      	lsls	r3, r5, #8
	value = static_cast<unsigned long>(filler)  << 24
   b47dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   b47e0:	ea43 0508 	orr.w	r5, r3, r8
	if (data[2] & 0x80) {
   b47e4:	f347 10c0 	sbfx	r0, r7, #7, #1
	value = static_cast<unsigned long>(filler)  << 24
   b47e8:	ea45 6000 	orr.w	r0, r5, r0, lsl #24
		  | static_cast<unsigned long>(data[0]) ;

	return static_cast<long>(value);
}
   b47ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!is_ready()) return NAN;
   b47f0:	2000      	movs	r0, #0
   b47f2:	e7fb      	b.n	b47ec <_ZN8HX711ADC4readEx+0x94>
   b47f4:	2003e740 	.word	0x2003e740

000b47f8 <_ZN8HX711ADC12read_averageEh>:

long HX711ADC::read_average(byte times) {
   b47f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b47fc:	4607      	mov	r7, r0
  if (times <= 0) return NAN;
   b47fe:	460c      	mov	r4, r1
   b4800:	b1c1      	cbz	r1, b4834 <_ZN8HX711ADC12read_averageEh+0x3c>
   b4802:	2500      	movs	r5, #0
   b4804:	f8df 8030 	ldr.w	r8, [pc, #48]	; b4838 <_ZN8HX711ADC12read_averageEh+0x40>
	long sum = 0;
   b4808:	462e      	mov	r6, r5
	for (byte i = 0; i < times; i++) {
		sum += read();
   b480a:	2300      	movs	r3, #0
   b480c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4810:	4638      	mov	r0, r7
   b4812:	f7ff ffa1 	bl	b4758 <_ZN8HX711ADC4readEx>
   b4816:	4406      	add	r6, r0
		return HAL_Timer_Get_Milli_Seconds();
   b4818:	f000 f890 	bl	b493c <HAL_Timer_Get_Milli_Seconds>
	for (byte i = 0; i < times; i++) {
   b481c:	3501      	adds	r5, #1
		last_checkin = current_time();
   b481e:	f8c8 0000 	str.w	r0, [r8]
   b4822:	f000 fa4f 	bl	b4cc4 <spark_process>
   b4826:	b2eb      	uxtb	r3, r5
   b4828:	429c      	cmp	r4, r3
   b482a:	d8ee      	bhi.n	b480a <_ZN8HX711ADC12read_averageEh+0x12>
		yield();
	}
	return sum / times;
   b482c:	fb96 f0f4 	sdiv	r0, r6, r4
}
   b4830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (times <= 0) return NAN;
   b4834:	4608      	mov	r0, r1
   b4836:	e7fb      	b.n	b4830 <_ZN8HX711ADC12read_averageEh+0x38>
   b4838:	2003e740 	.word	0x2003e740

000b483c <_ZN8HX711ADC9get_valueEh>:

double HX711ADC::get_value(byte times) {
   b483c:	b510      	push	{r4, lr}
   b483e:	4604      	mov	r4, r0
	return read_average(times) - OFFSET;
   b4840:	f7ff ffda 	bl	b47f8 <_ZN8HX711ADC12read_averageEh>
   b4844:	68a3      	ldr	r3, [r4, #8]
   b4846:	1ac0      	subs	r0, r0, r3
   b4848:	f002 fe5c 	bl	b7504 <__aeabi_i2d>
}
   b484c:	ec41 0b10 	vmov	d0, r0, r1
   b4850:	bd10      	pop	{r4, pc}

000b4852 <_ZN8HX711ADC9get_unitsEh>:

float HX711ADC::get_units(byte times) {
   b4852:	b570      	push	{r4, r5, r6, lr}
   b4854:	4606      	mov	r6, r0
	return get_value(times) / SCALE;
   b4856:	f7ff fff1 	bl	b483c <_ZN8HX711ADC9get_valueEh>
   b485a:	68f0      	ldr	r0, [r6, #12]
   b485c:	ec55 4b10 	vmov	r4, r5, d0
   b4860:	f002 fe62 	bl	b7528 <__aeabi_f2d>
   b4864:	4602      	mov	r2, r0
   b4866:	460b      	mov	r3, r1
   b4868:	4620      	mov	r0, r4
   b486a:	4629      	mov	r1, r5
   b486c:	f002 ffde 	bl	b782c <__aeabi_ddiv>
   b4870:	f003 f8c4 	bl	b79fc <__aeabi_d2f>
}
   b4874:	ee00 0a10 	vmov	s0, r0
   b4878:	bd70      	pop	{r4, r5, r6, pc}

000b487a <_ZN8HX711ADC4tareEh>:

void HX711ADC::tare(byte times) {
   b487a:	b510      	push	{r4, lr}
   b487c:	4604      	mov	r4, r0
	double sum = read_average(times);
   b487e:	f7ff ffbb 	bl	b47f8 <_ZN8HX711ADC12read_averageEh>
float HX711ADC::get_scale() {
	return SCALE;
}

void HX711ADC::set_offset(long offset) {
	OFFSET = offset;
   b4882:	60a0      	str	r0, [r4, #8]
}
   b4884:	bd10      	pop	{r4, pc}

000b4886 <_ZN8HX711ADC9set_scaleEf>:
  if (scale) {
   b4886:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b488a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    SCALE = 1;
   b488e:	bf08      	it	eq
   b4890:	eeb7 0a00 	vmoveq.f32	s0, #112	; 0x3f800000  1.0
   b4894:	ed80 0a03 	vstr	s0, [r0, #12]
}
   b4898:	4770      	bx	lr
	...

000b489c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b489c:	b508      	push	{r3, lr}
   b489e:	4b02      	ldr	r3, [pc, #8]	; (b48a8 <netdb_freeaddrinfo+0xc>)
   b48a0:	681b      	ldr	r3, [r3, #0]
   b48a2:	689b      	ldr	r3, [r3, #8]
   b48a4:	9301      	str	r3, [sp, #4]
   b48a6:	bd08      	pop	{r3, pc}
   b48a8:	00030268 	.word	0x00030268

000b48ac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b48ac:	b508      	push	{r3, lr}
   b48ae:	4b02      	ldr	r3, [pc, #8]	; (b48b8 <netdb_getaddrinfo+0xc>)
   b48b0:	681b      	ldr	r3, [r3, #0]
   b48b2:	68db      	ldr	r3, [r3, #12]
   b48b4:	9301      	str	r3, [sp, #4]
   b48b6:	bd08      	pop	{r3, pc}
   b48b8:	00030268 	.word	0x00030268

000b48bc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b48bc:	b508      	push	{r3, lr}
   b48be:	4b02      	ldr	r3, [pc, #8]	; (b48c8 <HAL_Pin_Mode+0xc>)
   b48c0:	681b      	ldr	r3, [r3, #0]
   b48c2:	689b      	ldr	r3, [r3, #8]
   b48c4:	9301      	str	r3, [sp, #4]
   b48c6:	bd08      	pop	{r3, pc}
   b48c8:	0003022c 	.word	0x0003022c

000b48cc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b48cc:	b508      	push	{r3, lr}
   b48ce:	4b02      	ldr	r3, [pc, #8]	; (b48d8 <HAL_Get_Pin_Mode+0xc>)
   b48d0:	681b      	ldr	r3, [r3, #0]
   b48d2:	68db      	ldr	r3, [r3, #12]
   b48d4:	9301      	str	r3, [sp, #4]
   b48d6:	bd08      	pop	{r3, pc}
   b48d8:	0003022c 	.word	0x0003022c

000b48dc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b48dc:	b508      	push	{r3, lr}
   b48de:	4b02      	ldr	r3, [pc, #8]	; (b48e8 <HAL_GPIO_Write+0xc>)
   b48e0:	681b      	ldr	r3, [r3, #0]
   b48e2:	691b      	ldr	r3, [r3, #16]
   b48e4:	9301      	str	r3, [sp, #4]
   b48e6:	bd08      	pop	{r3, pc}
   b48e8:	0003022c 	.word	0x0003022c

000b48ec <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b48ec:	b508      	push	{r3, lr}
   b48ee:	4b02      	ldr	r3, [pc, #8]	; (b48f8 <HAL_GPIO_Read+0xc>)
   b48f0:	681b      	ldr	r3, [r3, #0]
   b48f2:	695b      	ldr	r3, [r3, #20]
   b48f4:	9301      	str	r3, [sp, #4]
   b48f6:	bd08      	pop	{r3, pc}
   b48f8:	0003022c 	.word	0x0003022c

000b48fc <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b48fc:	b508      	push	{r3, lr}
   b48fe:	4b02      	ldr	r3, [pc, #8]	; (b4908 <HAL_Interrupts_Attach+0xc>)
   b4900:	681b      	ldr	r3, [r3, #0]
   b4902:	699b      	ldr	r3, [r3, #24]
   b4904:	9301      	str	r3, [sp, #4]
   b4906:	bd08      	pop	{r3, pc}
   b4908:	0003022c 	.word	0x0003022c

000b490c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b490c:	b508      	push	{r3, lr}
   b490e:	4b02      	ldr	r3, [pc, #8]	; (b4918 <HAL_Interrupts_Detach+0xc>)
   b4910:	681b      	ldr	r3, [r3, #0]
   b4912:	69db      	ldr	r3, [r3, #28]
   b4914:	9301      	str	r3, [sp, #4]
   b4916:	bd08      	pop	{r3, pc}
   b4918:	0003022c 	.word	0x0003022c

000b491c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b491c:	b508      	push	{r3, lr}
   b491e:	4b02      	ldr	r3, [pc, #8]	; (b4928 <HAL_RNG_GetRandomNumber+0xc>)
   b4920:	681b      	ldr	r3, [r3, #0]
   b4922:	685b      	ldr	r3, [r3, #4]
   b4924:	9301      	str	r3, [sp, #4]
   b4926:	bd08      	pop	{r3, pc}
   b4928:	00030218 	.word	0x00030218

000b492c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b492c:	b508      	push	{r3, lr}
   b492e:	4b02      	ldr	r3, [pc, #8]	; (b4938 <HAL_Delay_Microseconds+0xc>)
   b4930:	681b      	ldr	r3, [r3, #0]
   b4932:	68db      	ldr	r3, [r3, #12]
   b4934:	9301      	str	r3, [sp, #4]
   b4936:	bd08      	pop	{r3, pc}
   b4938:	00030218 	.word	0x00030218

000b493c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b493c:	b508      	push	{r3, lr}
   b493e:	4b02      	ldr	r3, [pc, #8]	; (b4948 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4940:	681b      	ldr	r3, [r3, #0]
   b4942:	695b      	ldr	r3, [r3, #20]
   b4944:	9301      	str	r3, [sp, #4]
   b4946:	bd08      	pop	{r3, pc}
   b4948:	00030218 	.word	0x00030218

000b494c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b494c:	b508      	push	{r3, lr}
   b494e:	4b02      	ldr	r3, [pc, #8]	; (b4958 <os_mutex_recursive_create+0xc>)
   b4950:	681b      	ldr	r3, [r3, #0]
   b4952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4954:	9301      	str	r3, [sp, #4]
   b4956:	bd08      	pop	{r3, pc}
   b4958:	00030248 	.word	0x00030248

000b495c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b495c:	b508      	push	{r3, lr}
   b495e:	4b02      	ldr	r3, [pc, #8]	; (b4968 <os_mutex_recursive_destroy+0xc>)
   b4960:	681b      	ldr	r3, [r3, #0]
   b4962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4964:	9301      	str	r3, [sp, #4]
   b4966:	bd08      	pop	{r3, pc}
   b4968:	00030248 	.word	0x00030248

000b496c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b496c:	b508      	push	{r3, lr}
   b496e:	4b02      	ldr	r3, [pc, #8]	; (b4978 <os_mutex_recursive_lock+0xc>)
   b4970:	681b      	ldr	r3, [r3, #0]
   b4972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4974:	9301      	str	r3, [sp, #4]
   b4976:	bd08      	pop	{r3, pc}
   b4978:	00030248 	.word	0x00030248

000b497c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b497c:	b508      	push	{r3, lr}
   b497e:	4b02      	ldr	r3, [pc, #8]	; (b4988 <os_mutex_recursive_unlock+0xc>)
   b4980:	681b      	ldr	r3, [r3, #0]
   b4982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4984:	9301      	str	r3, [sp, #4]
   b4986:	bd08      	pop	{r3, pc}
   b4988:	00030248 	.word	0x00030248

000b498c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b498c:	b508      	push	{r3, lr}
   b498e:	4b02      	ldr	r3, [pc, #8]	; (b4998 <inet_inet_ntop+0xc>)
   b4990:	681b      	ldr	r3, [r3, #0]
   b4992:	695b      	ldr	r3, [r3, #20]
   b4994:	9301      	str	r3, [sp, #4]
   b4996:	bd08      	pop	{r3, pc}
   b4998:	00030264 	.word	0x00030264

000b499c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b499c:	b508      	push	{r3, lr}
   b499e:	4b02      	ldr	r3, [pc, #8]	; (b49a8 <hal_usart_end+0xc>)
   b49a0:	681b      	ldr	r3, [r3, #0]
   b49a2:	689b      	ldr	r3, [r3, #8]
   b49a4:	9301      	str	r3, [sp, #4]
   b49a6:	bd08      	pop	{r3, pc}
   b49a8:	0003023c 	.word	0x0003023c

000b49ac <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b49ac:	b508      	push	{r3, lr}
   b49ae:	4b02      	ldr	r3, [pc, #8]	; (b49b8 <hal_usart_write+0xc>)
   b49b0:	681b      	ldr	r3, [r3, #0]
   b49b2:	68db      	ldr	r3, [r3, #12]
   b49b4:	9301      	str	r3, [sp, #4]
   b49b6:	bd08      	pop	{r3, pc}
   b49b8:	0003023c 	.word	0x0003023c

000b49bc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b49bc:	b508      	push	{r3, lr}
   b49be:	4b02      	ldr	r3, [pc, #8]	; (b49c8 <hal_usart_available+0xc>)
   b49c0:	681b      	ldr	r3, [r3, #0]
   b49c2:	691b      	ldr	r3, [r3, #16]
   b49c4:	9301      	str	r3, [sp, #4]
   b49c6:	bd08      	pop	{r3, pc}
   b49c8:	0003023c 	.word	0x0003023c

000b49cc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b49cc:	b508      	push	{r3, lr}
   b49ce:	4b02      	ldr	r3, [pc, #8]	; (b49d8 <hal_usart_read+0xc>)
   b49d0:	681b      	ldr	r3, [r3, #0]
   b49d2:	695b      	ldr	r3, [r3, #20]
   b49d4:	9301      	str	r3, [sp, #4]
   b49d6:	bd08      	pop	{r3, pc}
   b49d8:	0003023c 	.word	0x0003023c

000b49dc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b49dc:	b508      	push	{r3, lr}
   b49de:	4b02      	ldr	r3, [pc, #8]	; (b49e8 <hal_usart_peek+0xc>)
   b49e0:	681b      	ldr	r3, [r3, #0]
   b49e2:	699b      	ldr	r3, [r3, #24]
   b49e4:	9301      	str	r3, [sp, #4]
   b49e6:	bd08      	pop	{r3, pc}
   b49e8:	0003023c 	.word	0x0003023c

000b49ec <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b49ec:	b508      	push	{r3, lr}
   b49ee:	4b02      	ldr	r3, [pc, #8]	; (b49f8 <hal_usart_flush+0xc>)
   b49f0:	681b      	ldr	r3, [r3, #0]
   b49f2:	69db      	ldr	r3, [r3, #28]
   b49f4:	9301      	str	r3, [sp, #4]
   b49f6:	bd08      	pop	{r3, pc}
   b49f8:	0003023c 	.word	0x0003023c

000b49fc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b49fc:	b508      	push	{r3, lr}
   b49fe:	4b02      	ldr	r3, [pc, #8]	; (b4a08 <hal_usart_is_enabled+0xc>)
   b4a00:	681b      	ldr	r3, [r3, #0]
   b4a02:	6a1b      	ldr	r3, [r3, #32]
   b4a04:	9301      	str	r3, [sp, #4]
   b4a06:	bd08      	pop	{r3, pc}
   b4a08:	0003023c 	.word	0x0003023c

000b4a0c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4a0c:	b508      	push	{r3, lr}
   b4a0e:	4b02      	ldr	r3, [pc, #8]	; (b4a18 <hal_usart_available_data_for_write+0xc>)
   b4a10:	681b      	ldr	r3, [r3, #0]
   b4a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a14:	9301      	str	r3, [sp, #4]
   b4a16:	bd08      	pop	{r3, pc}
   b4a18:	0003023c 	.word	0x0003023c

000b4a1c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4a1c:	b508      	push	{r3, lr}
   b4a1e:	4b02      	ldr	r3, [pc, #8]	; (b4a28 <hal_usart_begin_config+0xc>)
   b4a20:	681b      	ldr	r3, [r3, #0]
   b4a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a24:	9301      	str	r3, [sp, #4]
   b4a26:	bd08      	pop	{r3, pc}
   b4a28:	0003023c 	.word	0x0003023c

000b4a2c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4a2c:	b508      	push	{r3, lr}
   b4a2e:	4b02      	ldr	r3, [pc, #8]	; (b4a38 <hal_usart_init_ex+0xc>)
   b4a30:	681b      	ldr	r3, [r3, #0]
   b4a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a34:	9301      	str	r3, [sp, #4]
   b4a36:	bd08      	pop	{r3, pc}
   b4a38:	0003023c 	.word	0x0003023c

000b4a3c <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4a3c:	b508      	push	{r3, lr}
   b4a3e:	4b02      	ldr	r3, [pc, #8]	; (b4a48 <hal_i2c_write+0xc>)
   b4a40:	681b      	ldr	r3, [r3, #0]
   b4a42:	6a1b      	ldr	r3, [r3, #32]
   b4a44:	9301      	str	r3, [sp, #4]
   b4a46:	bd08      	pop	{r3, pc}
   b4a48:	00030228 	.word	0x00030228

000b4a4c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4a4c:	b508      	push	{r3, lr}
   b4a4e:	4b02      	ldr	r3, [pc, #8]	; (b4a58 <hal_i2c_available+0xc>)
   b4a50:	681b      	ldr	r3, [r3, #0]
   b4a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a54:	9301      	str	r3, [sp, #4]
   b4a56:	bd08      	pop	{r3, pc}
   b4a58:	00030228 	.word	0x00030228

000b4a5c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4a5c:	b508      	push	{r3, lr}
   b4a5e:	4b02      	ldr	r3, [pc, #8]	; (b4a68 <hal_i2c_read+0xc>)
   b4a60:	681b      	ldr	r3, [r3, #0]
   b4a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a64:	9301      	str	r3, [sp, #4]
   b4a66:	bd08      	pop	{r3, pc}
   b4a68:	00030228 	.word	0x00030228

000b4a6c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4a6c:	b508      	push	{r3, lr}
   b4a6e:	4b02      	ldr	r3, [pc, #8]	; (b4a78 <hal_i2c_peek+0xc>)
   b4a70:	681b      	ldr	r3, [r3, #0]
   b4a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a74:	9301      	str	r3, [sp, #4]
   b4a76:	bd08      	pop	{r3, pc}
   b4a78:	00030228 	.word	0x00030228

000b4a7c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4a7c:	b508      	push	{r3, lr}
   b4a7e:	4b02      	ldr	r3, [pc, #8]	; (b4a88 <hal_i2c_flush+0xc>)
   b4a80:	681b      	ldr	r3, [r3, #0]
   b4a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a84:	9301      	str	r3, [sp, #4]
   b4a86:	bd08      	pop	{r3, pc}
   b4a88:	00030228 	.word	0x00030228

000b4a8c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4a8c:	b508      	push	{r3, lr}
   b4a8e:	4b02      	ldr	r3, [pc, #8]	; (b4a98 <hal_i2c_is_enabled+0xc>)
   b4a90:	681b      	ldr	r3, [r3, #0]
   b4a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4a94:	9301      	str	r3, [sp, #4]
   b4a96:	bd08      	pop	{r3, pc}
   b4a98:	00030228 	.word	0x00030228

000b4a9c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4a9c:	b508      	push	{r3, lr}
   b4a9e:	4b02      	ldr	r3, [pc, #8]	; (b4aa8 <hal_i2c_init+0xc>)
   b4aa0:	681b      	ldr	r3, [r3, #0]
   b4aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4aa4:	9301      	str	r3, [sp, #4]
   b4aa6:	bd08      	pop	{r3, pc}
   b4aa8:	00030228 	.word	0x00030228

000b4aac <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4aac:	b508      	push	{r3, lr}
   b4aae:	4b02      	ldr	r3, [pc, #8]	; (b4ab8 <hal_spi_init+0xc>)
   b4ab0:	681b      	ldr	r3, [r3, #0]
   b4ab2:	69db      	ldr	r3, [r3, #28]
   b4ab4:	9301      	str	r3, [sp, #4]
   b4ab6:	bd08      	pop	{r3, pc}
   b4ab8:	00030230 	.word	0x00030230

000b4abc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4abc:	b508      	push	{r3, lr}
   b4abe:	4b02      	ldr	r3, [pc, #8]	; (b4ac8 <hal_spi_is_enabled+0xc>)
   b4ac0:	681b      	ldr	r3, [r3, #0]
   b4ac2:	6a1b      	ldr	r3, [r3, #32]
   b4ac4:	9301      	str	r3, [sp, #4]
   b4ac6:	bd08      	pop	{r3, pc}
   b4ac8:	00030230 	.word	0x00030230

000b4acc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4acc:	b508      	push	{r3, lr}
   b4ace:	4b02      	ldr	r3, [pc, #8]	; (b4ad8 <HAL_USB_USART_Init+0xc>)
   b4ad0:	681b      	ldr	r3, [r3, #0]
   b4ad2:	681b      	ldr	r3, [r3, #0]
   b4ad4:	9301      	str	r3, [sp, #4]
   b4ad6:	bd08      	pop	{r3, pc}
   b4ad8:	0003024c 	.word	0x0003024c

000b4adc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4adc:	b508      	push	{r3, lr}
   b4ade:	4b02      	ldr	r3, [pc, #8]	; (b4ae8 <HAL_USB_USART_Begin+0xc>)
   b4ae0:	681b      	ldr	r3, [r3, #0]
   b4ae2:	685b      	ldr	r3, [r3, #4]
   b4ae4:	9301      	str	r3, [sp, #4]
   b4ae6:	bd08      	pop	{r3, pc}
   b4ae8:	0003024c 	.word	0x0003024c

000b4aec <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4aec:	b508      	push	{r3, lr}
   b4aee:	4b02      	ldr	r3, [pc, #8]	; (b4af8 <HAL_USB_USART_End+0xc>)
   b4af0:	681b      	ldr	r3, [r3, #0]
   b4af2:	689b      	ldr	r3, [r3, #8]
   b4af4:	9301      	str	r3, [sp, #4]
   b4af6:	bd08      	pop	{r3, pc}
   b4af8:	0003024c 	.word	0x0003024c

000b4afc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4afc:	b508      	push	{r3, lr}
   b4afe:	4b02      	ldr	r3, [pc, #8]	; (b4b08 <HAL_USB_USART_Available_Data+0xc>)
   b4b00:	681b      	ldr	r3, [r3, #0]
   b4b02:	691b      	ldr	r3, [r3, #16]
   b4b04:	9301      	str	r3, [sp, #4]
   b4b06:	bd08      	pop	{r3, pc}
   b4b08:	0003024c 	.word	0x0003024c

000b4b0c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4b0c:	b508      	push	{r3, lr}
   b4b0e:	4b02      	ldr	r3, [pc, #8]	; (b4b18 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4b10:	681b      	ldr	r3, [r3, #0]
   b4b12:	695b      	ldr	r3, [r3, #20]
   b4b14:	9301      	str	r3, [sp, #4]
   b4b16:	bd08      	pop	{r3, pc}
   b4b18:	0003024c 	.word	0x0003024c

000b4b1c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4b1c:	b508      	push	{r3, lr}
   b4b1e:	4b02      	ldr	r3, [pc, #8]	; (b4b28 <HAL_USB_USART_Receive_Data+0xc>)
   b4b20:	681b      	ldr	r3, [r3, #0]
   b4b22:	699b      	ldr	r3, [r3, #24]
   b4b24:	9301      	str	r3, [sp, #4]
   b4b26:	bd08      	pop	{r3, pc}
   b4b28:	0003024c 	.word	0x0003024c

000b4b2c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4b2c:	b508      	push	{r3, lr}
   b4b2e:	4b02      	ldr	r3, [pc, #8]	; (b4b38 <HAL_USB_USART_Send_Data+0xc>)
   b4b30:	681b      	ldr	r3, [r3, #0]
   b4b32:	69db      	ldr	r3, [r3, #28]
   b4b34:	9301      	str	r3, [sp, #4]
   b4b36:	bd08      	pop	{r3, pc}
   b4b38:	0003024c 	.word	0x0003024c

000b4b3c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4b3c:	b508      	push	{r3, lr}
   b4b3e:	4b02      	ldr	r3, [pc, #8]	; (b4b48 <HAL_USB_USART_Flush_Data+0xc>)
   b4b40:	681b      	ldr	r3, [r3, #0]
   b4b42:	6a1b      	ldr	r3, [r3, #32]
   b4b44:	9301      	str	r3, [sp, #4]
   b4b46:	bd08      	pop	{r3, pc}
   b4b48:	0003024c 	.word	0x0003024c

000b4b4c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4b4c:	b508      	push	{r3, lr}
   b4b4e:	4b02      	ldr	r3, [pc, #8]	; (b4b58 <panic_+0xc>)
   b4b50:	681b      	ldr	r3, [r3, #0]
   b4b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4b54:	9301      	str	r3, [sp, #4]
   b4b56:	bd08      	pop	{r3, pc}
   b4b58:	00030260 	.word	0x00030260

000b4b5c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b4b5c:	b508      	push	{r3, lr}
   b4b5e:	4b02      	ldr	r3, [pc, #8]	; (b4b68 <log_message_v+0xc>)
   b4b60:	681b      	ldr	r3, [r3, #0]
   b4b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4b64:	9301      	str	r3, [sp, #4]
   b4b66:	bd08      	pop	{r3, pc}
   b4b68:	00030260 	.word	0x00030260

000b4b6c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b4b6c:	b508      	push	{r3, lr}
   b4b6e:	4b02      	ldr	r3, [pc, #8]	; (b4b78 <log_level_name+0xc>)
   b4b70:	681b      	ldr	r3, [r3, #0]
   b4b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b4b74:	9301      	str	r3, [sp, #4]
   b4b76:	bd08      	pop	{r3, pc}
   b4b78:	00030260 	.word	0x00030260

000b4b7c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b4b7c:	b508      	push	{r3, lr}
   b4b7e:	4b02      	ldr	r3, [pc, #8]	; (b4b88 <log_set_callbacks+0xc>)
   b4b80:	681b      	ldr	r3, [r3, #0]
   b4b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b4b84:	9301      	str	r3, [sp, #4]
   b4b86:	bd08      	pop	{r3, pc}
   b4b88:	00030260 	.word	0x00030260

000b4b8c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4b8c:	b508      	push	{r3, lr}
   b4b8e:	4b02      	ldr	r3, [pc, #8]	; (b4b98 <set_system_mode+0xc>)
   b4b90:	681b      	ldr	r3, [r3, #0]
   b4b92:	685b      	ldr	r3, [r3, #4]
   b4b94:	9301      	str	r3, [sp, #4]
   b4b96:	bd08      	pop	{r3, pc}
   b4b98:	00030220 	.word	0x00030220

000b4b9c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4b9c:	b508      	push	{r3, lr}
   b4b9e:	4b02      	ldr	r3, [pc, #8]	; (b4ba8 <system_delay_ms+0xc>)
   b4ba0:	681b      	ldr	r3, [r3, #0]
   b4ba2:	695b      	ldr	r3, [r3, #20]
   b4ba4:	9301      	str	r3, [sp, #4]
   b4ba6:	bd08      	pop	{r3, pc}
   b4ba8:	00030220 	.word	0x00030220

000b4bac <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4bac:	b508      	push	{r3, lr}
   b4bae:	4b02      	ldr	r3, [pc, #8]	; (b4bb8 <system_thread_set_state+0xc>)
   b4bb0:	681b      	ldr	r3, [r3, #0]
   b4bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4bb4:	9301      	str	r3, [sp, #4]
   b4bb6:	bd08      	pop	{r3, pc}
   b4bb8:	00030220 	.word	0x00030220

000b4bbc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4bbc:	b508      	push	{r3, lr}
   b4bbe:	4b02      	ldr	r3, [pc, #8]	; (b4bc8 <application_thread_current+0xc>)
   b4bc0:	681b      	ldr	r3, [r3, #0]
   b4bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4bc4:	9301      	str	r3, [sp, #4]
   b4bc6:	bd08      	pop	{r3, pc}
   b4bc8:	00030220 	.word	0x00030220

000b4bcc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4bcc:	b508      	push	{r3, lr}
   b4bce:	4b02      	ldr	r3, [pc, #8]	; (b4bd8 <application_thread_invoke+0xc>)
   b4bd0:	681b      	ldr	r3, [r3, #0]
   b4bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4bd4:	9301      	str	r3, [sp, #4]
   b4bd6:	bd08      	pop	{r3, pc}
   b4bd8:	00030220 	.word	0x00030220

000b4bdc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4bdc:	b508      	push	{r3, lr}
   b4bde:	4b03      	ldr	r3, [pc, #12]	; (b4bec <system_ctrl_set_app_request_handler+0x10>)
   b4be0:	681b      	ldr	r3, [r3, #0]
   b4be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4be6:	9301      	str	r3, [sp, #4]
   b4be8:	bd08      	pop	{r3, pc}
   b4bea:	0000      	.short	0x0000
   b4bec:	00030220 	.word	0x00030220

000b4bf0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4bf0:	b508      	push	{r3, lr}
   b4bf2:	4b03      	ldr	r3, [pc, #12]	; (b4c00 <system_ctrl_set_result+0x10>)
   b4bf4:	681b      	ldr	r3, [r3, #0]
   b4bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4bfa:	9301      	str	r3, [sp, #4]
   b4bfc:	bd08      	pop	{r3, pc}
   b4bfe:	0000      	.short	0x0000
   b4c00:	00030220 	.word	0x00030220

000b4c04 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c04:	b508      	push	{r3, lr}
   b4c06:	4b02      	ldr	r3, [pc, #8]	; (b4c10 <network_connect+0xc>)
   b4c08:	681b      	ldr	r3, [r3, #0]
   b4c0a:	685b      	ldr	r3, [r3, #4]
   b4c0c:	9301      	str	r3, [sp, #4]
   b4c0e:	bd08      	pop	{r3, pc}
   b4c10:	00030240 	.word	0x00030240

000b4c14 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4c14:	b508      	push	{r3, lr}
   b4c16:	4b02      	ldr	r3, [pc, #8]	; (b4c20 <network_connecting+0xc>)
   b4c18:	681b      	ldr	r3, [r3, #0]
   b4c1a:	689b      	ldr	r3, [r3, #8]
   b4c1c:	9301      	str	r3, [sp, #4]
   b4c1e:	bd08      	pop	{r3, pc}
   b4c20:	00030240 	.word	0x00030240

000b4c24 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4c24:	b508      	push	{r3, lr}
   b4c26:	4b02      	ldr	r3, [pc, #8]	; (b4c30 <network_disconnect+0xc>)
   b4c28:	681b      	ldr	r3, [r3, #0]
   b4c2a:	68db      	ldr	r3, [r3, #12]
   b4c2c:	9301      	str	r3, [sp, #4]
   b4c2e:	bd08      	pop	{r3, pc}
   b4c30:	00030240 	.word	0x00030240

000b4c34 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4c34:	b508      	push	{r3, lr}
   b4c36:	4b02      	ldr	r3, [pc, #8]	; (b4c40 <network_ready+0xc>)
   b4c38:	681b      	ldr	r3, [r3, #0]
   b4c3a:	691b      	ldr	r3, [r3, #16]
   b4c3c:	9301      	str	r3, [sp, #4]
   b4c3e:	bd08      	pop	{r3, pc}
   b4c40:	00030240 	.word	0x00030240

000b4c44 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c44:	b508      	push	{r3, lr}
   b4c46:	4b02      	ldr	r3, [pc, #8]	; (b4c50 <network_on+0xc>)
   b4c48:	681b      	ldr	r3, [r3, #0]
   b4c4a:	695b      	ldr	r3, [r3, #20]
   b4c4c:	9301      	str	r3, [sp, #4]
   b4c4e:	bd08      	pop	{r3, pc}
   b4c50:	00030240 	.word	0x00030240

000b4c54 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c54:	b508      	push	{r3, lr}
   b4c56:	4b02      	ldr	r3, [pc, #8]	; (b4c60 <network_off+0xc>)
   b4c58:	681b      	ldr	r3, [r3, #0]
   b4c5a:	699b      	ldr	r3, [r3, #24]
   b4c5c:	9301      	str	r3, [sp, #4]
   b4c5e:	bd08      	pop	{r3, pc}
   b4c60:	00030240 	.word	0x00030240

000b4c64 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4c64:	b508      	push	{r3, lr}
   b4c66:	4b02      	ldr	r3, [pc, #8]	; (b4c70 <network_listen+0xc>)
   b4c68:	681b      	ldr	r3, [r3, #0]
   b4c6a:	69db      	ldr	r3, [r3, #28]
   b4c6c:	9301      	str	r3, [sp, #4]
   b4c6e:	bd08      	pop	{r3, pc}
   b4c70:	00030240 	.word	0x00030240

000b4c74 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4c74:	b508      	push	{r3, lr}
   b4c76:	4b02      	ldr	r3, [pc, #8]	; (b4c80 <network_listening+0xc>)
   b4c78:	681b      	ldr	r3, [r3, #0]
   b4c7a:	6a1b      	ldr	r3, [r3, #32]
   b4c7c:	9301      	str	r3, [sp, #4]
   b4c7e:	bd08      	pop	{r3, pc}
   b4c80:	00030240 	.word	0x00030240

000b4c84 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4c84:	b508      	push	{r3, lr}
   b4c86:	4b02      	ldr	r3, [pc, #8]	; (b4c90 <network_set_listen_timeout+0xc>)
   b4c88:	681b      	ldr	r3, [r3, #0]
   b4c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c8c:	9301      	str	r3, [sp, #4]
   b4c8e:	bd08      	pop	{r3, pc}
   b4c90:	00030240 	.word	0x00030240

000b4c94 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4c94:	b508      	push	{r3, lr}
   b4c96:	4b02      	ldr	r3, [pc, #8]	; (b4ca0 <network_get_listen_timeout+0xc>)
   b4c98:	681b      	ldr	r3, [r3, #0]
   b4c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4c9c:	9301      	str	r3, [sp, #4]
   b4c9e:	bd08      	pop	{r3, pc}
   b4ca0:	00030240 	.word	0x00030240

000b4ca4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4ca4:	b508      	push	{r3, lr}
   b4ca6:	4b02      	ldr	r3, [pc, #8]	; (b4cb0 <network_is_on+0xc>)
   b4ca8:	681b      	ldr	r3, [r3, #0]
   b4caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4cac:	9301      	str	r3, [sp, #4]
   b4cae:	bd08      	pop	{r3, pc}
   b4cb0:	00030240 	.word	0x00030240

000b4cb4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4cb4:	b508      	push	{r3, lr}
   b4cb6:	4b02      	ldr	r3, [pc, #8]	; (b4cc0 <network_is_off+0xc>)
   b4cb8:	681b      	ldr	r3, [r3, #0]
   b4cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4cbc:	9301      	str	r3, [sp, #4]
   b4cbe:	bd08      	pop	{r3, pc}
   b4cc0:	00030240 	.word	0x00030240

000b4cc4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b4cc4:	b508      	push	{r3, lr}
   b4cc6:	4b02      	ldr	r3, [pc, #8]	; (b4cd0 <spark_process+0xc>)
   b4cc8:	681b      	ldr	r3, [r3, #0]
   b4cca:	689b      	ldr	r3, [r3, #8]
   b4ccc:	9301      	str	r3, [sp, #4]
   b4cce:	bd08      	pop	{r3, pc}
   b4cd0:	00030244 	.word	0x00030244

000b4cd4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4cd4:	b508      	push	{r3, lr}
   b4cd6:	4b02      	ldr	r3, [pc, #8]	; (b4ce0 <spark_cloud_flag_connected+0xc>)
   b4cd8:	681b      	ldr	r3, [r3, #0]
   b4cda:	695b      	ldr	r3, [r3, #20]
   b4cdc:	9301      	str	r3, [sp, #4]
   b4cde:	bd08      	pop	{r3, pc}
   b4ce0:	00030244 	.word	0x00030244

000b4ce4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4ce4:	b508      	push	{r3, lr}
   b4ce6:	4b02      	ldr	r3, [pc, #8]	; (b4cf0 <spark_send_event+0xc>)
   b4ce8:	681b      	ldr	r3, [r3, #0]
   b4cea:	6a1b      	ldr	r3, [r3, #32]
   b4cec:	9301      	str	r3, [sp, #4]
   b4cee:	bd08      	pop	{r3, pc}
   b4cf0:	00030244 	.word	0x00030244

000b4cf4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b4cf4:	b508      	push	{r3, lr}
   b4cf6:	4b02      	ldr	r3, [pc, #8]	; (b4d00 <spark_subscribe+0xc>)
   b4cf8:	681b      	ldr	r3, [r3, #0]
   b4cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4cfc:	9301      	str	r3, [sp, #4]
   b4cfe:	bd08      	pop	{r3, pc}
   b4d00:	00030244 	.word	0x00030244

000b4d04 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4d04:	b508      	push	{r3, lr}
   b4d06:	4b02      	ldr	r3, [pc, #8]	; (b4d10 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4d08:	681b      	ldr	r3, [r3, #0]
   b4d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4d0c:	9301      	str	r3, [sp, #4]
   b4d0e:	bd08      	pop	{r3, pc}
   b4d10:	00030244 	.word	0x00030244

000b4d14 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4d14:	b508      	push	{r3, lr}
   b4d16:	4b02      	ldr	r3, [pc, #8]	; (b4d20 <malloc+0xc>)
   b4d18:	681b      	ldr	r3, [r3, #0]
   b4d1a:	681b      	ldr	r3, [r3, #0]
   b4d1c:	9301      	str	r3, [sp, #4]
   b4d1e:	bd08      	pop	{r3, pc}
   b4d20:	0003021c 	.word	0x0003021c

000b4d24 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4d24:	b508      	push	{r3, lr}
   b4d26:	4b02      	ldr	r3, [pc, #8]	; (b4d30 <free+0xc>)
   b4d28:	681b      	ldr	r3, [r3, #0]
   b4d2a:	685b      	ldr	r3, [r3, #4]
   b4d2c:	9301      	str	r3, [sp, #4]
   b4d2e:	bd08      	pop	{r3, pc}
   b4d30:	0003021c 	.word	0x0003021c

000b4d34 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4d34:	b508      	push	{r3, lr}
   b4d36:	4b02      	ldr	r3, [pc, #8]	; (b4d40 <realloc+0xc>)
   b4d38:	681b      	ldr	r3, [r3, #0]
   b4d3a:	689b      	ldr	r3, [r3, #8]
   b4d3c:	9301      	str	r3, [sp, #4]
   b4d3e:	bd08      	pop	{r3, pc}
   b4d40:	0003021c 	.word	0x0003021c

000b4d44 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b4d44:	b508      	push	{r3, lr}
   b4d46:	4b02      	ldr	r3, [pc, #8]	; (b4d50 <snprintf+0xc>)
   b4d48:	681b      	ldr	r3, [r3, #0]
   b4d4a:	69db      	ldr	r3, [r3, #28]
   b4d4c:	9301      	str	r3, [sp, #4]
   b4d4e:	bd08      	pop	{r3, pc}
   b4d50:	0003021c 	.word	0x0003021c

000b4d54 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4d54:	b508      	push	{r3, lr}
   b4d56:	4b02      	ldr	r3, [pc, #8]	; (b4d60 <vsnprintf+0xc>)
   b4d58:	681b      	ldr	r3, [r3, #0]
   b4d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4d5c:	9301      	str	r3, [sp, #4]
   b4d5e:	bd08      	pop	{r3, pc}
   b4d60:	0003021c 	.word	0x0003021c

000b4d64 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4d64:	b508      	push	{r3, lr}
   b4d66:	4b02      	ldr	r3, [pc, #8]	; (b4d70 <abort+0xc>)
   b4d68:	681b      	ldr	r3, [r3, #0]
   b4d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d6c:	9301      	str	r3, [sp, #4]
   b4d6e:	bd08      	pop	{r3, pc}
   b4d70:	0003021c 	.word	0x0003021c

000b4d74 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4d74:	b508      	push	{r3, lr}
   b4d76:	4b02      	ldr	r3, [pc, #8]	; (b4d80 <_malloc_r+0xc>)
   b4d78:	681b      	ldr	r3, [r3, #0]
   b4d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d7c:	9301      	str	r3, [sp, #4]
   b4d7e:	bd08      	pop	{r3, pc}
   b4d80:	0003021c 	.word	0x0003021c

000b4d84 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4d84:	b508      	push	{r3, lr}
   b4d86:	4b02      	ldr	r3, [pc, #8]	; (b4d90 <__errno+0xc>)
   b4d88:	681b      	ldr	r3, [r3, #0]
   b4d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4d8c:	9301      	str	r3, [sp, #4]
   b4d8e:	bd08      	pop	{r3, pc}
   b4d90:	0003021c 	.word	0x0003021c

000b4d94 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4d94:	b508      	push	{r3, lr}
   b4d96:	4b02      	ldr	r3, [pc, #8]	; (b4da0 <__assert_func+0xc>)
   b4d98:	681b      	ldr	r3, [r3, #0]
   b4d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d9c:	9301      	str	r3, [sp, #4]
   b4d9e:	bd08      	pop	{r3, pc}
   b4da0:	0003021c 	.word	0x0003021c

000b4da4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4da4:	b508      	push	{r3, lr}
   b4da6:	4b02      	ldr	r3, [pc, #8]	; (b4db0 <newlib_impure_ptr_callback+0xc>)
   b4da8:	681b      	ldr	r3, [r3, #0]
   b4daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4dac:	9301      	str	r3, [sp, #4]
   b4dae:	bd08      	pop	{r3, pc}
   b4db0:	0003021c 	.word	0x0003021c

000b4db4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4db4:	2200      	movs	r2, #0
   b4db6:	6840      	ldr	r0, [r0, #4]
   b4db8:	4611      	mov	r1, r2
   b4dba:	f7ff bf5b 	b.w	b4c74 <network_listening>

000b4dbe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4dbe:	2200      	movs	r2, #0
   b4dc0:	6840      	ldr	r0, [r0, #4]
   b4dc2:	4611      	mov	r1, r2
   b4dc4:	f7ff bf66 	b.w	b4c94 <network_get_listen_timeout>

000b4dc8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4dc8:	6840      	ldr	r0, [r0, #4]
   b4dca:	2200      	movs	r2, #0
   b4dcc:	f7ff bf5a 	b.w	b4c84 <network_set_listen_timeout>

000b4dd0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4dd0:	6840      	ldr	r0, [r0, #4]
   b4dd2:	2200      	movs	r2, #0
   b4dd4:	f081 0101 	eor.w	r1, r1, #1
   b4dd8:	f7ff bf44 	b.w	b4c64 <network_listen>

000b4ddc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4ddc:	2300      	movs	r3, #0
   b4dde:	6840      	ldr	r0, [r0, #4]
   b4de0:	461a      	mov	r2, r3
   b4de2:	4619      	mov	r1, r3
   b4de4:	f7ff bf36 	b.w	b4c54 <network_off>

000b4de8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4de8:	2300      	movs	r3, #0
   b4dea:	6840      	ldr	r0, [r0, #4]
   b4dec:	461a      	mov	r2, r3
   b4dee:	4619      	mov	r1, r3
   b4df0:	f7ff bf28 	b.w	b4c44 <network_on>

000b4df4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4df4:	2200      	movs	r2, #0
   b4df6:	6840      	ldr	r0, [r0, #4]
   b4df8:	4611      	mov	r1, r2
   b4dfa:	f7ff bf1b 	b.w	b4c34 <network_ready>

000b4dfe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4dfe:	2200      	movs	r2, #0
   b4e00:	6840      	ldr	r0, [r0, #4]
   b4e02:	4611      	mov	r1, r2
   b4e04:	f7ff bf06 	b.w	b4c14 <network_connecting>

000b4e08 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4e08:	6840      	ldr	r0, [r0, #4]
   b4e0a:	2200      	movs	r2, #0
   b4e0c:	2102      	movs	r1, #2
   b4e0e:	f7ff bf09 	b.w	b4c24 <network_disconnect>

000b4e12 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4e12:	2300      	movs	r3, #0
   b4e14:	6840      	ldr	r0, [r0, #4]
   b4e16:	461a      	mov	r2, r3
   b4e18:	f7ff bef4 	b.w	b4c04 <network_connect>

000b4e1c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4e1c:	4b02      	ldr	r3, [pc, #8]	; (b4e28 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4e1e:	2203      	movs	r2, #3
   b4e20:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4e22:	4a02      	ldr	r2, [pc, #8]	; (b4e2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4e24:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4e26:	4770      	bx	lr
   b4e28:	2003e684 	.word	0x2003e684
   b4e2c:	000b7ff8 	.word	0x000b7ff8

000b4e30 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4e30:	b510      	push	{r4, lr}
   b4e32:	4604      	mov	r4, r0
   b4e34:	4608      	mov	r0, r1
{
    _spi = spi;
   b4e36:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4e38:	f7ff fe38 	bl	b4aac <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4e3c:	2300      	movs	r3, #0
   b4e3e:	6063      	str	r3, [r4, #4]
}
   b4e40:	4620      	mov	r0, r4
   b4e42:	bd10      	pop	{r4, pc}

000b4e44 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4e44:	4b05      	ldr	r3, [pc, #20]	; (b4e5c <_GLOBAL__sub_I_System+0x18>)
   b4e46:	2202      	movs	r2, #2
   b4e48:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4e4a:	4b05      	ldr	r3, [pc, #20]	; (b4e60 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4e4c:	4a05      	ldr	r2, [pc, #20]	; (b4e64 <_GLOBAL__sub_I_System+0x20>)
   b4e4e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4e50:	2000      	movs	r0, #0
   b4e52:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4e56:	f7ff be99 	b.w	b4b8c <set_system_mode>
   b4e5a:	bf00      	nop
   b4e5c:	2003e698 	.word	0x2003e698
   b4e60:	2003e68c 	.word	0x2003e68c
   b4e64:	ffff0000 	.word	0xffff0000

000b4e68 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b4e68:	b510      	push	{r4, lr}
   b4e6a:	4604      	mov	r4, r0
{
    free(buffer);
   b4e6c:	6800      	ldr	r0, [r0, #0]
   b4e6e:	f7ff ff59 	bl	b4d24 <free>
}
   b4e72:	4620      	mov	r0, r4
   b4e74:	bd10      	pop	{r4, pc}

000b4e76 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b4e76:	b510      	push	{r4, lr}
   b4e78:	4604      	mov	r4, r0
    if (buffer) {
   b4e7a:	6800      	ldr	r0, [r0, #0]
   b4e7c:	b108      	cbz	r0, b4e82 <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b4e7e:	f7ff ff51 	bl	b4d24 <free>
    }
    buffer = nullptr;
   b4e82:	2300      	movs	r3, #0
    capacity = len = 0;
   b4e84:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b4e88:	6023      	str	r3, [r4, #0]
}
   b4e8a:	bd10      	pop	{r4, pc}

000b4e8c <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4e8c:	b538      	push	{r3, r4, r5, lr}
   b4e8e:	4604      	mov	r4, r0
   b4e90:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4e92:	6800      	ldr	r0, [r0, #0]
   b4e94:	3101      	adds	r1, #1
   b4e96:	f7ff ff4d 	bl	b4d34 <realloc>
    if (newbuffer) {
   b4e9a:	b110      	cbz	r0, b4ea2 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
   b4e9c:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b4ea0:	2001      	movs	r0, #1
    }
    return 0;
}
   b4ea2:	bd38      	pop	{r3, r4, r5, pc}

000b4ea4 <_ZN6String7reserveEj>:
{
   b4ea4:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
   b4ea6:	6803      	ldr	r3, [r0, #0]
{
   b4ea8:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
   b4eaa:	b123      	cbz	r3, b4eb6 <_ZN6String7reserveEj+0x12>
   b4eac:	6843      	ldr	r3, [r0, #4]
   b4eae:	428b      	cmp	r3, r1
   b4eb0:	d301      	bcc.n	b4eb6 <_ZN6String7reserveEj+0x12>
   b4eb2:	2001      	movs	r0, #1
}
   b4eb4:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b4eb6:	4620      	mov	r0, r4
   b4eb8:	f7ff ffe8 	bl	b4e8c <_ZN6String12changeBufferEj>
   b4ebc:	2800      	cmp	r0, #0
   b4ebe:	d0f9      	beq.n	b4eb4 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b4ec0:	68a3      	ldr	r3, [r4, #8]
   b4ec2:	2b00      	cmp	r3, #0
   b4ec4:	d1f5      	bne.n	b4eb2 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b4ec6:	6822      	ldr	r2, [r4, #0]
   b4ec8:	7013      	strb	r3, [r2, #0]
   b4eca:	e7f2      	b.n	b4eb2 <_ZN6String7reserveEj+0xe>

000b4ecc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4ece:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b4ed0:	4611      	mov	r1, r2
   b4ed2:	9201      	str	r2, [sp, #4]
{
   b4ed4:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b4ed6:	f7ff ffe5 	bl	b4ea4 <_ZN6String7reserveEj>
   b4eda:	9a01      	ldr	r2, [sp, #4]
   b4edc:	b928      	cbnz	r0, b4eea <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b4ede:	4620      	mov	r0, r4
   b4ee0:	f7ff ffc9 	bl	b4e76 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b4ee4:	4620      	mov	r0, r4
   b4ee6:	b003      	add	sp, #12
   b4ee8:	bd30      	pop	{r4, r5, pc}
    len = length;
   b4eea:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b4eec:	4629      	mov	r1, r5
   b4eee:	6820      	ldr	r0, [r4, #0]
   b4ef0:	f002 fde2 	bl	b7ab8 <memcpy>
    buffer[len] = 0;
   b4ef4:	6822      	ldr	r2, [r4, #0]
   b4ef6:	68a3      	ldr	r3, [r4, #8]
   b4ef8:	2100      	movs	r1, #0
   b4efa:	54d1      	strb	r1, [r2, r3]
    return *this;
   b4efc:	e7f2      	b.n	b4ee4 <_ZN6String4copyEPKcj+0x18>

000b4efe <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b4efe:	b538      	push	{r3, r4, r5, lr}
   b4f00:	4605      	mov	r5, r0
    if (buffer) {
   b4f02:	6800      	ldr	r0, [r0, #0]
{
   b4f04:	460c      	mov	r4, r1
    if (buffer) {
   b4f06:	b170      	cbz	r0, b4f26 <_ZN6String4moveERS_+0x28>
        if (capacity >= rhs.len && rhs.buffer) {
   b4f08:	686a      	ldr	r2, [r5, #4]
   b4f0a:	688b      	ldr	r3, [r1, #8]
   b4f0c:	429a      	cmp	r2, r3
   b4f0e:	d308      	bcc.n	b4f22 <_ZN6String4moveERS_+0x24>
   b4f10:	6809      	ldr	r1, [r1, #0]
   b4f12:	b131      	cbz	r1, b4f22 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   b4f14:	f002 fe4f 	bl	b7bb6 <strcpy>
            len = rhs.len;
   b4f18:	68a3      	ldr	r3, [r4, #8]
   b4f1a:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   b4f1c:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity = rhs.capacity;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity = 0;
    rhs.len = 0;
   b4f1e:	60a3      	str	r3, [r4, #8]
}
   b4f20:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   b4f22:	f7ff feff 	bl	b4d24 <free>
    buffer = rhs.buffer;
   b4f26:	6823      	ldr	r3, [r4, #0]
   b4f28:	602b      	str	r3, [r5, #0]
    capacity = rhs.capacity;
   b4f2a:	6863      	ldr	r3, [r4, #4]
   b4f2c:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   b4f2e:	68a3      	ldr	r3, [r4, #8]
   b4f30:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   b4f32:	2300      	movs	r3, #0
    rhs.capacity = 0;
   b4f34:	e9c4 3300 	strd	r3, r3, [r4]
   b4f38:	e7f1      	b.n	b4f1e <_ZN6String4moveERS_+0x20>

000b4f3a <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b4f3a:	b510      	push	{r4, lr}
    buffer = nullptr;
   b4f3c:	2300      	movs	r3, #0
    capacity = 0;
   b4f3e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b4f42:	4604      	mov	r4, r0
    len = 0;
   b4f44:	6083      	str	r3, [r0, #8]
    flags = 0;
   b4f46:	7303      	strb	r3, [r0, #12]
    move(rval);
   b4f48:	f7ff ffd9 	bl	b4efe <_ZN6String4moveERS_>
}
   b4f4c:	4620      	mov	r0, r4
   b4f4e:	bd10      	pop	{r4, pc}

000b4f50 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   b4f50:	4288      	cmp	r0, r1
{
   b4f52:	b510      	push	{r4, lr}
   b4f54:	4604      	mov	r4, r0
    if (this == &rhs) {
   b4f56:	d005      	beq.n	b4f64 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   b4f58:	680b      	ldr	r3, [r1, #0]
   b4f5a:	b12b      	cbz	r3, b4f68 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   b4f5c:	688a      	ldr	r2, [r1, #8]
   b4f5e:	4619      	mov	r1, r3
   b4f60:	f7ff ffb4 	bl	b4ecc <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b4f64:	4620      	mov	r0, r4
   b4f66:	bd10      	pop	{r4, pc}
        invalidate();
   b4f68:	f7ff ff85 	bl	b4e76 <_ZN6String10invalidateEv>
   b4f6c:	e7fa      	b.n	b4f64 <_ZN6StringaSERKS_+0x14>

000b4f6e <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b4f6e:	b510      	push	{r4, lr}
    buffer = nullptr;
   b4f70:	2300      	movs	r3, #0
String::String(const String &value)
   b4f72:	4604      	mov	r4, r0
    capacity = 0;
   b4f74:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b4f78:	6083      	str	r3, [r0, #8]
    flags = 0;
   b4f7a:	7303      	strb	r3, [r0, #12]
    *this = value;
   b4f7c:	f7ff ffe8 	bl	b4f50 <_ZN6StringaSERKS_>
}
   b4f80:	4620      	mov	r0, r4
   b4f82:	bd10      	pop	{r4, pc}

000b4f84 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4f84:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4f86:	6843      	ldr	r3, [r0, #4]
   b4f88:	3b01      	subs	r3, #1
    {
   b4f8a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4f8c:	6043      	str	r3, [r0, #4]
   b4f8e:	b963      	cbnz	r3, b4faa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4f90:	6803      	ldr	r3, [r0, #0]
   b4f92:	689b      	ldr	r3, [r3, #8]
   b4f94:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4f96:	68a3      	ldr	r3, [r4, #8]
   b4f98:	3b01      	subs	r3, #1
   b4f9a:	60a3      	str	r3, [r4, #8]
   b4f9c:	b92b      	cbnz	r3, b4faa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4f9e:	6823      	ldr	r3, [r4, #0]
   b4fa0:	4620      	mov	r0, r4
   b4fa2:	68db      	ldr	r3, [r3, #12]
    }
   b4fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4fa8:	4718      	bx	r3
    }
   b4faa:	bd10      	pop	{r4, pc}

000b4fac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4fac:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4fae:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4fb2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4fb4:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b4fb8:	42ae      	cmp	r6, r5
   b4fba:	d004      	beq.n	b4fc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b4fbc:	4628      	mov	r0, r5
   b4fbe:	f7ff ff53 	bl	b4e68 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b4fc2:	3510      	adds	r5, #16
   b4fc4:	e7f8      	b.n	b4fb8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b4fc6:	6820      	ldr	r0, [r4, #0]
   b4fc8:	f7ff feac 	bl	b4d24 <free>
    AllocatorT::free(data_);
}
   b4fcc:	4620      	mov	r0, r4
   b4fce:	bd70      	pop	{r4, r5, r6, pc}

000b4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4fd0:	b510      	push	{r4, lr}
   b4fd2:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b4fd4:	6800      	ldr	r0, [r0, #0]
   b4fd6:	b108      	cbz	r0, b4fdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b4fd8:	f7ff ffd4 	bl	b4f84 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b4fdc:	4620      	mov	r0, r4
   b4fde:	bd10      	pop	{r4, pc}

000b4fe0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4fe0:	b513      	push	{r0, r1, r4, lr}
   b4fe2:	460b      	mov	r3, r1
   b4fe4:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4fe6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4fea:	466c      	mov	r4, sp
   b4fec:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4ff0:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4ff4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4ff8:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4ffc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5000:	b002      	add	sp, #8
   b5002:	bd10      	pop	{r4, pc}

000b5004 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5004:	4802      	ldr	r0, [pc, #8]	; (b5010 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5006:	2300      	movs	r3, #0
   b5008:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b500a:	f7ff bc9f 	b.w	b494c <os_mutex_recursive_create>
   b500e:	bf00      	nop
   b5010:	2003e69c 	.word	0x2003e69c

000b5014 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5016:	4606      	mov	r6, r0
   b5018:	460d      	mov	r5, r1
  size_t n = 0;
   b501a:	188f      	adds	r7, r1, r2
   b501c:	2400      	movs	r4, #0
  while (size--) {
   b501e:	42bd      	cmp	r5, r7
   b5020:	d00c      	beq.n	b503c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5022:	6833      	ldr	r3, [r6, #0]
   b5024:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5028:	689b      	ldr	r3, [r3, #8]
   b502a:	4630      	mov	r0, r6
   b502c:	4798      	blx	r3
     if (chunk>=0)
   b502e:	1e03      	subs	r3, r0, #0
   b5030:	db01      	blt.n	b5036 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5032:	441c      	add	r4, r3
  while (size--) {
   b5034:	e7f3      	b.n	b501e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5036:	2c00      	cmp	r4, #0
   b5038:	bf08      	it	eq
   b503a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b503c:	4620      	mov	r0, r4
   b503e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5040 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5040:	b513      	push	{r0, r1, r4, lr}
   b5042:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5044:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5046:	b159      	cbz	r1, b5060 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5048:	9101      	str	r1, [sp, #4]
   b504a:	f002 fdda 	bl	b7c02 <strlen>
   b504e:	6823      	ldr	r3, [r4, #0]
   b5050:	9901      	ldr	r1, [sp, #4]
   b5052:	68db      	ldr	r3, [r3, #12]
   b5054:	4602      	mov	r2, r0
   b5056:	4620      	mov	r0, r4
    }
   b5058:	b002      	add	sp, #8
   b505a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b505e:	4718      	bx	r3
    }
   b5060:	b002      	add	sp, #8
   b5062:	bd10      	pop	{r4, pc}

000b5064 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5064:	6803      	ldr	r3, [r0, #0]
   b5066:	689b      	ldr	r3, [r3, #8]
   b5068:	4718      	bx	r3

000b506a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b506a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b506c:	210d      	movs	r1, #13
{
   b506e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5070:	f7ff fff8 	bl	b5064 <_ZN5Print5printEc>
  n += print('\n');
   b5074:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5076:	4604      	mov	r4, r0
  n += print('\n');
   b5078:	4628      	mov	r0, r5
   b507a:	f7ff fff3 	bl	b5064 <_ZN5Print5printEc>
  return n;
}
   b507e:	4420      	add	r0, r4
   b5080:	bd38      	pop	{r3, r4, r5, pc}

000b5082 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5082:	b530      	push	{r4, r5, lr}
   b5084:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5086:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5088:	2a01      	cmp	r2, #1
  *str = '\0';
   b508a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b508e:	bf98      	it	ls
   b5090:	220a      	movls	r2, #10
   b5092:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5094:	460d      	mov	r5, r1
   b5096:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b509a:	fb01 5312 	mls	r3, r1, r2, r5
   b509e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b50a2:	2b09      	cmp	r3, #9
   b50a4:	bf94      	ite	ls
   b50a6:	3330      	addls	r3, #48	; 0x30
   b50a8:	3337      	addhi	r3, #55	; 0x37
   b50aa:	b2db      	uxtb	r3, r3
  } while(n);
   b50ac:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b50ae:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b50b2:	d9ef      	bls.n	b5094 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b50b4:	4621      	mov	r1, r4
   b50b6:	f7ff ffc3 	bl	b5040 <_ZN5Print5writeEPKc>
}
   b50ba:	b00b      	add	sp, #44	; 0x2c
   b50bc:	bd30      	pop	{r4, r5, pc}

000b50be <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b50be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b50c2:	b086      	sub	sp, #24
   b50c4:	af00      	add	r7, sp, #0
   b50c6:	4605      	mov	r5, r0
   b50c8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b50ca:	1d38      	adds	r0, r7, #4
   b50cc:	2114      	movs	r1, #20
{
   b50ce:	4614      	mov	r4, r2
    va_copy(args2, args);
   b50d0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b50d2:	f7ff fe3f 	bl	b4d54 <vsnprintf>

    if (n<bufsize)
   b50d6:	2813      	cmp	r0, #19
   b50d8:	d80e      	bhi.n	b50f8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b50da:	1d39      	adds	r1, r7, #4
   b50dc:	4628      	mov	r0, r5
   b50de:	f7ff ffaf 	bl	b5040 <_ZN5Print5writeEPKc>
   b50e2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b50e4:	b11e      	cbz	r6, b50ee <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b50e6:	4628      	mov	r0, r5
   b50e8:	f7ff ffbf 	bl	b506a <_ZN5Print7printlnEv>
   b50ec:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b50ee:	4620      	mov	r0, r4
   b50f0:	3718      	adds	r7, #24
   b50f2:	46bd      	mov	sp, r7
   b50f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b50f8:	f100 0308 	add.w	r3, r0, #8
   b50fc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5100:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5102:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5106:	4622      	mov	r2, r4
   b5108:	1c41      	adds	r1, r0, #1
   b510a:	683b      	ldr	r3, [r7, #0]
   b510c:	4668      	mov	r0, sp
   b510e:	f7ff fe21 	bl	b4d54 <vsnprintf>
  return write(str);
   b5112:	4669      	mov	r1, sp
   b5114:	4628      	mov	r0, r5
   b5116:	f7ff ff93 	bl	b5040 <_ZN5Print5writeEPKc>
   b511a:	4604      	mov	r4, r0
   b511c:	46c5      	mov	sp, r8
   b511e:	e7e1      	b.n	b50e4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5120 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b5120:	6880      	ldr	r0, [r0, #8]
   b5122:	6803      	ldr	r3, [r0, #0]
   b5124:	68db      	ldr	r3, [r3, #12]
   b5126:	4718      	bx	r3

000b5128 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b5128:	4770      	bx	lr

000b512a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b512a:	4608      	mov	r0, r1
   b512c:	b111      	cbz	r1, b5134 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b512e:	680b      	ldr	r3, [r1, #0]
   b5130:	685b      	ldr	r3, [r3, #4]
   b5132:	4718      	bx	r3
}
   b5134:	4770      	bx	lr

000b5136 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b5136:	4770      	bx	lr

000b5138 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5138:	4770      	bx	lr

000b513a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b513a:	4770      	bx	lr

000b513c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b513c:	4770      	bx	lr

000b513e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b513e:	b538      	push	{r3, r4, r5, lr}
   b5140:	4604      	mov	r4, r0
   b5142:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5144:	6800      	ldr	r0, [r0, #0]
   b5146:	212e      	movs	r1, #46	; 0x2e
   b5148:	f002 fd21 	bl	b7b8e <strchrnul>
    size = s - category;
   b514c:	6823      	ldr	r3, [r4, #0]
   b514e:	1ac3      	subs	r3, r0, r3
   b5150:	602b      	str	r3, [r5, #0]
    if (size) {
   b5152:	b123      	cbz	r3, b515e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b5154:	7803      	ldrb	r3, [r0, #0]
   b5156:	b103      	cbz	r3, b515a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b5158:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b515a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b515c:	6020      	str	r0, [r4, #0]
}
   b515e:	4618      	mov	r0, r3
   b5160:	bd38      	pop	{r3, r4, r5, pc}

000b5162 <_ZN5spark16JSONStreamWriterD0Ev>:
   b5162:	b510      	push	{r4, lr}
   b5164:	210c      	movs	r1, #12
   b5166:	4604      	mov	r4, r0
   b5168:	f7fe ff97 	bl	b409a <_ZdlPvj>
   b516c:	4620      	mov	r0, r4
   b516e:	bd10      	pop	{r4, pc}

000b5170 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b5170:	b510      	push	{r4, lr}
   b5172:	2104      	movs	r1, #4
   b5174:	4604      	mov	r4, r0
   b5176:	f7fe ff90 	bl	b409a <_ZdlPvj>
   b517a:	4620      	mov	r0, r4
   b517c:	bd10      	pop	{r4, pc}

000b517e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b517e:	b510      	push	{r4, lr}
   b5180:	2104      	movs	r1, #4
   b5182:	4604      	mov	r4, r0
   b5184:	f7fe ff89 	bl	b409a <_ZdlPvj>
   b5188:	4620      	mov	r0, r4
   b518a:	bd10      	pop	{r4, pc}

000b518c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b518c:	f7ff bbee 	b.w	b496c <os_mutex_recursive_lock>

000b5190 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b5190:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b5192:	f002 fd06 	bl	b7ba2 <strcmp>
}
   b5196:	fab0 f080 	clz	r0, r0
   b519a:	0940      	lsrs	r0, r0, #5
   b519c:	bd08      	pop	{r3, pc}

000b519e <__tcf_1>:
   b519e:	4770      	bx	lr

000b51a0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b51a0:	b510      	push	{r4, lr}
   b51a2:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b51a4:	f001 fb60 	bl	b6868 <_Z16_fetch_usbserialv>
   b51a8:	4284      	cmp	r4, r0
   b51aa:	d010      	beq.n	b51ce <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b51ac:	f001 ffec 	bl	b7188 <_Z22__fetch_global_Serial1v>
   b51b0:	4284      	cmp	r4, r0
   b51b2:	d105      	bne.n	b51c0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b51b4:	f001 ffe8 	bl	b7188 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b51b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b51bc:	f001 bbff 	b.w	b69be <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b51c0:	b12c      	cbz	r4, b51ce <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b51c2:	6823      	ldr	r3, [r4, #0]
   b51c4:	4620      	mov	r0, r4
   b51c6:	685b      	ldr	r3, [r3, #4]
}
   b51c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b51cc:	4718      	bx	r3
   b51ce:	bd10      	pop	{r4, pc}

000b51d0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b51d0:	680b      	ldr	r3, [r1, #0]
   b51d2:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b51d4:	684b      	ldr	r3, [r1, #4]
   b51d6:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b51d8:	b113      	cbz	r3, b51e0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b51da:	685a      	ldr	r2, [r3, #4]
   b51dc:	3201      	adds	r2, #1
   b51de:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b51e0:	4770      	bx	lr

000b51e2 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b51e2:	b513      	push	{r0, r1, r4, lr}
   b51e4:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b51e6:	4608      	mov	r0, r1
   b51e8:	9101      	str	r1, [sp, #4]
   b51ea:	f002 fd0a 	bl	b7c02 <strlen>
   b51ee:	9901      	ldr	r1, [sp, #4]
   b51f0:	4602      	mov	r2, r0
   b51f2:	4620      	mov	r0, r4
}
   b51f4:	b002      	add	sp, #8
   b51f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b51fa:	f001 bef9 	b.w	b6ff0 <_ZN5spark10JSONWriter5valueEPKcj>

000b51fe <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b51fe:	b513      	push	{r0, r1, r4, lr}
   b5200:	4604      	mov	r4, r0
    write(str, strlen(str));
   b5202:	4608      	mov	r0, r1
   b5204:	9101      	str	r1, [sp, #4]
   b5206:	f002 fcfc 	bl	b7c02 <strlen>
   b520a:	6823      	ldr	r3, [r4, #0]
   b520c:	9901      	ldr	r1, [sp, #4]
   b520e:	68db      	ldr	r3, [r3, #12]
   b5210:	4602      	mov	r2, r0
   b5212:	4620      	mov	r0, r4
}
   b5214:	b002      	add	sp, #8
   b5216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b521a:	4718      	bx	r3

000b521c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b521c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b521e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b5220:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5224:	68db      	ldr	r3, [r3, #12]
   b5226:	2201      	movs	r2, #1
   b5228:	f10d 0107 	add.w	r1, sp, #7
   b522c:	4798      	blx	r3
}
   b522e:	b003      	add	sp, #12
   b5230:	f85d fb04 	ldr.w	pc, [sp], #4

000b5234 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5234:	b40e      	push	{r1, r2, r3}
   b5236:	b503      	push	{r0, r1, lr}
   b5238:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b523a:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b523c:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b5240:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b5242:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b5244:	f7ff ff3b 	bl	b50be <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b5248:	b002      	add	sp, #8
   b524a:	f85d eb04 	ldr.w	lr, [sp], #4
   b524e:	b003      	add	sp, #12
   b5250:	4770      	bx	lr

000b5252 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b5252:	680a      	ldr	r2, [r1, #0]
   b5254:	6002      	str	r2, [r0, #0]
   b5256:	684a      	ldr	r2, [r1, #4]
   b5258:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b525a:	2200      	movs	r2, #0
   b525c:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5260:	b510      	push	{r4, lr}
   b5262:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5264:	688c      	ldr	r4, [r1, #8]
   b5266:	6084      	str	r4, [r0, #8]
   b5268:	68cc      	ldr	r4, [r1, #12]
   b526a:	60c4      	str	r4, [r0, #12]
   b526c:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b526e:	608a      	str	r2, [r1, #8]
   b5270:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5272:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5274:	610a      	str	r2, [r1, #16]
   b5276:	bd10      	pop	{r4, pc}

000b5278 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b527c:	e9d0 8400 	ldrd	r8, r4, [r0]
   b5280:	f04f 0a14 	mov.w	sl, #20
   b5284:	9300      	str	r3, [sp, #0]
   b5286:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b528a:	4b18      	ldr	r3, [pc, #96]	; (b52ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b528c:	10a4      	asrs	r4, r4, #2
   b528e:	4617      	mov	r7, r2
   b5290:	435c      	muls	r4, r3
   b5292:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b5294:	2c00      	cmp	r4, #0
   b5296:	dd21      	ble.n	b52dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b5298:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b529a:	fb0a f006 	mul.w	r0, sl, r6
   b529e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b52a2:	463a      	mov	r2, r7
   b52a4:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b52a8:	5828      	ldr	r0, [r5, r0]
   b52aa:	9101      	str	r1, [sp, #4]
   b52ac:	455f      	cmp	r7, fp
   b52ae:	bf28      	it	cs
   b52b0:	465a      	movcs	r2, fp
   b52b2:	f002 fcae 	bl	b7c12 <strncmp>
                if (cmp == 0) {
   b52b6:	2800      	cmp	r0, #0
   b52b8:	9901      	ldr	r1, [sp, #4]
   b52ba:	f04f 0301 	mov.w	r3, #1
   b52be:	d10b      	bne.n	b52d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b52c0:	455f      	cmp	r7, fp
   b52c2:	d103      	bne.n	b52cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b52c4:	9a00      	ldr	r2, [sp, #0]
   b52c6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b52c8:	4634      	mov	r4, r6
   b52ca:	e7e3      	b.n	b5294 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b52cc:	d9fc      	bls.n	b52c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b52ce:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b52d0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b52d4:	3e01      	subs	r6, #1
   b52d6:	e7f7      	b.n	b52c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b52d8:	dbf9      	blt.n	b52ce <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b52da:	e7f5      	b.n	b52c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b52dc:	eba5 0508 	sub.w	r5, r5, r8
}
   b52e0:	4802      	ldr	r0, [pc, #8]	; (b52ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b52e2:	10ad      	asrs	r5, r5, #2
   b52e4:	4368      	muls	r0, r5
   b52e6:	b003      	add	sp, #12
   b52e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b52ec:	cccccccd 	.word	0xcccccccd

000b52f0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b52f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b52f2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b52f4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b52f6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b52f8:	b303      	cbz	r3, b533c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b52fa:	b1f9      	cbz	r1, b533c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b52fc:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b52fe:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b5302:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b5304:	a903      	add	r1, sp, #12
   b5306:	a801      	add	r0, sp, #4
   b5308:	f7ff ff19 	bl	b513e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b530c:	4601      	mov	r1, r0
   b530e:	b1a8      	cbz	r0, b533c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b5310:	f10d 030b 	add.w	r3, sp, #11
   b5314:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b5316:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b531a:	4620      	mov	r0, r4
   b531c:	f7ff ffac 	bl	b5278 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b5320:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b5324:	b153      	cbz	r3, b533c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b5326:	6823      	ldr	r3, [r4, #0]
   b5328:	2414      	movs	r4, #20
   b532a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b532e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b5330:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b5334:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b5336:	bfa8      	it	ge
   b5338:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b533a:	e7e3      	b.n	b5304 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b533c:	4628      	mov	r0, r5
   b533e:	b004      	add	sp, #16
   b5340:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5344 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b5344:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b5346:	4c09      	ldr	r4, [pc, #36]	; (b536c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b5348:	7823      	ldrb	r3, [r4, #0]
   b534a:	f3bf 8f5b 	dmb	ish
   b534e:	07db      	lsls	r3, r3, #31
   b5350:	d409      	bmi.n	b5366 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b5352:	4620      	mov	r0, r4
   b5354:	f7fe feb0 	bl	b40b8 <__cxa_guard_acquire>
   b5358:	b128      	cbz	r0, b5366 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b535a:	4620      	mov	r0, r4
   b535c:	f7fe feb1 	bl	b40c2 <__cxa_guard_release>
   b5360:	4803      	ldr	r0, [pc, #12]	; (b5370 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b5362:	f002 fb9b 	bl	b7a9c <atexit>
}
   b5366:	4803      	ldr	r0, [pc, #12]	; (b5374 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b5368:	bd10      	pop	{r4, pc}
   b536a:	bf00      	nop
   b536c:	2003e6a4 	.word	0x2003e6a4
   b5370:	000b5137 	.word	0x000b5137
   b5374:	2003e44c 	.word	0x2003e44c

000b5378 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b5378:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b537a:	4c09      	ldr	r4, [pc, #36]	; (b53a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b537c:	7823      	ldrb	r3, [r4, #0]
   b537e:	f3bf 8f5b 	dmb	ish
   b5382:	07db      	lsls	r3, r3, #31
   b5384:	d409      	bmi.n	b539a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5386:	4620      	mov	r0, r4
   b5388:	f7fe fe96 	bl	b40b8 <__cxa_guard_acquire>
   b538c:	b128      	cbz	r0, b539a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b538e:	4620      	mov	r0, r4
   b5390:	f7fe fe97 	bl	b40c2 <__cxa_guard_release>
   b5394:	4803      	ldr	r0, [pc, #12]	; (b53a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b5396:	f002 fb81 	bl	b7a9c <atexit>
    return &factory;
}
   b539a:	4803      	ldr	r0, [pc, #12]	; (b53a8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b539c:	bd10      	pop	{r4, pc}
   b539e:	bf00      	nop
   b53a0:	2003e6a8 	.word	0x2003e6a8
   b53a4:	000b519f 	.word	0x000b519f
   b53a8:	2003e450 	.word	0x2003e450

000b53ac <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b53ac:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b53ae:	2500      	movs	r5, #0
   b53b0:	4604      	mov	r4, r0
   b53b2:	e9c0 5500 	strd	r5, r5, [r0]
   b53b6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b53ba:	6085      	str	r5, [r0, #8]
   b53bc:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b53be:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b53c2:	f7ff fac3 	bl	b494c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b53c6:	f7ff ffbd 	bl	b5344 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b53ca:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b53cc:	f7ff ffd4 	bl	b5378 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b53d0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b53d2:	6220      	str	r0, [r4, #32]
}
   b53d4:	4620      	mov	r0, r4
   b53d6:	bd38      	pop	{r3, r4, r5, pc}

000b53d8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b53d8:	b510      	push	{r4, lr}
    static LogManager mgr;
   b53da:	4c0a      	ldr	r4, [pc, #40]	; (b5404 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b53dc:	7823      	ldrb	r3, [r4, #0]
   b53de:	f3bf 8f5b 	dmb	ish
   b53e2:	07db      	lsls	r3, r3, #31
   b53e4:	d40c      	bmi.n	b5400 <_ZN5spark10LogManager8instanceEv+0x28>
   b53e6:	4620      	mov	r0, r4
   b53e8:	f7fe fe66 	bl	b40b8 <__cxa_guard_acquire>
   b53ec:	b140      	cbz	r0, b5400 <_ZN5spark10LogManager8instanceEv+0x28>
   b53ee:	4806      	ldr	r0, [pc, #24]	; (b5408 <_ZN5spark10LogManager8instanceEv+0x30>)
   b53f0:	f7ff ffdc 	bl	b53ac <_ZN5spark10LogManagerC1Ev>
   b53f4:	4620      	mov	r0, r4
   b53f6:	f7fe fe64 	bl	b40c2 <__cxa_guard_release>
   b53fa:	4804      	ldr	r0, [pc, #16]	; (b540c <_ZN5spark10LogManager8instanceEv+0x34>)
   b53fc:	f002 fb4e 	bl	b7a9c <atexit>
    return &mgr;
}
   b5400:	4801      	ldr	r0, [pc, #4]	; (b5408 <_ZN5spark10LogManager8instanceEv+0x30>)
   b5402:	bd10      	pop	{r4, pc}
   b5404:	2003e6a0 	.word	0x2003e6a0
   b5408:	2003e6b0 	.word	0x2003e6b0
   b540c:	000b592d 	.word	0x000b592d

000b5410 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b5410:	4a02      	ldr	r2, [pc, #8]	; (b541c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b5412:	4903      	ldr	r1, [pc, #12]	; (b5420 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b5414:	4803      	ldr	r0, [pc, #12]	; (b5424 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b5416:	2300      	movs	r3, #0
   b5418:	f7ff bbb0 	b.w	b4b7c <log_set_callbacks>
   b541c:	000b5711 	.word	0x000b5711
   b5420:	000b569d 	.word	0x000b569d
   b5424:	000b561d 	.word	0x000b561d

000b5428 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b5428:	2300      	movs	r3, #0
   b542a:	461a      	mov	r2, r3
   b542c:	4619      	mov	r1, r3
   b542e:	4618      	mov	r0, r3
   b5430:	f7ff bba4 	b.w	b4b7c <log_set_callbacks>

000b5434 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5434:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b5436:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5438:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b543a:	4668      	mov	r0, sp
   b543c:	f7ff fec8 	bl	b51d0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b5440:	466a      	mov	r2, sp
   b5442:	4629      	mov	r1, r5
   b5444:	4620      	mov	r0, r4
   b5446:	f001 fcf3 	bl	b6e30 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b544a:	a801      	add	r0, sp, #4
   b544c:	f7ff fdc0 	bl	b4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5450:	4620      	mov	r0, r4
   b5452:	b003      	add	sp, #12
   b5454:	bd30      	pop	{r4, r5, pc}

000b5456 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b5456:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b5458:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b545a:	4604      	mov	r4, r0
   b545c:	4668      	mov	r0, sp
   b545e:	f7ff feb7 	bl	b51d0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b5462:	466a      	mov	r2, sp
   b5464:	4629      	mov	r1, r5
   b5466:	4620      	mov	r0, r4
   b5468:	f001 fcbe 	bl	b6de8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b546c:	a801      	add	r0, sp, #4
   b546e:	f7ff fdaf 	bl	b4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5472:	4620      	mov	r0, r4
   b5474:	b003      	add	sp, #12
   b5476:	bd30      	pop	{r4, r5, pc}

000b5478 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5478:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b547a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b547c:	4604      	mov	r4, r0
   b547e:	4668      	mov	r0, sp
   b5480:	f7ff fea6 	bl	b51d0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b5484:	466a      	mov	r2, sp
   b5486:	4629      	mov	r1, r5
   b5488:	4620      	mov	r0, r4
   b548a:	f001 fc56 	bl	b6d3a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b548e:	a801      	add	r0, sp, #4
   b5490:	f7ff fd9e 	bl	b4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5494:	4620      	mov	r0, r4
   b5496:	b003      	add	sp, #12
   b5498:	bd30      	pop	{r4, r5, pc}
	...

000b549c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b549c:	b570      	push	{r4, r5, r6, lr}
   b549e:	b08a      	sub	sp, #40	; 0x28
   b54a0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b54a2:	4601      	mov	r1, r0
   b54a4:	a804      	add	r0, sp, #16
   b54a6:	f7ff ffc5 	bl	b5434 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b54aa:	4e14      	ldr	r6, [pc, #80]	; (b54fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b54ac:	a804      	add	r0, sp, #16
   b54ae:	f001 fcd7 	bl	b6e60 <_ZN5spark18JSONObjectIterator4nextEv>
   b54b2:	b1e8      	cbz	r0, b54f0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b54b4:	a904      	add	r1, sp, #16
   b54b6:	4668      	mov	r0, sp
   b54b8:	f7ff ffcd 	bl	b5456 <_ZNK5spark18JSONObjectIterator4nameEv>
   b54bc:	9802      	ldr	r0, [sp, #8]
   b54be:	4631      	mov	r1, r6
   b54c0:	f7ff fe66 	bl	b5190 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b54c4:	4604      	mov	r4, r0
   b54c6:	b110      	cbz	r0, b54ce <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b54c8:	1e2c      	subs	r4, r5, #0
   b54ca:	bf18      	it	ne
   b54cc:	2401      	movne	r4, #1
   b54ce:	a801      	add	r0, sp, #4
   b54d0:	f7ff fd7e 	bl	b4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b54d4:	2c00      	cmp	r4, #0
   b54d6:	d0e9      	beq.n	b54ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b54d8:	a904      	add	r1, sp, #16
   b54da:	4668      	mov	r0, sp
   b54dc:	f7ff ffcc 	bl	b5478 <_ZNK5spark18JSONObjectIterator5valueEv>
   b54e0:	4668      	mov	r0, sp
   b54e2:	f001 fc60 	bl	b6da6 <_ZNK5spark9JSONValue5toIntEv>
   b54e6:	6028      	str	r0, [r5, #0]
   b54e8:	a801      	add	r0, sp, #4
   b54ea:	f7ff fd71 	bl	b4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b54ee:	e7dd      	b.n	b54ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b54f0:	a805      	add	r0, sp, #20
   b54f2:	f7ff fd6d 	bl	b4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b54f6:	b00a      	add	sp, #40	; 0x28
   b54f8:	bd70      	pop	{r4, r5, r6, pc}
   b54fa:	bf00      	nop
   b54fc:	000b802c 	.word	0x000b802c

000b5500 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5500:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5502:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b5504:	4620      	mov	r0, r4
   b5506:	4913      	ldr	r1, [pc, #76]	; (b5554 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5508:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b550a:	f002 fb4a 	bl	b7ba2 <strcmp>
   b550e:	b950      	cbnz	r0, b5526 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b5510:	f001 f9aa 	bl	b6868 <_Z16_fetch_usbserialv>
   b5514:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5518:	f001 f996 	bl	b6848 <_ZN9USBSerial5beginEl>
}
   b551c:	b003      	add	sp, #12
   b551e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b5522:	f001 b9a1 	b.w	b6868 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b5526:	490c      	ldr	r1, [pc, #48]	; (b5558 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b5528:	4620      	mov	r0, r4
   b552a:	f002 fb3a 	bl	b7ba2 <strcmp>
   b552e:	b978      	cbnz	r0, b5550 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b5530:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b5534:	a901      	add	r1, sp, #4
   b5536:	4628      	mov	r0, r5
        int baud = 9600;
   b5538:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b553a:	f7ff ffaf 	bl	b549c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b553e:	f001 fe23 	bl	b7188 <_Z22__fetch_global_Serial1v>
   b5542:	9901      	ldr	r1, [sp, #4]
   b5544:	f001 fa38 	bl	b69b8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b5548:	f001 fe1e 	bl	b7188 <_Z22__fetch_global_Serial1v>
}
   b554c:	b003      	add	sp, #12
   b554e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b5550:	2000      	movs	r0, #0
   b5552:	e7fb      	b.n	b554c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b5554:	000b8031 	.word	0x000b8031
   b5558:	000b8038 	.word	0x000b8038

000b555c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b555c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b555e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5562:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5564:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5566:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b556a:	42ae      	cmp	r6, r5
   b556c:	d005      	beq.n	b557a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b556e:	f105 0008 	add.w	r0, r5, #8
   b5572:	f7ff fff3 	bl	b555c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5576:	3514      	adds	r5, #20
   b5578:	e7f7      	b.n	b556a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b557a:	6820      	ldr	r0, [r4, #0]
   b557c:	f7ff fbd2 	bl	b4d24 <free>
}
   b5580:	4620      	mov	r0, r4
   b5582:	bd70      	pop	{r4, r5, r6, pc}

000b5584 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b5584:	b510      	push	{r4, lr}
   b5586:	4604      	mov	r4, r0
   b5588:	300c      	adds	r0, #12
   b558a:	f7ff ffe7 	bl	b555c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b558e:	4620      	mov	r0, r4
   b5590:	f7ff fd0c 	bl	b4fac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5594:	4620      	mov	r0, r4
   b5596:	bd10      	pop	{r4, pc}

000b5598 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b5598:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b559a:	4b04      	ldr	r3, [pc, #16]	; (b55ac <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b559c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b559e:	f840 3b04 	str.w	r3, [r0], #4
   b55a2:	f7ff ffef 	bl	b5584 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b55a6:	4620      	mov	r0, r4
   b55a8:	bd10      	pop	{r4, pc}
   b55aa:	bf00      	nop
   b55ac:	000b7fa4 	.word	0x000b7fa4

000b55b0 <_ZN5spark16StreamLogHandlerD0Ev>:
   b55b0:	b510      	push	{r4, lr}
   b55b2:	4604      	mov	r4, r0
   b55b4:	f7ff fff0 	bl	b5598 <_ZN5spark16StreamLogHandlerD1Ev>
   b55b8:	4620      	mov	r0, r4
   b55ba:	2124      	movs	r1, #36	; 0x24
   b55bc:	f7fe fd6d 	bl	b409a <_ZdlPvj>
   b55c0:	4620      	mov	r0, r4
   b55c2:	bd10      	pop	{r4, pc}

000b55c4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b55c4:	b510      	push	{r4, lr}
   b55c6:	4b03      	ldr	r3, [pc, #12]	; (b55d4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b55c8:	6003      	str	r3, [r0, #0]
   b55ca:	4604      	mov	r4, r0
   b55cc:	f7ff ffe4 	bl	b5598 <_ZN5spark16StreamLogHandlerD1Ev>
   b55d0:	4620      	mov	r0, r4
   b55d2:	bd10      	pop	{r4, pc}
   b55d4:	000b80d8 	.word	0x000b80d8

000b55d8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b55d8:	b510      	push	{r4, lr}
   b55da:	4604      	mov	r4, r0
   b55dc:	f7ff fff2 	bl	b55c4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b55e0:	4620      	mov	r0, r4
   b55e2:	2124      	movs	r1, #36	; 0x24
   b55e4:	f7fe fd59 	bl	b409a <_ZdlPvj>
   b55e8:	4620      	mov	r0, r4
   b55ea:	bd10      	pop	{r4, pc}

000b55ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b55ec:	2200      	movs	r2, #0
   b55ee:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b55f2:	b510      	push	{r4, lr}
        capacity_(0) {
   b55f4:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b55f6:	680c      	ldr	r4, [r1, #0]
   b55f8:	6004      	str	r4, [r0, #0]
   b55fa:	684c      	ldr	r4, [r1, #4]
   b55fc:	6044      	str	r4, [r0, #4]
   b55fe:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5600:	600a      	str	r2, [r1, #0]
   b5602:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5604:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5606:	608a      	str	r2, [r1, #8]
}
   b5608:	bd10      	pop	{r4, pc}

000b560a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b560a:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b560c:	6803      	ldr	r3, [r0, #0]
   b560e:	4604      	mov	r4, r0
   b5610:	6818      	ldr	r0, [r3, #0]
   b5612:	f7ff f9b3 	bl	b497c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b5616:	4620      	mov	r0, r4
   b5618:	bd10      	pop	{r4, pc}
	...

000b561c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b561c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5620:	b087      	sub	sp, #28
   b5622:	4680      	mov	r8, r0
   b5624:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b5626:	4b1c      	ldr	r3, [pc, #112]	; (b5698 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b5628:	685b      	ldr	r3, [r3, #4]
   b562a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b562e:	4689      	mov	r9, r1
   b5630:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b5632:	b96b      	cbnz	r3, b5650 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b5634:	f7ff fed0 	bl	b53d8 <_ZN5spark10LogManager8instanceEv>
   b5638:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b563a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b563e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5640:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b5642:	f7ff fda3 	bl	b518c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b5646:	7b23      	ldrb	r3, [r4, #12]
   b5648:	b12b      	cbz	r3, b5656 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b564a:	a805      	add	r0, sp, #20
   b564c:	f7ff ffdd 	bl	b560a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b5650:	b007      	add	sp, #28
   b5652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b5656:	2301      	movs	r3, #1
   b5658:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b565a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b565e:	fa5f f989 	uxtb.w	r9, r9
   b5662:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5666:	45aa      	cmp	sl, r5
   b5668:	d012      	beq.n	b5690 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b566a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b566e:	4631      	mov	r1, r6
   b5670:	1d38      	adds	r0, r7, #4
   b5672:	f7ff fe3d 	bl	b52f0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5676:	4581      	cmp	r9, r0
   b5678:	d3f5      	bcc.n	b5666 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b567a:	683b      	ldr	r3, [r7, #0]
   b567c:	9a03      	ldr	r2, [sp, #12]
   b567e:	9200      	str	r2, [sp, #0]
   b5680:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b5684:	464a      	mov	r2, r9
   b5686:	4633      	mov	r3, r6
   b5688:	4641      	mov	r1, r8
   b568a:	4638      	mov	r0, r7
   b568c:	47d8      	blx	fp
   b568e:	e7ea      	b.n	b5666 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b5690:	2300      	movs	r3, #0
   b5692:	7323      	strb	r3, [r4, #12]
   b5694:	e7d9      	b.n	b564a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b5696:	bf00      	nop
   b5698:	e000ed00 	.word	0xe000ed00

000b569c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b569c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b56a0:	469b      	mov	fp, r3
   b56a2:	4b1a      	ldr	r3, [pc, #104]	; (b570c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b56a4:	685b      	ldr	r3, [r3, #4]
   b56a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b56aa:	4680      	mov	r8, r0
   b56ac:	4689      	mov	r9, r1
   b56ae:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b56b0:	b96b      	cbnz	r3, b56ce <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b56b2:	f7ff fe91 	bl	b53d8 <_ZN5spark10LogManager8instanceEv>
   b56b6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b56b8:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b56bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b56be:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b56c0:	f7ff fd64 	bl	b518c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b56c4:	7b23      	ldrb	r3, [r4, #12]
   b56c6:	b12b      	cbz	r3, b56d4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b56c8:	a801      	add	r0, sp, #4
   b56ca:	f7ff ff9e 	bl	b560a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b56ce:	b003      	add	sp, #12
   b56d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b56d4:	2301      	movs	r3, #1
   b56d6:	7323      	strb	r3, [r4, #12]
   b56d8:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b56dc:	b2f6      	uxtb	r6, r6
   b56de:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b56e2:	4555      	cmp	r5, sl
   b56e4:	d00e      	beq.n	b5704 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b56e6:	f855 7b04 	ldr.w	r7, [r5], #4
   b56ea:	4659      	mov	r1, fp
   b56ec:	1d38      	adds	r0, r7, #4
   b56ee:	f7ff fdff 	bl	b52f0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b56f2:	4286      	cmp	r6, r0
   b56f4:	d3f5      	bcc.n	b56e2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b56f6:	683b      	ldr	r3, [r7, #0]
   b56f8:	464a      	mov	r2, r9
   b56fa:	68db      	ldr	r3, [r3, #12]
   b56fc:	4641      	mov	r1, r8
   b56fe:	4638      	mov	r0, r7
   b5700:	4798      	blx	r3
   b5702:	e7ee      	b.n	b56e2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b5704:	2300      	movs	r3, #0
   b5706:	7323      	strb	r3, [r4, #12]
   b5708:	e7de      	b.n	b56c8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b570a:	bf00      	nop
   b570c:	e000ed00 	.word	0xe000ed00

000b5710 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b5710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5714:	4b16      	ldr	r3, [pc, #88]	; (b5770 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b5716:	685b      	ldr	r3, [r3, #4]
   b5718:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b571c:	4605      	mov	r5, r0
   b571e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b5720:	bb1b      	cbnz	r3, b576a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b5722:	f7ff fe59 	bl	b53d8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b5726:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b572a:	4604      	mov	r4, r0
   b572c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b572e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5730:	f7ff fd2c 	bl	b518c <_ZN14RecursiveMutex4lockEv.isra.0>
   b5734:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b5738:	2446      	movs	r4, #70	; 0x46
   b573a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b573e:	45b0      	cmp	r8, r6
   b5740:	d109      	bne.n	b5756 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b5742:	a801      	add	r0, sp, #4
   b5744:	f7ff ff61 	bl	b560a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b5748:	42a5      	cmp	r5, r4
   b574a:	bfb4      	ite	lt
   b574c:	2000      	movlt	r0, #0
   b574e:	2001      	movge	r0, #1
}
   b5750:	b002      	add	sp, #8
   b5752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b5756:	f856 0b04 	ldr.w	r0, [r6], #4
   b575a:	4639      	mov	r1, r7
   b575c:	3004      	adds	r0, #4
   b575e:	f7ff fdc7 	bl	b52f0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b5762:	4284      	cmp	r4, r0
   b5764:	bfa8      	it	ge
   b5766:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b5768:	e7e9      	b.n	b573e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b576a:	2000      	movs	r0, #0
   b576c:	e7f0      	b.n	b5750 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b576e:	bf00      	nop
   b5770:	e000ed00 	.word	0xe000ed00

000b5774 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5776:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b577a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b577c:	4604      	mov	r4, r0
   b577e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5780:	db0d      	blt.n	b579e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b5782:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b5784:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5786:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5788:	dd04      	ble.n	b5794 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b578a:	00b9      	lsls	r1, r7, #2
   b578c:	f7ff fad2 	bl	b4d34 <realloc>
            if (!d) {
   b5790:	b918      	cbnz	r0, b579a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b5792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b5794:	f7ff fac6 	bl	b4d24 <free>
        T* d = nullptr;
   b5798:	2000      	movs	r0, #0
        data_ = d;
   b579a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b579c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b579e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b57a0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b57a2:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b57a6:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b57a8:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b57ac:	1d08      	adds	r0, r1, #4
   b57ae:	f002 f991 	bl	b7ad4 <memmove>
    new(p) T(std::move(value));
   b57b2:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b57b6:	6863      	ldr	r3, [r4, #4]
   b57b8:	3301      	adds	r3, #1
   b57ba:	6063      	str	r3, [r4, #4]
    return true;
   b57bc:	2001      	movs	r0, #1
   b57be:	e7e8      	b.n	b5792 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b57c0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b57c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b57c2:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b57c6:	4604      	mov	r4, r0
   b57c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b57ca:	9301      	str	r3, [sp, #4]
   b57cc:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b57ce:	f7ff fcdd 	bl	b518c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b57d2:	e9d4 3200 	ldrd	r3, r2, [r4]
   b57d6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b57da:	4293      	cmp	r3, r2
   b57dc:	4619      	mov	r1, r3
   b57de:	d00b      	beq.n	b57f8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b57e0:	6809      	ldr	r1, [r1, #0]
   b57e2:	42a9      	cmp	r1, r5
   b57e4:	f103 0304 	add.w	r3, r3, #4
   b57e8:	d1f7      	bne.n	b57da <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b57ea:	a801      	add	r0, sp, #4
   b57ec:	f7ff ff0d 	bl	b560a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b57f0:	2500      	movs	r5, #0
}
   b57f2:	4628      	mov	r0, r5
   b57f4:	b003      	add	sp, #12
   b57f6:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b57f8:	4629      	mov	r1, r5
   b57fa:	4620      	mov	r0, r4
   b57fc:	f7ff ffba 	bl	b5774 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b5800:	4605      	mov	r5, r0
   b5802:	2800      	cmp	r0, #0
   b5804:	d0f1      	beq.n	b57ea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b5806:	6863      	ldr	r3, [r4, #4]
   b5808:	2b01      	cmp	r3, #1
   b580a:	d101      	bne.n	b5810 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b580c:	f7ff fe00 	bl	b5410 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5810:	a801      	add	r0, sp, #4
   b5812:	f7ff fefa 	bl	b560a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5816:	e7ec      	b.n	b57f2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b5818 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5818:	b570      	push	{r4, r5, r6, lr}
   b581a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b581c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5820:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b5822:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b5826:	4282      	cmp	r2, r0
   b5828:	d00f      	beq.n	b584a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b582a:	4601      	mov	r1, r0
            if (*p == value) {
   b582c:	681d      	ldr	r5, [r3, #0]
   b582e:	f851 6b04 	ldr.w	r6, [r1], #4
   b5832:	42ae      	cmp	r6, r5
   b5834:	d107      	bne.n	b5846 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5836:	1a52      	subs	r2, r2, r1
   b5838:	f002 f94c 	bl	b7ad4 <memmove>
    --size_;
   b583c:	6863      	ldr	r3, [r4, #4]
   b583e:	3b01      	subs	r3, #1
   b5840:	6063      	str	r3, [r4, #4]
    return true;
   b5842:	2001      	movs	r0, #1
}
   b5844:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b5846:	4608      	mov	r0, r1
   b5848:	e7ed      	b.n	b5826 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b584a:	2000      	movs	r0, #0
   b584c:	e7fa      	b.n	b5844 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b584e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b584e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b5850:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5854:	4604      	mov	r4, r0
   b5856:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5858:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b585a:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b585c:	f7ff fc96 	bl	b518c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b5860:	a901      	add	r1, sp, #4
   b5862:	4620      	mov	r0, r4
   b5864:	f7ff ffd8 	bl	b5818 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b5868:	b118      	cbz	r0, b5872 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b586a:	6863      	ldr	r3, [r4, #4]
   b586c:	b90b      	cbnz	r3, b5872 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b586e:	f7ff fddb 	bl	b5428 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5872:	a803      	add	r0, sp, #12
   b5874:	f7ff fec9 	bl	b560a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5878:	b004      	add	sp, #16
   b587a:	bd10      	pop	{r4, pc}

000b587c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b587c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b587e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b5882:	2318      	movs	r3, #24
   b5884:	4604      	mov	r4, r0
   b5886:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b588a:	42ae      	cmp	r6, r5
   b588c:	d015      	beq.n	b58ba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b588e:	f105 0110 	add.w	r1, r5, #16
   b5892:	4620      	mov	r0, r4
   b5894:	f7ff ffc0 	bl	b5818 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b5898:	6863      	ldr	r3, [r4, #4]
   b589a:	b90b      	cbnz	r3, b58a0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b589c:	f7ff fdc4 	bl	b5428 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b58a0:	69e0      	ldr	r0, [r4, #28]
   b58a2:	6929      	ldr	r1, [r5, #16]
   b58a4:	6803      	ldr	r3, [r0, #0]
   b58a6:	68db      	ldr	r3, [r3, #12]
   b58a8:	4798      	blx	r3
        if (h.stream) {
   b58aa:	6969      	ldr	r1, [r5, #20]
   b58ac:	b119      	cbz	r1, b58b6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b58ae:	6a20      	ldr	r0, [r4, #32]
   b58b0:	6803      	ldr	r3, [r0, #0]
   b58b2:	68db      	ldr	r3, [r3, #12]
   b58b4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b58b6:	3518      	adds	r5, #24
   b58b8:	e7e7      	b.n	b588a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b58ba:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b58be:	2618      	movs	r6, #24
   b58c0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b58c4:	42ae      	cmp	r6, r5
   b58c6:	d004      	beq.n	b58d2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b58c8:	4628      	mov	r0, r5
   b58ca:	f7ff facd 	bl	b4e68 <_ZN6StringD1Ev>
   b58ce:	3518      	adds	r5, #24
   b58d0:	e7f8      	b.n	b58c4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b58d2:	2300      	movs	r3, #0
   b58d4:	6163      	str	r3, [r4, #20]
}
   b58d6:	bd70      	pop	{r4, r5, r6, pc}

000b58d8 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b58d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b58da:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b58dc:	f7ff fda4 	bl	b5428 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b58e0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b58e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b58e6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b58e8:	f7ff fc50 	bl	b518c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b58ec:	4620      	mov	r0, r4
   b58ee:	f7ff ffc5 	bl	b587c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b58f2:	a801      	add	r0, sp, #4
   b58f4:	f7ff fe89 	bl	b560a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b58f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b58fa:	b108      	cbz	r0, b5900 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b58fc:	f7ff f82e 	bl	b495c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b5900:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5904:	2618      	movs	r6, #24
   b5906:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b590a:	42ae      	cmp	r6, r5
   b590c:	d004      	beq.n	b5918 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b590e:	4628      	mov	r0, r5
   b5910:	f7ff faaa 	bl	b4e68 <_ZN6StringD1Ev>
   b5914:	3518      	adds	r5, #24
   b5916:	e7f8      	b.n	b590a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b5918:	6920      	ldr	r0, [r4, #16]
   b591a:	f7ff fa03 	bl	b4d24 <free>
   b591e:	6820      	ldr	r0, [r4, #0]
   b5920:	f7ff fa00 	bl	b4d24 <free>
}
   b5924:	4620      	mov	r0, r4
   b5926:	b002      	add	sp, #8
   b5928:	bd70      	pop	{r4, r5, r6, pc}
	...

000b592c <__tcf_2>:
    static LogManager mgr;
   b592c:	4801      	ldr	r0, [pc, #4]	; (b5934 <__tcf_2+0x8>)
   b592e:	f7ff bfd3 	b.w	b58d8 <_ZN5spark10LogManagerD1Ev>
   b5932:	bf00      	nop
   b5934:	2003e6b0 	.word	0x2003e6b0

000b5938 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b5938:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b593a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b593c:	4604      	mov	r4, r0
   b593e:	460d      	mov	r5, r1
   b5940:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5942:	d915      	bls.n	b5970 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b5944:	4290      	cmp	r0, r2
   b5946:	d214      	bcs.n	b5972 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b5948:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b594c:	1a75      	subs	r5, r6, r1
   b594e:	f1a1 0714 	sub.w	r7, r1, #20
   b5952:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5954:	42b7      	cmp	r7, r6
   b5956:	d01a      	beq.n	b598e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b5958:	b11c      	cbz	r4, b5962 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b595a:	4631      	mov	r1, r6
   b595c:	4620      	mov	r0, r4
   b595e:	f7ff fc78 	bl	b5252 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b5962:	f106 0008 	add.w	r0, r6, #8
   b5966:	f7ff fdf9 	bl	b555c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b596a:	3e14      	subs	r6, #20
   b596c:	3c14      	subs	r4, #20
   b596e:	e7f1      	b.n	b5954 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b5970:	d00d      	beq.n	b598e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b5972:	42b5      	cmp	r5, r6
   b5974:	d00b      	beq.n	b598e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b5976:	b11c      	cbz	r4, b5980 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b5978:	4629      	mov	r1, r5
   b597a:	4620      	mov	r0, r4
   b597c:	f7ff fc69 	bl	b5252 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b5980:	f105 0008 	add.w	r0, r5, #8
   b5984:	f7ff fdea 	bl	b555c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b5988:	3514      	adds	r5, #20
   b598a:	3414      	adds	r4, #20
   b598c:	e7f1      	b.n	b5972 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b598e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5990 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5990:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5994:	4604      	mov	r4, r0
   b5996:	460d      	mov	r5, r1
   b5998:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b599a:	d914      	bls.n	b59c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b599c:	4290      	cmp	r0, r2
   b599e:	d213      	bcs.n	b59c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b59a0:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b59a4:	1a75      	subs	r5, r6, r1
   b59a6:	f1a1 0710 	sub.w	r7, r1, #16
   b59aa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b59ac:	42b7      	cmp	r7, r6
   b59ae:	d018      	beq.n	b59e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b59b0:	b11c      	cbz	r4, b59ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b59b2:	4631      	mov	r1, r6
   b59b4:	4620      	mov	r0, r4
   b59b6:	f7ff fac0 	bl	b4f3a <_ZN6StringC1EOS_>
                end->~T();
   b59ba:	4630      	mov	r0, r6
   b59bc:	f7ff fa54 	bl	b4e68 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b59c0:	3e10      	subs	r6, #16
   b59c2:	3c10      	subs	r4, #16
   b59c4:	e7f2      	b.n	b59ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b59c6:	d00c      	beq.n	b59e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b59c8:	42b5      	cmp	r5, r6
   b59ca:	d00a      	beq.n	b59e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b59cc:	b11c      	cbz	r4, b59d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b59ce:	4629      	mov	r1, r5
   b59d0:	4620      	mov	r0, r4
   b59d2:	f7ff fab2 	bl	b4f3a <_ZN6StringC1EOS_>
                p->~T();
   b59d6:	4628      	mov	r0, r5
   b59d8:	f7ff fa46 	bl	b4e68 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b59dc:	3510      	adds	r5, #16
   b59de:	3410      	adds	r4, #16
   b59e0:	e7f2      	b.n	b59c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b59e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b59e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b59e4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b59e6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b59e8:	4605      	mov	r5, r0
        if (n > 0) {
   b59ea:	dd11      	ble.n	b5a10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b59ec:	0130      	lsls	r0, r6, #4
   b59ee:	f7ff f991 	bl	b4d14 <malloc>
            if (!d) {
   b59f2:	4604      	mov	r4, r0
   b59f4:	b158      	cbz	r0, b5a0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b59f6:	e9d5 1200 	ldrd	r1, r2, [r5]
   b59fa:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b59fe:	f7ff ffc7 	bl	b5990 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5a02:	6828      	ldr	r0, [r5, #0]
   b5a04:	f7ff f98e 	bl	b4d24 <free>
        data_ = d;
   b5a08:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5a0a:	60ae      	str	r6, [r5, #8]
        return true;
   b5a0c:	2001      	movs	r0, #1
    }
   b5a0e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5a10:	2400      	movs	r4, #0
   b5a12:	e7f6      	b.n	b5a02 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b5a14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a18:	4690      	mov	r8, r2
   b5a1a:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b5a1c:	2300      	movs	r3, #0
   b5a1e:	9103      	str	r1, [sp, #12]
    return size_;
   b5a20:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b5a24:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5a26:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b5a28:	4299      	cmp	r1, r3
        capacity_(0) {
   b5a2a:	e9c0 3300 	strd	r3, r3, [r0]
   b5a2e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5a32:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5a36:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5a3a:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5a3c:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b5a3e:	dc23      	bgt.n	b5a88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b5a40:	e9d8 5700 	ldrd	r5, r7, [r8]
   b5a44:	2314      	movs	r3, #20
   b5a46:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b5a4a:	42af      	cmp	r7, r5
   b5a4c:	d03b      	beq.n	b5ac6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b5a4e:	4629      	mov	r1, r5
   b5a50:	a80b      	add	r0, sp, #44	; 0x2c
   b5a52:	f7ff fa72 	bl	b4f3a <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b5a56:	a90b      	add	r1, sp, #44	; 0x2c
   b5a58:	a80f      	add	r0, sp, #60	; 0x3c
   b5a5a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b5a5c:	f7ff fa6d 	bl	b4f3a <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5a60:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b5a64:	4299      	cmp	r1, r3
   b5a66:	da1b      	bge.n	b5aa0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b5a68:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b5a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b5a6c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b5a70:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b5a74:	4631      	mov	r1, r6
   b5a76:	f106 0010 	add.w	r0, r6, #16
   b5a7a:	f7ff ff89 	bl	b5990 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b5a7e:	b9ee      	cbnz	r6, b5abc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b5a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5a82:	3301      	adds	r3, #1
   b5a84:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b5a86:	e011      	b.n	b5aac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b5a88:	a808      	add	r0, sp, #32
   b5a8a:	f7ff ffab 	bl	b59e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5a8e:	2800      	cmp	r0, #0
   b5a90:	d1d6      	bne.n	b5a40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b5a92:	a808      	add	r0, sp, #32
   b5a94:	f7ff fa8a 	bl	b4fac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5a98:	4620      	mov	r0, r4
   b5a9a:	b015      	add	sp, #84	; 0x54
   b5a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5aa0:	3101      	adds	r1, #1
   b5aa2:	a808      	add	r0, sp, #32
   b5aa4:	f7ff ff9e 	bl	b59e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5aa8:	2800      	cmp	r0, #0
   b5aaa:	d1dd      	bne.n	b5a68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b5aac:	a80f      	add	r0, sp, #60	; 0x3c
   b5aae:	f7ff f9db 	bl	b4e68 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b5ab2:	a80b      	add	r0, sp, #44	; 0x2c
   b5ab4:	f7ff f9d8 	bl	b4e68 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b5ab8:	3514      	adds	r5, #20
   b5aba:	e7c6      	b.n	b5a4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b5abc:	a90f      	add	r1, sp, #60	; 0x3c
   b5abe:	4630      	mov	r0, r6
   b5ac0:	f7ff fa3b 	bl	b4f3a <_ZN6StringC1EOS_>
   b5ac4:	e7dc      	b.n	b5a80 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b5ac6:	2600      	movs	r6, #0
   b5ac8:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b5acc:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b5ace:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b5ad2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b5ad6:	429e      	cmp	r6, r3
   b5ad8:	da7c      	bge.n	b5bd4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b5ada:	0133      	lsls	r3, r6, #4
   b5adc:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b5ade:	9306      	str	r3, [sp, #24]
        if (!category) {
   b5ae0:	b90b      	cbnz	r3, b5ae6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b5ae2:	3601      	adds	r6, #1
   b5ae4:	e7f5      	b.n	b5ad2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b5ae6:	2300      	movs	r3, #0
   b5ae8:	9307      	str	r3, [sp, #28]
   b5aea:	fb09 f306 	mul.w	r3, r9, r6
   b5aee:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b5af0:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b5af2:	a907      	add	r1, sp, #28
   b5af4:	a806      	add	r0, sp, #24
   b5af6:	f7ff fb22 	bl	b513e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5afa:	4682      	mov	sl, r0
   b5afc:	2800      	cmp	r0, #0
   b5afe:	d0f0      	beq.n	b5ae2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b5b00:	f04f 0300 	mov.w	r3, #0
   b5b04:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5b08:	4601      	mov	r1, r0
   b5b0a:	9a07      	ldr	r2, [sp, #28]
   b5b0c:	f10d 0317 	add.w	r3, sp, #23
   b5b10:	4628      	mov	r0, r5
   b5b12:	f7ff fbb1 	bl	b5278 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5b16:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5b1a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5b1c:	2f00      	cmp	r7, #0
   b5b1e:	d14a      	bne.n	b5bb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b5b20:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b5b24:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b5b28:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b5b2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5b30:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b5b34:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b5b38:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5b3a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b5b3e:	4293      	cmp	r3, r2
   b5b40:	db17      	blt.n	b5b72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b5b42:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b5b46:	f1ba 0f00 	cmp.w	sl, #0
   b5b4a:	dd30      	ble.n	b5bae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b5b4c:	fb09 f00a 	mul.w	r0, r9, sl
   b5b50:	f7ff f8e0 	bl	b4d14 <malloc>
            if (!d) {
   b5b54:	4683      	mov	fp, r0
   b5b56:	b360      	cbz	r0, b5bb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b5b58:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5b5c:	fb09 1202 	mla	r2, r9, r2, r1
   b5b60:	f7ff feea 	bl	b5938 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b5b64:	6828      	ldr	r0, [r5, #0]
   b5b66:	f7ff f8dd 	bl	b4d24 <free>
        data_ = d;
   b5b6a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b5b6e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b5b72:	682b      	ldr	r3, [r5, #0]
   b5b74:	9a01      	ldr	r2, [sp, #4]
   b5b76:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b5b7a:	686a      	ldr	r2, [r5, #4]
   b5b7c:	4651      	mov	r1, sl
   b5b7e:	fb09 3202 	mla	r2, r9, r2, r3
   b5b82:	f10a 0014 	add.w	r0, sl, #20
   b5b86:	f7ff fed7 	bl	b5938 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b5b8a:	f1ba 0f00 	cmp.w	sl, #0
   b5b8e:	d003      	beq.n	b5b98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b5b90:	a90f      	add	r1, sp, #60	; 0x3c
   b5b92:	4650      	mov	r0, sl
   b5b94:	f7ff fb5d 	bl	b5252 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b5b98:	686b      	ldr	r3, [r5, #4]
   b5b9a:	3301      	adds	r3, #1
   b5b9c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b5b9e:	a811      	add	r0, sp, #68	; 0x44
   b5ba0:	f7ff fcdc 	bl	b555c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5ba4:	b13f      	cbz	r7, b5bb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b5ba6:	a80b      	add	r0, sp, #44	; 0x2c
   b5ba8:	f7ff fcd8 	bl	b555c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5bac:	e771      	b.n	b5a92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b5bae:	46bb      	mov	fp, r7
   b5bb0:	e7d8      	b.n	b5b64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5bb2:	2701      	movs	r7, #1
   b5bb4:	e7f3      	b.n	b5b9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b5bb6:	9b01      	ldr	r3, [sp, #4]
   b5bb8:	682d      	ldr	r5, [r5, #0]
   b5bba:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b5bbe:	9b06      	ldr	r3, [sp, #24]
   b5bc0:	781b      	ldrb	r3, [r3, #0]
   b5bc2:	b92b      	cbnz	r3, b5bd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b5bc4:	f8d8 3000 	ldr.w	r3, [r8]
   b5bc8:	9a02      	ldr	r2, [sp, #8]
   b5bca:	4413      	add	r3, r2
   b5bcc:	7c1b      	ldrb	r3, [r3, #16]
   b5bce:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b5bd0:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b5bd2:	e78e      	b.n	b5af2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5bd4:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5bd6:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5bd8:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5bda:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5bdc:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5bde:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b5be0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b5be2:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5be4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5be6:	60a2      	str	r2, [r4, #8]
   b5be8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b5bea:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5bec:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5bee:	60e2      	str	r2, [r4, #12]
   b5bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b5bf2:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5bf4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5bf6:	6122      	str	r2, [r4, #16]
   b5bf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b5bfa:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b5bfc:	9b03      	ldr	r3, [sp, #12]
   b5bfe:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b5c00:	6162      	str	r2, [r4, #20]
   b5c02:	7623      	strb	r3, [r4, #24]
   b5c04:	e7cf      	b.n	b5ba6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b5c08 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5c08:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5c0a:	4604      	mov	r4, r0
   b5c0c:	b087      	sub	sp, #28
   b5c0e:	460d      	mov	r5, r1
        filter_(level, filters) {
   b5c10:	4626      	mov	r6, r4
        stream_(&stream) {
   b5c12:	4619      	mov	r1, r3
   b5c14:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5c16:	4617      	mov	r7, r2
        stream_(&stream) {
   b5c18:	f7fe fcd3 	bl	b45c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5c1c:	4b0b      	ldr	r3, [pc, #44]	; (b5c4c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b5c1e:	f846 3b04 	str.w	r3, [r6], #4
   b5c22:	4669      	mov	r1, sp
   b5c24:	a803      	add	r0, sp, #12
   b5c26:	f7fe fccc 	bl	b45c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5c2a:	aa03      	add	r2, sp, #12
   b5c2c:	4639      	mov	r1, r7
   b5c2e:	4630      	mov	r0, r6
   b5c30:	f7ff fef0 	bl	b5a14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5c34:	a803      	add	r0, sp, #12
   b5c36:	f7fe fc83 	bl	b4540 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5c3a:	4668      	mov	r0, sp
   b5c3c:	f7fe fc80 	bl	b4540 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5c40:	4b03      	ldr	r3, [pc, #12]	; (b5c50 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b5c42:	6023      	str	r3, [r4, #0]
}
   b5c44:	4620      	mov	r0, r4
        stream_(&stream) {
   b5c46:	6225      	str	r5, [r4, #32]
}
   b5c48:	b007      	add	sp, #28
   b5c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5c4c:	000b7fa4 	.word	0x000b7fa4
   b5c50:	000b80c0 	.word	0x000b80c0

000b5c54 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b5c54:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5c56:	460f      	mov	r7, r1
   b5c58:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5c5a:	491d      	ldr	r1, [pc, #116]	; (b5cd0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b5c5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5c5e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b5c60:	4616      	mov	r6, r2
   b5c62:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5c64:	f001 ff9d 	bl	b7ba2 <strcmp>
   b5c68:	b9c0      	cbnz	r0, b5c9c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b5c6a:	b1a4      	cbz	r4, b5c96 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b5c6c:	4629      	mov	r1, r5
   b5c6e:	a801      	add	r0, sp, #4
   b5c70:	f7ff fcbc 	bl	b55ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b5c74:	4917      	ldr	r1, [pc, #92]	; (b5cd4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b5c76:	2024      	movs	r0, #36	; 0x24
   b5c78:	f001 faea 	bl	b7250 <_ZnwjRKSt9nothrow_t>
   b5c7c:	4605      	mov	r5, r0
   b5c7e:	b130      	cbz	r0, b5c8e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b5c80:	ab01      	add	r3, sp, #4
   b5c82:	4632      	mov	r2, r6
   b5c84:	4621      	mov	r1, r4
   b5c86:	f7ff ffbf 	bl	b5c08 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5c8a:	4b13      	ldr	r3, [pc, #76]	; (b5cd8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b5c8c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b5c8e:	a801      	add	r0, sp, #4
   b5c90:	f7fe fc56 	bl	b4540 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5c94:	462c      	mov	r4, r5
}
   b5c96:	4620      	mov	r0, r4
   b5c98:	b005      	add	sp, #20
   b5c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b5c9c:	490f      	ldr	r1, [pc, #60]	; (b5cdc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b5c9e:	4638      	mov	r0, r7
   b5ca0:	f001 ff7f 	bl	b7ba2 <strcmp>
   b5ca4:	b990      	cbnz	r0, b5ccc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b5ca6:	2c00      	cmp	r4, #0
   b5ca8:	d0f5      	beq.n	b5c96 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b5caa:	4629      	mov	r1, r5
   b5cac:	a801      	add	r0, sp, #4
   b5cae:	f7ff fc9d 	bl	b55ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b5cb2:	4908      	ldr	r1, [pc, #32]	; (b5cd4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b5cb4:	2024      	movs	r0, #36	; 0x24
   b5cb6:	f001 facb 	bl	b7250 <_ZnwjRKSt9nothrow_t>
   b5cba:	4605      	mov	r5, r0
   b5cbc:	2800      	cmp	r0, #0
   b5cbe:	d0e6      	beq.n	b5c8e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b5cc0:	ab01      	add	r3, sp, #4
   b5cc2:	4632      	mov	r2, r6
   b5cc4:	4621      	mov	r1, r4
   b5cc6:	f7ff ff9f 	bl	b5c08 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5cca:	e7e0      	b.n	b5c8e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b5ccc:	2400      	movs	r4, #0
   b5cce:	e7e2      	b.n	b5c96 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b5cd0:	000b8040 	.word	0x000b8040
   b5cd4:	000b826d 	.word	0x000b826d
   b5cd8:	000b80d8 	.word	0x000b80d8
   b5cdc:	000b8044 	.word	0x000b8044

000b5ce0 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b5ce0:	4b01      	ldr	r3, [pc, #4]	; (b5ce8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5ce2:	4a02      	ldr	r2, [pc, #8]	; (b5cec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5ce4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5ce6:	4770      	bx	lr
   b5ce8:	2003e6ac 	.word	0x2003e6ac
   b5cec:	000b8055 	.word	0x000b8055

000b5cf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5cf4:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b5cf6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5cfa:	4604      	mov	r4, r0
   b5cfc:	460e      	mov	r6, r1
   b5cfe:	4617      	mov	r7, r2
   b5d00:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b5d02:	f000 fdb1 	bl	b6868 <_Z16_fetch_usbserialv>
   b5d06:	4581      	cmp	r9, r0
   b5d08:	d04c      	beq.n	b5da4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b5d0a:	792b      	ldrb	r3, [r5, #4]
   b5d0c:	0719      	lsls	r1, r3, #28
   b5d0e:	d504      	bpl.n	b5d1a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b5d10:	696a      	ldr	r2, [r5, #20]
   b5d12:	4954      	ldr	r1, [pc, #336]	; (b5e64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b5d14:	4620      	mov	r0, r4
   b5d16:	f7ff fa8d 	bl	b5234 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b5d1a:	f1b8 0f00 	cmp.w	r8, #0
   b5d1e:	d00d      	beq.n	b5d3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b5d20:	215b      	movs	r1, #91	; 0x5b
   b5d22:	4620      	mov	r0, r4
   b5d24:	f7ff fa7a 	bl	b521c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b5d28:	4641      	mov	r1, r8
   b5d2a:	4620      	mov	r0, r4
   b5d2c:	f7ff fa67 	bl	b51fe <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b5d30:	6823      	ldr	r3, [r4, #0]
   b5d32:	494d      	ldr	r1, [pc, #308]	; (b5e68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b5d34:	68db      	ldr	r3, [r3, #12]
   b5d36:	2202      	movs	r2, #2
   b5d38:	4620      	mov	r0, r4
   b5d3a:	4798      	blx	r3
    if (attr.has_file) {
   b5d3c:	792b      	ldrb	r3, [r5, #4]
   b5d3e:	07da      	lsls	r2, r3, #31
   b5d40:	d523      	bpl.n	b5d8a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b5d42:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b5d46:	212f      	movs	r1, #47	; 0x2f
   b5d48:	4640      	mov	r0, r8
   b5d4a:	f001 ff76 	bl	b7c3a <strrchr>
    if (s1) {
   b5d4e:	b108      	cbz	r0, b5d54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b5d50:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b5d54:	4641      	mov	r1, r8
   b5d56:	4620      	mov	r0, r4
   b5d58:	f7ff fa51 	bl	b51fe <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b5d5c:	792b      	ldrb	r3, [r5, #4]
   b5d5e:	079b      	lsls	r3, r3, #30
   b5d60:	d508      	bpl.n	b5d74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b5d62:	213a      	movs	r1, #58	; 0x3a
   b5d64:	4620      	mov	r0, r4
   b5d66:	f7ff fa59 	bl	b521c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b5d6a:	68ea      	ldr	r2, [r5, #12]
   b5d6c:	493f      	ldr	r1, [pc, #252]	; (b5e6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b5d6e:	4620      	mov	r0, r4
   b5d70:	f7ff fa60 	bl	b5234 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b5d74:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b5d76:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b5d78:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b5d7c:	68db      	ldr	r3, [r3, #12]
   b5d7e:	bf14      	ite	ne
   b5d80:	493b      	ldrne	r1, [pc, #236]	; (b5e70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b5d82:	493c      	ldreq	r1, [pc, #240]	; (b5e74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b5d84:	2202      	movs	r2, #2
            write(": ", 2);
   b5d86:	4620      	mov	r0, r4
   b5d88:	4798      	blx	r3
    if (attr.has_function) {
   b5d8a:	792b      	ldrb	r3, [r5, #4]
   b5d8c:	0758      	lsls	r0, r3, #29
   b5d8e:	d51d      	bpl.n	b5dcc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b5d90:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b5d92:	460b      	mov	r3, r1
   b5d94:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b5d96:	f813 0b01 	ldrb.w	r0, [r3], #1
   b5d9a:	b160      	cbz	r0, b5db6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b5d9c:	2820      	cmp	r0, #32
   b5d9e:	d108      	bne.n	b5db2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b5da0:	4619      	mov	r1, r3
   b5da2:	e7f7      	b.n	b5d94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b5da4:	4834      	ldr	r0, [pc, #208]	; (b5e78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b5da6:	f000 fee0 	bl	b6b6a <_ZN5spark12NetworkClass9listeningEv>
   b5daa:	2800      	cmp	r0, #0
   b5dac:	d0ad      	beq.n	b5d0a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b5dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b5db2:	2828      	cmp	r0, #40	; 0x28
   b5db4:	d1ee      	bne.n	b5d94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b5db6:	6823      	ldr	r3, [r4, #0]
   b5db8:	1a52      	subs	r2, r2, r1
   b5dba:	68db      	ldr	r3, [r3, #12]
   b5dbc:	4620      	mov	r0, r4
   b5dbe:	4798      	blx	r3
        write("(): ", 4);
   b5dc0:	6823      	ldr	r3, [r4, #0]
   b5dc2:	492e      	ldr	r1, [pc, #184]	; (b5e7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b5dc4:	68db      	ldr	r3, [r3, #12]
   b5dc6:	2204      	movs	r2, #4
   b5dc8:	4620      	mov	r0, r4
   b5dca:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b5dcc:	2100      	movs	r1, #0
   b5dce:	4638      	mov	r0, r7
   b5dd0:	f7fe fecc 	bl	b4b6c <log_level_name>
   b5dd4:	4601      	mov	r1, r0
    write(s);
   b5dd6:	4620      	mov	r0, r4
   b5dd8:	f7ff fa11 	bl	b51fe <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b5ddc:	6823      	ldr	r3, [r4, #0]
   b5dde:	4925      	ldr	r1, [pc, #148]	; (b5e74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b5de0:	68db      	ldr	r3, [r3, #12]
   b5de2:	2202      	movs	r2, #2
   b5de4:	4620      	mov	r0, r4
   b5de6:	4798      	blx	r3
    if (msg) {
   b5de8:	b11e      	cbz	r6, b5df2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b5dea:	4631      	mov	r1, r6
   b5dec:	4620      	mov	r0, r4
   b5dee:	f7ff fa06 	bl	b51fe <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b5df2:	792b      	ldrb	r3, [r5, #4]
   b5df4:	f013 0f30 	tst.w	r3, #48	; 0x30
   b5df8:	d02c      	beq.n	b5e54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b5dfa:	6823      	ldr	r3, [r4, #0]
   b5dfc:	4920      	ldr	r1, [pc, #128]	; (b5e80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b5dfe:	68db      	ldr	r3, [r3, #12]
   b5e00:	2202      	movs	r2, #2
   b5e02:	4620      	mov	r0, r4
   b5e04:	4798      	blx	r3
        if (attr.has_code) {
   b5e06:	792b      	ldrb	r3, [r5, #4]
   b5e08:	06d9      	lsls	r1, r3, #27
   b5e0a:	d50a      	bpl.n	b5e22 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b5e0c:	6823      	ldr	r3, [r4, #0]
   b5e0e:	491d      	ldr	r1, [pc, #116]	; (b5e84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b5e10:	68db      	ldr	r3, [r3, #12]
   b5e12:	2207      	movs	r2, #7
   b5e14:	4620      	mov	r0, r4
   b5e16:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b5e18:	69aa      	ldr	r2, [r5, #24]
   b5e1a:	491b      	ldr	r1, [pc, #108]	; (b5e88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b5e1c:	4620      	mov	r0, r4
   b5e1e:	f7ff fa09 	bl	b5234 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b5e22:	792b      	ldrb	r3, [r5, #4]
   b5e24:	069a      	lsls	r2, r3, #26
   b5e26:	d511      	bpl.n	b5e4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b5e28:	06db      	lsls	r3, r3, #27
   b5e2a:	d505      	bpl.n	b5e38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b5e2c:	6823      	ldr	r3, [r4, #0]
   b5e2e:	4910      	ldr	r1, [pc, #64]	; (b5e70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b5e30:	68db      	ldr	r3, [r3, #12]
   b5e32:	2202      	movs	r2, #2
   b5e34:	4620      	mov	r0, r4
   b5e36:	4798      	blx	r3
            write("details = ", 10);
   b5e38:	6823      	ldr	r3, [r4, #0]
   b5e3a:	4914      	ldr	r1, [pc, #80]	; (b5e8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b5e3c:	68db      	ldr	r3, [r3, #12]
   b5e3e:	4620      	mov	r0, r4
   b5e40:	220a      	movs	r2, #10
   b5e42:	4798      	blx	r3
            write(attr.details);
   b5e44:	69e9      	ldr	r1, [r5, #28]
   b5e46:	4620      	mov	r0, r4
   b5e48:	f7ff f9d9 	bl	b51fe <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b5e4c:	215d      	movs	r1, #93	; 0x5d
   b5e4e:	4620      	mov	r0, r4
   b5e50:	f7ff f9e4 	bl	b521c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b5e54:	6823      	ldr	r3, [r4, #0]
   b5e56:	490e      	ldr	r1, [pc, #56]	; (b5e90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b5e58:	68db      	ldr	r3, [r3, #12]
   b5e5a:	4620      	mov	r0, r4
   b5e5c:	2202      	movs	r2, #2
}
   b5e5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b5e62:	4718      	bx	r3
   b5e64:	000b8059 	.word	0x000b8059
   b5e68:	000b8060 	.word	0x000b8060
   b5e6c:	000b8063 	.word	0x000b8063
   b5e70:	000b8066 	.word	0x000b8066
   b5e74:	000b806b 	.word	0x000b806b
   b5e78:	2003e714 	.word	0x2003e714
   b5e7c:	000b8069 	.word	0x000b8069
   b5e80:	000b806e 	.word	0x000b806e
   b5e84:	000b8071 	.word	0x000b8071
   b5e88:	000b8079 	.word	0x000b8079
   b5e8c:	000b807c 	.word	0x000b807c
   b5e90:	000b8087 	.word	0x000b8087

000b5e94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5e98:	b085      	sub	sp, #20
    return stream_;
   b5e9a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b5e9e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b5ea0:	4605      	mov	r5, r0
   b5ea2:	460f      	mov	r7, r1
   b5ea4:	4690      	mov	r8, r2
   b5ea6:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b5ea8:	f000 fcde 	bl	b6868 <_Z16_fetch_usbserialv>
   b5eac:	4581      	cmp	r9, r0
   b5eae:	d105      	bne.n	b5ebc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b5eb0:	4849      	ldr	r0, [pc, #292]	; (b5fd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b5eb2:	f000 fe5a 	bl	b6b6a <_ZN5spark12NetworkClass9listeningEv>
   b5eb6:	2800      	cmp	r0, #0
   b5eb8:	f040 808a 	bne.w	b5fd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b5ebc:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b5ebe:	4a47      	ldr	r2, [pc, #284]	; (b5fdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b5ec0:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b5ec2:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b5ec6:	a801      	add	r0, sp, #4
        strm_(stream) {
   b5ec8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b5eca:	f88d 9008 	strb.w	r9, [sp, #8]
   b5ece:	f000 fff0 	bl	b6eb2 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b5ed2:	4649      	mov	r1, r9
   b5ed4:	4640      	mov	r0, r8
   b5ed6:	f7fe fe49 	bl	b4b6c <log_level_name>
    json.name("l", 1).value(s);
   b5eda:	4941      	ldr	r1, [pc, #260]	; (b5fe0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b5edc:	4680      	mov	r8, r0
   b5ede:	2201      	movs	r2, #1
   b5ee0:	a801      	add	r0, sp, #4
   b5ee2:	f001 f875 	bl	b6fd0 <_ZN5spark10JSONWriter4nameEPKcj>
   b5ee6:	4641      	mov	r1, r8
   b5ee8:	f7ff f97b 	bl	b51e2 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b5eec:	b13f      	cbz	r7, b5efe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b5eee:	493d      	ldr	r1, [pc, #244]	; (b5fe4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b5ef0:	2201      	movs	r2, #1
   b5ef2:	a801      	add	r0, sp, #4
   b5ef4:	f001 f86c 	bl	b6fd0 <_ZN5spark10JSONWriter4nameEPKcj>
   b5ef8:	4639      	mov	r1, r7
   b5efa:	f7ff f972 	bl	b51e2 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b5efe:	b13e      	cbz	r6, b5f10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b5f00:	4939      	ldr	r1, [pc, #228]	; (b5fe8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b5f02:	2201      	movs	r2, #1
   b5f04:	a801      	add	r0, sp, #4
   b5f06:	f001 f863 	bl	b6fd0 <_ZN5spark10JSONWriter4nameEPKcj>
   b5f0a:	4631      	mov	r1, r6
   b5f0c:	f7ff f969 	bl	b51e2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b5f10:	7923      	ldrb	r3, [r4, #4]
   b5f12:	07df      	lsls	r7, r3, #31
   b5f14:	d50e      	bpl.n	b5f34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b5f16:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b5f18:	212f      	movs	r1, #47	; 0x2f
   b5f1a:	4630      	mov	r0, r6
   b5f1c:	f001 fe8d 	bl	b7c3a <strrchr>
    if (s1) {
   b5f20:	b100      	cbz	r0, b5f24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b5f22:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b5f24:	4931      	ldr	r1, [pc, #196]	; (b5fec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b5f26:	2201      	movs	r2, #1
   b5f28:	a801      	add	r0, sp, #4
   b5f2a:	f001 f851 	bl	b6fd0 <_ZN5spark10JSONWriter4nameEPKcj>
   b5f2e:	4631      	mov	r1, r6
   b5f30:	f7ff f957 	bl	b51e2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b5f34:	7923      	ldrb	r3, [r4, #4]
   b5f36:	079e      	lsls	r6, r3, #30
   b5f38:	d507      	bpl.n	b5f4a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b5f3a:	492d      	ldr	r1, [pc, #180]	; (b5ff0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b5f3c:	2202      	movs	r2, #2
   b5f3e:	a801      	add	r0, sp, #4
   b5f40:	f001 f846 	bl	b6fd0 <_ZN5spark10JSONWriter4nameEPKcj>
   b5f44:	68e1      	ldr	r1, [r4, #12]
   b5f46:	f000 ffc1 	bl	b6ecc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b5f4a:	7923      	ldrb	r3, [r4, #4]
   b5f4c:	0758      	lsls	r0, r3, #29
   b5f4e:	d514      	bpl.n	b5f7a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b5f50:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b5f52:	4633      	mov	r3, r6
   b5f54:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b5f56:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5f5a:	b12a      	cbz	r2, b5f68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b5f5c:	2a20      	cmp	r2, #32
   b5f5e:	d101      	bne.n	b5f64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b5f60:	461e      	mov	r6, r3
   b5f62:	e7f7      	b.n	b5f54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b5f64:	2a28      	cmp	r2, #40	; 0x28
   b5f66:	d1f5      	bne.n	b5f54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b5f68:	4922      	ldr	r1, [pc, #136]	; (b5ff4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b5f6a:	2202      	movs	r2, #2
   b5f6c:	a801      	add	r0, sp, #4
   b5f6e:	f001 f82f 	bl	b6fd0 <_ZN5spark10JSONWriter4nameEPKcj>
   b5f72:	1bba      	subs	r2, r7, r6
   b5f74:	4631      	mov	r1, r6
   b5f76:	f001 f83b 	bl	b6ff0 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b5f7a:	7923      	ldrb	r3, [r4, #4]
   b5f7c:	0719      	lsls	r1, r3, #28
   b5f7e:	d507      	bpl.n	b5f90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b5f80:	491d      	ldr	r1, [pc, #116]	; (b5ff8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b5f82:	2201      	movs	r2, #1
   b5f84:	a801      	add	r0, sp, #4
   b5f86:	f001 f823 	bl	b6fd0 <_ZN5spark10JSONWriter4nameEPKcj>
   b5f8a:	6961      	ldr	r1, [r4, #20]
   b5f8c:	f000 ffb0 	bl	b6ef0 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b5f90:	7923      	ldrb	r3, [r4, #4]
   b5f92:	06da      	lsls	r2, r3, #27
   b5f94:	d508      	bpl.n	b5fa8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b5f96:	2204      	movs	r2, #4
   b5f98:	4918      	ldr	r1, [pc, #96]	; (b5ffc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b5f9a:	eb0d 0002 	add.w	r0, sp, r2
   b5f9e:	f001 f817 	bl	b6fd0 <_ZN5spark10JSONWriter4nameEPKcj>
   b5fa2:	69a1      	ldr	r1, [r4, #24]
   b5fa4:	f000 ff92 	bl	b6ecc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b5fa8:	7923      	ldrb	r3, [r4, #4]
   b5faa:	069b      	lsls	r3, r3, #26
   b5fac:	d507      	bpl.n	b5fbe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b5fae:	4914      	ldr	r1, [pc, #80]	; (b6000 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b5fb0:	2206      	movs	r2, #6
   b5fb2:	a801      	add	r0, sp, #4
   b5fb4:	f001 f80c 	bl	b6fd0 <_ZN5spark10JSONWriter4nameEPKcj>
   b5fb8:	69e1      	ldr	r1, [r4, #28]
   b5fba:	f7ff f912 	bl	b51e2 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b5fbe:	a801      	add	r0, sp, #4
   b5fc0:	f000 ff61 	bl	b6e86 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b5fc4:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b5fc6:	490f      	ldr	r1, [pc, #60]	; (b6004 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b5fc8:	6803      	ldr	r3, [r0, #0]
   b5fca:	2202      	movs	r2, #2
   b5fcc:	68db      	ldr	r3, [r3, #12]
   b5fce:	4798      	blx	r3
}
   b5fd0:	b005      	add	sp, #20
   b5fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5fd6:	bf00      	nop
   b5fd8:	2003e714 	.word	0x2003e714
   b5fdc:	000b80a8 	.word	0x000b80a8
   b5fe0:	000b8036 	.word	0x000b8036
   b5fe4:	000b808a 	.word	0x000b808a
   b5fe8:	000b8300 	.word	0x000b8300
   b5fec:	000b808c 	.word	0x000b808c
   b5ff0:	000b808e 	.word	0x000b808e
   b5ff4:	000b8091 	.word	0x000b8091
   b5ff8:	000b7f98 	.word	0x000b7f98
   b5ffc:	000b8094 	.word	0x000b8094
   b6000:	000b8099 	.word	0x000b8099
   b6004:	000b8087 	.word	0x000b8087

000b6008 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6008:	4b02      	ldr	r3, [pc, #8]	; (b6014 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b600a:	681a      	ldr	r2, [r3, #0]
   b600c:	4b02      	ldr	r3, [pc, #8]	; (b6018 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b600e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6010:	4770      	bx	lr
   b6012:	bf00      	nop
   b6014:	2003e454 	.word	0x2003e454
   b6018:	2003e6d8 	.word	0x2003e6d8

000b601c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b601c:	2100      	movs	r1, #0
   b601e:	f7fe bdbd 	b.w	b4b9c <system_delay_ms>
	...

000b6024 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6024:	4b01      	ldr	r3, [pc, #4]	; (b602c <_GLOBAL__sub_I_RGB+0x8>)
   b6026:	2200      	movs	r2, #0
   b6028:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b602a:	4770      	bx	lr
   b602c:	2003e6dc 	.word	0x2003e6dc

000b6030 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6030:	4b01      	ldr	r3, [pc, #4]	; (b6038 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6032:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6034:	4770      	bx	lr
   b6036:	bf00      	nop
   b6038:	2003e458 	.word	0x2003e458

000b603c <serialEventRun>:
{
   b603c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b603e:	4b0b      	ldr	r3, [pc, #44]	; (b606c <serialEventRun+0x30>)
   b6040:	b143      	cbz	r3, b6054 <serialEventRun+0x18>
   b6042:	f000 fc11 	bl	b6868 <_Z16_fetch_usbserialv>
   b6046:	6803      	ldr	r3, [r0, #0]
   b6048:	691b      	ldr	r3, [r3, #16]
   b604a:	4798      	blx	r3
   b604c:	2800      	cmp	r0, #0
   b604e:	dd01      	ble.n	b6054 <serialEventRun+0x18>
        serialEvent();
   b6050:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6054:	4b06      	ldr	r3, [pc, #24]	; (b6070 <serialEventRun+0x34>)
   b6056:	b143      	cbz	r3, b606a <serialEventRun+0x2e>
   b6058:	f001 f896 	bl	b7188 <_Z22__fetch_global_Serial1v>
   b605c:	6803      	ldr	r3, [r0, #0]
   b605e:	691b      	ldr	r3, [r3, #16]
   b6060:	4798      	blx	r3
   b6062:	2800      	cmp	r0, #0
   b6064:	dd01      	ble.n	b606a <serialEventRun+0x2e>
        serialEvent1();
   b6066:	f3af 8000 	nop.w
}
   b606a:	bd08      	pop	{r3, pc}
	...

000b6074 <_post_loop>:
{
   b6074:	b508      	push	{r3, lr}
	serialEventRun();
   b6076:	f7ff ffe1 	bl	b603c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b607a:	f7fe fc5f 	bl	b493c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b607e:	4b01      	ldr	r3, [pc, #4]	; (b6084 <_post_loop+0x10>)
   b6080:	6018      	str	r0, [r3, #0]
}
   b6082:	bd08      	pop	{r3, pc}
   b6084:	2003e740 	.word	0x2003e740

000b6088 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6088:	4805      	ldr	r0, [pc, #20]	; (b60a0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b608a:	4a06      	ldr	r2, [pc, #24]	; (b60a4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b608c:	4906      	ldr	r1, [pc, #24]	; (b60a8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b608e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6090:	1a12      	subs	r2, r2, r0
   b6092:	f001 fd11 	bl	b7ab8 <memcpy>
    __backup_sram_signature = signature;
   b6096:	4b05      	ldr	r3, [pc, #20]	; (b60ac <_Z33system_initialize_user_backup_ramv+0x24>)
   b6098:	4a05      	ldr	r2, [pc, #20]	; (b60b0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b609a:	601a      	str	r2, [r3, #0]
}
   b609c:	bd08      	pop	{r3, pc}
   b609e:	bf00      	nop
   b60a0:	2003f400 	.word	0x2003f400
   b60a4:	2003f404 	.word	0x2003f404
   b60a8:	000b8454 	.word	0x000b8454
   b60ac:	2003f400 	.word	0x2003f400
   b60b0:	9a271c1e 	.word	0x9a271c1e

000b60b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b60b4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b60b6:	2300      	movs	r3, #0
   b60b8:	9300      	str	r3, [sp, #0]
   b60ba:	461a      	mov	r2, r3
   b60bc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b60c0:	f7fe fd96 	bl	b4bf0 <system_ctrl_set_result>
}
   b60c4:	b003      	add	sp, #12
   b60c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b60cc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b60cc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b60ce:	8843      	ldrh	r3, [r0, #2]
   b60d0:	2b0a      	cmp	r3, #10
   b60d2:	d008      	beq.n	b60e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b60d4:	2b50      	cmp	r3, #80	; 0x50
   b60d6:	d10b      	bne.n	b60f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b60d8:	4b09      	ldr	r3, [pc, #36]	; (b6100 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b60da:	681b      	ldr	r3, [r3, #0]
   b60dc:	b14b      	cbz	r3, b60f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b60de:	b003      	add	sp, #12
   b60e0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b60e4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b60e6:	f7ff ffe5 	bl	b60b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b60ea:	b003      	add	sp, #12
   b60ec:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b60f0:	2300      	movs	r3, #0
   b60f2:	9300      	str	r3, [sp, #0]
   b60f4:	461a      	mov	r2, r3
   b60f6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b60fa:	f7fe fd79 	bl	b4bf0 <system_ctrl_set_result>
}
   b60fe:	e7f4      	b.n	b60ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6100:	2003e6f0 	.word	0x2003e6f0

000b6104 <module_user_init_hook>:
{
   b6104:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6106:	4812      	ldr	r0, [pc, #72]	; (b6150 <module_user_init_hook+0x4c>)
   b6108:	2100      	movs	r1, #0
   b610a:	f7fe fe4b 	bl	b4da4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b610e:	4b11      	ldr	r3, [pc, #68]	; (b6154 <module_user_init_hook+0x50>)
   b6110:	681a      	ldr	r2, [r3, #0]
   b6112:	4b11      	ldr	r3, [pc, #68]	; (b6158 <module_user_init_hook+0x54>)
   b6114:	429a      	cmp	r2, r3
   b6116:	4b11      	ldr	r3, [pc, #68]	; (b615c <module_user_init_hook+0x58>)
   b6118:	bf0c      	ite	eq
   b611a:	2201      	moveq	r2, #1
   b611c:	2200      	movne	r2, #0
   b611e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6120:	d001      	beq.n	b6126 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6122:	f7ff ffb1 	bl	b6088 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6126:	f7fe fbf9 	bl	b491c <HAL_RNG_GetRandomNumber>
   b612a:	4604      	mov	r4, r0
    srand(seed);
   b612c:	f001 fcf4 	bl	b7b18 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6130:	4b0b      	ldr	r3, [pc, #44]	; (b6160 <module_user_init_hook+0x5c>)
   b6132:	b113      	cbz	r3, b613a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6134:	4620      	mov	r0, r4
   b6136:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b613a:	2100      	movs	r1, #0
   b613c:	4808      	ldr	r0, [pc, #32]	; (b6160 <module_user_init_hook+0x5c>)
   b613e:	f7fe fde1 	bl	b4d04 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6146:	4807      	ldr	r0, [pc, #28]	; (b6164 <module_user_init_hook+0x60>)
   b6148:	2100      	movs	r1, #0
   b614a:	f7fe bd47 	b.w	b4bdc <system_ctrl_set_app_request_handler>
   b614e:	bf00      	nop
   b6150:	000b6031 	.word	0x000b6031
   b6154:	2003f400 	.word	0x2003f400
   b6158:	9a271c1e 	.word	0x9a271c1e
   b615c:	2003e6ec 	.word	0x2003e6ec
   b6160:	00000000 	.word	0x00000000
   b6164:	000b60cd 	.word	0x000b60cd

000b6168 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6168:	4770      	bx	lr

000b616a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b616a:	2000      	movs	r0, #0
   b616c:	4770      	bx	lr

000b616e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b616e:	b510      	push	{r4, lr}
   b6170:	2110      	movs	r1, #16
   b6172:	4604      	mov	r4, r0
   b6174:	f7fd ff91 	bl	b409a <_ZdlPvj>
   b6178:	4620      	mov	r0, r4
   b617a:	bd10      	pop	{r4, pc}

000b617c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b617c:	b508      	push	{r3, lr}
      { delete this; }
   b617e:	f7ff fff6 	bl	b616e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b6182:	bd08      	pop	{r3, pc}

000b6184 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b6184:	b530      	push	{r4, r5, lr}
        type_(type) {
   b6186:	2200      	movs	r2, #0
   b6188:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b618c:	6002      	str	r2, [r0, #0]
   b618e:	8084      	strh	r4, [r0, #4]
   b6190:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6192:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6194:	680c      	ldr	r4, [r1, #0]
   b6196:	8085      	strh	r5, [r0, #4]
   b6198:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b619a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b619c:	bd30      	pop	{r4, r5, pc}

000b619e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b619e:	b510      	push	{r4, lr}
   b61a0:	4604      	mov	r4, r0
    free((void*)msg_);
   b61a2:	6800      	ldr	r0, [r0, #0]
   b61a4:	f7fe fdbe 	bl	b4d24 <free>
}
   b61a8:	4620      	mov	r0, r4
   b61aa:	bd10      	pop	{r4, pc}

000b61ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b61ac:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b61ae:	68c4      	ldr	r4, [r0, #12]
   b61b0:	b1f4      	cbz	r4, b61f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b61b2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b61b4:	2b02      	cmp	r3, #2
   b61b6:	d103      	bne.n	b61c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b61b8:	f104 000c 	add.w	r0, r4, #12
   b61bc:	f7ff ffef 	bl	b619e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b61c0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b61c2:	b135      	cbz	r5, b61d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b61c4:	4628      	mov	r0, r5
   b61c6:	f7fd ffd3 	bl	b4170 <_ZNSt14_Function_baseD1Ev>
   b61ca:	2110      	movs	r1, #16
   b61cc:	4628      	mov	r0, r5
   b61ce:	f7fd ff64 	bl	b409a <_ZdlPvj>
   b61d2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b61d4:	b135      	cbz	r5, b61e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b61d6:	4628      	mov	r0, r5
   b61d8:	f7fd ffca 	bl	b4170 <_ZNSt14_Function_baseD1Ev>
   b61dc:	2110      	movs	r1, #16
   b61de:	4628      	mov	r0, r5
   b61e0:	f7fd ff5b 	bl	b409a <_ZdlPvj>
   b61e4:	4620      	mov	r0, r4
   b61e6:	2114      	movs	r1, #20
   b61e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b61ec:	f7fd bf55 	b.w	b409a <_ZdlPvj>
   b61f0:	bd38      	pop	{r3, r4, r5, pc}

000b61f2 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   b61f2:	b507      	push	{r0, r1, r2, lr}
   b61f4:	e9cd 1200 	strd	r1, r2, [sp]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b61f8:	6882      	ldr	r2, [r0, #8]
   b61fa:	b90a      	cbnz	r2, b6200 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   b61fc:	f001 f82c 	bl	b7258 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6200:	68c3      	ldr	r3, [r0, #12]
   b6202:	aa01      	add	r2, sp, #4
   b6204:	4669      	mov	r1, sp
   b6206:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   b6208:	b003      	add	sp, #12
   b620a:	f85d fb04 	ldr.w	pc, [sp], #4

000b620e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b620e:	680b      	ldr	r3, [r1, #0]
   b6210:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6212:	684b      	ldr	r3, [r1, #4]
   b6214:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6216:	b113      	cbz	r3, b621e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6218:	685a      	ldr	r2, [r3, #4]
   b621a:	3201      	adds	r2, #1
   b621c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b621e:	4770      	bx	lr

000b6220 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b6220:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6222:	4604      	mov	r4, r0
   b6224:	4668      	mov	r0, sp
   b6226:	460d      	mov	r5, r1
   b6228:	f7ff fff1 	bl	b620e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b622c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b622e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6230:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b6232:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6234:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6236:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6238:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b623a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b623c:	f7fe fec8 	bl	b4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b6240:	b135      	cbz	r5, b6250 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b6242:	1d28      	adds	r0, r5, #4
   b6244:	f7fe fec4 	bl	b4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6248:	2108      	movs	r1, #8
   b624a:	4628      	mov	r0, r5
   b624c:	f7fd ff25 	bl	b409a <_ZdlPvj>
        return p;
    }
   b6250:	4620      	mov	r0, r4
   b6252:	b003      	add	sp, #12
   b6254:	bd30      	pop	{r4, r5, pc}

000b6256 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b6256:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6258:	b510      	push	{r4, lr}
      if (_M_empty())
   b625a:	b90a      	cbnz	r2, b6260 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b625c:	f000 fffc 	bl	b7258 <_ZSt25__throw_bad_function_callv>
    }
   b6260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6264:	68c3      	ldr	r3, [r0, #12]
   b6266:	4718      	bx	r3

000b6268 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6268:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b626a:	6800      	ldr	r0, [r0, #0]
   b626c:	f100 0110 	add.w	r1, r0, #16
   b6270:	f7ff fff1 	bl	b6256 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6274:	bd08      	pop	{r3, pc}

000b6276 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b6276:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6278:	b510      	push	{r4, lr}
      if (_M_empty())
   b627a:	b90a      	cbnz	r2, b6280 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b627c:	f000 ffec 	bl	b7258 <_ZSt25__throw_bad_function_callv>
    }
   b6280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6284:	68c3      	ldr	r3, [r0, #12]
   b6286:	4718      	bx	r3

000b6288 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6288:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b628a:	6800      	ldr	r0, [r0, #0]
   b628c:	f100 0110 	add.w	r1, r0, #16
   b6290:	f7ff fff1 	bl	b6276 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6294:	bd08      	pop	{r3, pc}
	...

000b6298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6298:	b538      	push	{r3, r4, r5, lr}
   b629a:	2300      	movs	r3, #0
   b629c:	4604      	mov	r4, r0
   b629e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b62a0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b62a2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b62a4:	f7fd fef5 	bl	b4092 <_Znwj>
   b62a8:	b128      	cbz	r0, b62b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b62aa:	2301      	movs	r3, #1
   b62ac:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b62b0:	4b02      	ldr	r3, [pc, #8]	; (b62bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b62b2:	6003      	str	r3, [r0, #0]
   b62b4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b62b6:	6020      	str	r0, [r4, #0]
	}
   b62b8:	4620      	mov	r0, r4
   b62ba:	bd38      	pop	{r3, r4, r5, pc}
   b62bc:	000b813c 	.word	0x000b813c

000b62c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b62c0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b62c2:	2300      	movs	r3, #0
   b62c4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b62c6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b62c8:	4604      	mov	r4, r0
   b62ca:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b62cc:	b12b      	cbz	r3, b62da <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b62ce:	2202      	movs	r2, #2
   b62d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b62d2:	68eb      	ldr	r3, [r5, #12]
   b62d4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b62d6:	68ab      	ldr	r3, [r5, #8]
   b62d8:	60a3      	str	r3, [r4, #8]
    }
   b62da:	4620      	mov	r0, r4
   b62dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b62e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b62e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b62e2:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b62e4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b62e6:	4668      	mov	r0, sp
   b62e8:	f7ff ff4c 	bl	b6184 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b62ec:	f04f 0302 	mov.w	r3, #2
   b62f0:	e8d4 2f4f 	ldrexb	r2, [r4]
   b62f4:	2a00      	cmp	r2, #0
   b62f6:	d103      	bne.n	b6300 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b62f8:	e8c4 3f41 	strexb	r1, r3, [r4]
   b62fc:	2900      	cmp	r1, #0
   b62fe:	d1f7      	bne.n	b62f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b6300:	d125      	bne.n	b634e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b6302:	f104 050c 	add.w	r5, r4, #12
   b6306:	4669      	mov	r1, sp
   b6308:	4628      	mov	r0, r5
   b630a:	f7ff ff3b 	bl	b6184 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b630e:	f3bf 8f5b 	dmb	ish
   b6312:	2301      	movs	r3, #1
   b6314:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6316:	2000      	movs	r0, #0
   b6318:	f104 0308 	add.w	r3, r4, #8
   b631c:	f3bf 8f5b 	dmb	ish
   b6320:	e853 6f00 	ldrex	r6, [r3]
   b6324:	e843 0200 	strex	r2, r0, [r3]
   b6328:	2a00      	cmp	r2, #0
   b632a:	d1f9      	bne.n	b6320 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b632c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6330:	b16e      	cbz	r6, b634e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b6332:	f7fe fc43 	bl	b4bbc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6336:	b178      	cbz	r0, b6358 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6338:	4629      	mov	r1, r5
   b633a:	4630      	mov	r0, r6
   b633c:	f7ff ff8b 	bl	b6256 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b6340:	4630      	mov	r0, r6
   b6342:	f7fd ff15 	bl	b4170 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6346:	2110      	movs	r1, #16
   b6348:	4630      	mov	r0, r6
   b634a:	f7fd fea6 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b634e:	4668      	mov	r0, sp
   b6350:	f7ff ff25 	bl	b619e <_ZN8particle5ErrorD1Ev>
    }
   b6354:	b009      	add	sp, #36	; 0x24
   b6356:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6358:	4631      	mov	r1, r6
   b635a:	a802      	add	r0, sp, #8
   b635c:	f7ff ffb0 	bl	b62c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6360:	68e0      	ldr	r0, [r4, #12]
   b6362:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6366:	b108      	cbz	r0, b636c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b6368:	f001 fc2e 	bl	b7bc8 <strdup>
        type_(type) {
   b636c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b636e:	2010      	movs	r0, #16
   b6370:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6374:	f7fd fe8d 	bl	b4092 <_Znwj>
   b6378:	4605      	mov	r5, r0
   b637a:	b1e8      	cbz	r0, b63b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b637c:	2700      	movs	r7, #0
   b637e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6380:	2018      	movs	r0, #24
   b6382:	f7fd fe86 	bl	b4092 <_Znwj>
   b6386:	4604      	mov	r4, r0
   b6388:	b188      	cbz	r0, b63ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b638a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b638c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b638e:	a802      	add	r0, sp, #8
   b6390:	f7fe fe26 	bl	b4fe0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6394:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6396:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6398:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b639a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b639c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b639e:	a906      	add	r1, sp, #24
   b63a0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b63a2:	60e3      	str	r3, [r4, #12]
   b63a4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b63a8:	9205      	str	r2, [sp, #20]
   b63aa:	f7ff feeb 	bl	b6184 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b63ae:	4b08      	ldr	r3, [pc, #32]	; (b63d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b63b0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b63b2:	4b08      	ldr	r3, [pc, #32]	; (b63d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b63b4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b63b6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b63b8:	a806      	add	r0, sp, #24
   b63ba:	f7ff fef0 	bl	b619e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b63be:	a802      	add	r0, sp, #8
   b63c0:	f7fd fed6 	bl	b4170 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b63c4:	2200      	movs	r2, #0
   b63c6:	4629      	mov	r1, r5
   b63c8:	4803      	ldr	r0, [pc, #12]	; (b63d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b63ca:	f7fe fbff 	bl	b4bcc <application_thread_invoke>
   b63ce:	e7b7      	b.n	b6340 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b63d0:	000b6269 	.word	0x000b6269
   b63d4:	000b64ed 	.word	0x000b64ed
   b63d8:	000b69c5 	.word	0x000b69c5

000b63dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b63dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b63e0:	b08b      	sub	sp, #44	; 0x2c
   b63e2:	4605      	mov	r5, r0
   b63e4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b63e8:	460f      	mov	r7, r1
   b63ea:	4690      	mov	r8, r2
   b63ec:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b63ee:	f7fe fc71 	bl	b4cd4 <spark_cloud_flag_connected>
   b63f2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b63f4:	4683      	mov	fp, r0
   b63f6:	bb38      	cbnz	r0, b6448 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b63f8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b63fc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b63fe:	a905      	add	r1, sp, #20
   b6400:	4630      	mov	r0, r6
   b6402:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6406:	f7ff febd 	bl	b6184 <_ZN8particle5ErrorC1EOS0_>
   b640a:	2014      	movs	r0, #20
   b640c:	f7fd fe41 	bl	b4092 <_Znwj>
   b6410:	4604      	mov	r4, r0
   b6412:	b148      	cbz	r0, b6428 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6414:	2302      	movs	r3, #2
   b6416:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6418:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b641a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b641e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6420:	4631      	mov	r1, r6
   b6422:	300c      	adds	r0, #12
   b6424:	f7ff feae 	bl	b6184 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6428:	4628      	mov	r0, r5
	: __shared_count(__p)
   b642a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b642c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6430:	f7ff ff32 	bl	b6298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6434:	4630      	mov	r0, r6
   b6436:	f7ff feb2 	bl	b619e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b643a:	a805      	add	r0, sp, #20
   b643c:	f7ff feaf 	bl	b619e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b6440:	4628      	mov	r0, r5
   b6442:	b00b      	add	sp, #44	; 0x2c
   b6444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6448:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b644a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b644c:	2014      	movs	r0, #20
   b644e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b6452:	9307      	str	r3, [sp, #28]
   b6454:	f7fd fe1d 	bl	b4092 <_Znwj>
   b6458:	4601      	mov	r1, r0
   b645a:	b118      	cbz	r0, b6464 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b645c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6460:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6462:	7044      	strb	r4, [r0, #1]
   b6464:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6466:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6468:	f7ff ff16 	bl	b6298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b646c:	4b1e      	ldr	r3, [pc, #120]	; (b64e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b646e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b6470:	2008      	movs	r0, #8
   b6472:	f7fd fe0e 	bl	b4092 <_Znwj>
   b6476:	4604      	mov	r4, r0
   b6478:	b110      	cbz	r0, b6480 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b647a:	a903      	add	r1, sp, #12
   b647c:	f7ff fec7 	bl	b620e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6480:	9600      	str	r6, [sp, #0]
   b6482:	fa5f f38a 	uxtb.w	r3, sl
   b6486:	464a      	mov	r2, r9
   b6488:	4641      	mov	r1, r8
   b648a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b648c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b648e:	f7fe fc29 	bl	b4ce4 <spark_send_event>
   b6492:	b9b8      	cbnz	r0, b64c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6494:	9b03      	ldr	r3, [sp, #12]
   b6496:	785b      	ldrb	r3, [r3, #1]
   b6498:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b649c:	b993      	cbnz	r3, b64c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b649e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b64a2:	a905      	add	r1, sp, #20
   b64a4:	a803      	add	r0, sp, #12
   b64a6:	9205      	str	r2, [sp, #20]
   b64a8:	f8ad 3018 	strh.w	r3, [sp, #24]
   b64ac:	f7ff ff18 	bl	b62e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b64b0:	a805      	add	r0, sp, #20
   b64b2:	f7ff fe74 	bl	b619e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b64b6:	a805      	add	r0, sp, #20
   b64b8:	9909      	ldr	r1, [sp, #36]	; 0x24
   b64ba:	f7ff feb1 	bl	b6220 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b64be:	a806      	add	r0, sp, #24
   b64c0:	f7fe fd86 	bl	b4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b64c4:	a903      	add	r1, sp, #12
   b64c6:	a805      	add	r0, sp, #20
   b64c8:	f7ff fea1 	bl	b620e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b64cc:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b64ce:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b64d0:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b64d2:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b64d4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b64d6:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b64d8:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b64da:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b64dc:	f7fe fd78 	bl	b4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b64e0:	a804      	add	r0, sp, #16
   b64e2:	f7fe fd75 	bl	b4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b64e6:	e7ab      	b.n	b6440 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b64e8:	000b6569 	.word	0x000b6569

000b64ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b64ec:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b64ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b64f0:	4605      	mov	r5, r0
	switch (__op)
   b64f2:	d103      	bne.n	b64fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b64f4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b64f6:	6003      	str	r3, [r0, #0]
      }
   b64f8:	2000      	movs	r0, #0
   b64fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b64fc:	2a02      	cmp	r2, #2
   b64fe:	d010      	beq.n	b6522 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6500:	2a03      	cmp	r2, #3
   b6502:	d1f9      	bne.n	b64f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6504:	6804      	ldr	r4, [r0, #0]
   b6506:	2c00      	cmp	r4, #0
   b6508:	d0f6      	beq.n	b64f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b650a:	f104 0010 	add.w	r0, r4, #16
   b650e:	f7ff fe46 	bl	b619e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6512:	4620      	mov	r0, r4
   b6514:	f7fd fe2c 	bl	b4170 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6518:	2118      	movs	r1, #24
   b651a:	4620      	mov	r0, r4
   b651c:	f7fd fdbd 	bl	b409a <_ZdlPvj>
   b6520:	e7ea      	b.n	b64f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6522:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6524:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6526:	f7fd fdb4 	bl	b4092 <_Znwj>
   b652a:	4604      	mov	r4, r0
   b652c:	b150      	cbz	r0, b6544 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b652e:	4631      	mov	r1, r6
   b6530:	f7ff fec6 	bl	b62c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6534:	6930      	ldr	r0, [r6, #16]
   b6536:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b653a:	b108      	cbz	r0, b6540 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b653c:	f001 fb44 	bl	b7bc8 <strdup>
        type_(type) {
   b6540:	6120      	str	r0, [r4, #16]
   b6542:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6544:	602c      	str	r4, [r5, #0]
	}
   b6546:	e7d7      	b.n	b64f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6548 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6548:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b654a:	2300      	movs	r3, #0
   b654c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b654e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6550:	4604      	mov	r4, r0
   b6552:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6554:	b12b      	cbz	r3, b6562 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6556:	2202      	movs	r2, #2
   b6558:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b655a:	68eb      	ldr	r3, [r5, #12]
   b655c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b655e:	68ab      	ldr	r3, [r5, #8]
   b6560:	60a3      	str	r3, [r4, #8]
    }
   b6562:	4620      	mov	r0, r4
   b6564:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6568 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6568:	b5f0      	push	{r4, r5, r6, r7, lr}
   b656a:	b089      	sub	sp, #36	; 0x24
   b656c:	4604      	mov	r4, r0
   b656e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6570:	a801      	add	r0, sp, #4
   b6572:	4611      	mov	r1, r2
   b6574:	f7ff fe54 	bl	b6220 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6578:	b1a4      	cbz	r4, b65a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b657a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b657c:	b11d      	cbz	r5, b6586 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b657e:	4628      	mov	r0, r5
   b6580:	f001 fb22 	bl	b7bc8 <strdup>
   b6584:	4605      	mov	r5, r0
   b6586:	a801      	add	r0, sp, #4
   b6588:	a903      	add	r1, sp, #12
        type_(type) {
   b658a:	9503      	str	r5, [sp, #12]
   b658c:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6590:	f7ff fea6 	bl	b62e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6594:	a803      	add	r0, sp, #12
   b6596:	f7ff fe02 	bl	b619e <_ZN8particle5ErrorD1Ev>
   b659a:	a802      	add	r0, sp, #8
   b659c:	f7fe fd18 	bl	b4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b65a0:	b009      	add	sp, #36	; 0x24
   b65a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b65a4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b65a6:	2301      	movs	r3, #1
   b65a8:	e8d5 2f4f 	ldrexb	r2, [r5]
   b65ac:	2a00      	cmp	r2, #0
   b65ae:	d103      	bne.n	b65b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b65b0:	e8c5 3f41 	strexb	r1, r3, [r5]
   b65b4:	2900      	cmp	r1, #0
   b65b6:	d1f7      	bne.n	b65a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b65b8:	d1ef      	bne.n	b659a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b65ba:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b65bc:	f3bf 8f5b 	dmb	ish
   b65c0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b65c2:	1d2b      	adds	r3, r5, #4
   b65c4:	f3bf 8f5b 	dmb	ish
   b65c8:	e853 6f00 	ldrex	r6, [r3]
   b65cc:	e843 4200 	strex	r2, r4, [r3]
   b65d0:	2a00      	cmp	r2, #0
   b65d2:	d1f9      	bne.n	b65c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b65d4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b65d8:	2e00      	cmp	r6, #0
   b65da:	d0de      	beq.n	b659a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b65dc:	4620      	mov	r0, r4
   b65de:	f7fe faed 	bl	b4bbc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b65e2:	4607      	mov	r7, r0
   b65e4:	b160      	cbz	r0, b6600 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b65e6:	f105 010c 	add.w	r1, r5, #12
   b65ea:	4630      	mov	r0, r6
   b65ec:	f7ff fe43 	bl	b6276 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b65f0:	4630      	mov	r0, r6
   b65f2:	f7fd fdbd 	bl	b4170 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b65f6:	2110      	movs	r1, #16
   b65f8:	4630      	mov	r0, r6
   b65fa:	f7fd fd4e 	bl	b409a <_ZdlPvj>
   b65fe:	e7cc      	b.n	b659a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6600:	4631      	mov	r1, r6
   b6602:	a803      	add	r0, sp, #12
   b6604:	f7ff ffa0 	bl	b6548 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6608:	7b2b      	ldrb	r3, [r5, #12]
   b660a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b660e:	2010      	movs	r0, #16
   b6610:	f7fd fd3f 	bl	b4092 <_Znwj>
   b6614:	4605      	mov	r5, r0
   b6616:	b1d0      	cbz	r0, b664e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6618:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b661a:	2014      	movs	r0, #20
   b661c:	f7fd fd39 	bl	b4092 <_Znwj>
   b6620:	4604      	mov	r4, r0
   b6622:	b178      	cbz	r0, b6644 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6624:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6626:	4601      	mov	r1, r0
   b6628:	a803      	add	r0, sp, #12
   b662a:	f7fe fcd9 	bl	b4fe0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b662e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6630:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6632:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6634:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6636:	9205      	str	r2, [sp, #20]
   b6638:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b663a:	60e3      	str	r3, [r4, #12]
   b663c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6640:	9206      	str	r2, [sp, #24]
   b6642:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6644:	4b06      	ldr	r3, [pc, #24]	; (b6660 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6646:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6648:	4b06      	ldr	r3, [pc, #24]	; (b6664 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b664a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b664c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b664e:	a803      	add	r0, sp, #12
   b6650:	f7fd fd8e 	bl	b4170 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6654:	2200      	movs	r2, #0
   b6656:	4629      	mov	r1, r5
   b6658:	4803      	ldr	r0, [pc, #12]	; (b6668 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b665a:	f7fe fab7 	bl	b4bcc <application_thread_invoke>
   b665e:	e7c7      	b.n	b65f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6660:	000b6289 	.word	0x000b6289
   b6664:	000b666d 	.word	0x000b666d
   b6668:	000b69c5 	.word	0x000b69c5

000b666c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b666c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b666e:	b570      	push	{r4, r5, r6, lr}
   b6670:	4604      	mov	r4, r0
	switch (__op)
   b6672:	d103      	bne.n	b667c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6674:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6676:	6003      	str	r3, [r0, #0]
      }
   b6678:	2000      	movs	r0, #0
   b667a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b667c:	2a02      	cmp	r2, #2
   b667e:	d00c      	beq.n	b669a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6680:	2a03      	cmp	r2, #3
   b6682:	d1f9      	bne.n	b6678 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6684:	6804      	ldr	r4, [r0, #0]
   b6686:	2c00      	cmp	r4, #0
   b6688:	d0f6      	beq.n	b6678 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b668a:	4620      	mov	r0, r4
   b668c:	f7fd fd70 	bl	b4170 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6690:	2114      	movs	r1, #20
   b6692:	4620      	mov	r0, r4
   b6694:	f7fd fd01 	bl	b409a <_ZdlPvj>
   b6698:	e7ee      	b.n	b6678 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b669a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b669c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b669e:	f7fd fcf8 	bl	b4092 <_Znwj>
   b66a2:	4605      	mov	r5, r0
   b66a4:	b120      	cbz	r0, b66b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b66a6:	4631      	mov	r1, r6
   b66a8:	f7ff ff4e 	bl	b6548 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b66ac:	7c33      	ldrb	r3, [r6, #16]
   b66ae:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b66b0:	6025      	str	r5, [r4, #0]
	}
   b66b2:	e7e1      	b.n	b6678 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b66b4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b66b4:	4770      	bx	lr

000b66b6 <_ZN9IPAddressD0Ev>:
   b66b6:	b510      	push	{r4, lr}
   b66b8:	2118      	movs	r1, #24
   b66ba:	4604      	mov	r4, r0
   b66bc:	f7fd fced 	bl	b409a <_ZdlPvj>
   b66c0:	4620      	mov	r0, r4
   b66c2:	bd10      	pop	{r4, pc}

000b66c4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b66c4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b66c6:	7d03      	ldrb	r3, [r0, #20]
   b66c8:	2b06      	cmp	r3, #6
{
   b66ca:	b08d      	sub	sp, #52	; 0x34
   b66cc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66ce:	f100 0704 	add.w	r7, r0, #4
   b66d2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b66d6:	d012      	beq.n	b66fe <_ZNK9IPAddress7printToER5Print+0x3a>
   b66d8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b66dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b66e0:	220a      	movs	r2, #10
   b66e2:	4630      	mov	r0, r6
   b66e4:	f7fe fccd 	bl	b5082 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b66e8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b66ea:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b66ec:	d019      	beq.n	b6722 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b66ee:	2c00      	cmp	r4, #0
   b66f0:	d0f4      	beq.n	b66dc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b66f2:	212e      	movs	r1, #46	; 0x2e
   b66f4:	4630      	mov	r0, r6
   b66f6:	f7fe fcb5 	bl	b5064 <_ZN5Print5printEc>
   b66fa:	4404      	add	r4, r0
   b66fc:	e7ee      	b.n	b66dc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66fe:	232f      	movs	r3, #47	; 0x2f
   b6700:	466a      	mov	r2, sp
   b6702:	4639      	mov	r1, r7
   b6704:	200a      	movs	r0, #10
		buf[0] = 0;
   b6706:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b670a:	f7fe f93f 	bl	b498c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b670e:	4668      	mov	r0, sp
   b6710:	f001 fa77 	bl	b7c02 <strlen>
   b6714:	6833      	ldr	r3, [r6, #0]
   b6716:	4602      	mov	r2, r0
   b6718:	68db      	ldr	r3, [r3, #12]
   b671a:	4669      	mov	r1, sp
   b671c:	4630      	mov	r0, r6
   b671e:	4798      	blx	r3
   b6720:	4604      	mov	r4, r0
    }
    return n;
}
   b6722:	4620      	mov	r0, r4
   b6724:	b00d      	add	sp, #52	; 0x34
   b6726:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6728 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6728:	b510      	push	{r4, lr}
   b672a:	4b05      	ldr	r3, [pc, #20]	; (b6740 <_ZN9IPAddressC1Ev+0x18>)
   b672c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b672e:	2211      	movs	r2, #17
   b6730:	f840 3b04 	str.w	r3, [r0], #4
   b6734:	2100      	movs	r1, #0
   b6736:	f001 f9e7 	bl	b7b08 <memset>
}
   b673a:	4620      	mov	r0, r4
   b673c:	bd10      	pop	{r4, pc}
   b673e:	bf00      	nop
   b6740:	000b8158 	.word	0x000b8158

000b6744 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6744:	4603      	mov	r3, r0
   b6746:	4a07      	ldr	r2, [pc, #28]	; (b6764 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6748:	b510      	push	{r4, lr}
   b674a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b674e:	f101 0210 	add.w	r2, r1, #16
   b6752:	f851 4b04 	ldr.w	r4, [r1], #4
   b6756:	f843 4b04 	str.w	r4, [r3], #4
   b675a:	4291      	cmp	r1, r2
   b675c:	d1f9      	bne.n	b6752 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b675e:	780a      	ldrb	r2, [r1, #0]
   b6760:	701a      	strb	r2, [r3, #0]
}
   b6762:	bd10      	pop	{r4, pc}
   b6764:	000b8158 	.word	0x000b8158

000b6768 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6768:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b676a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b676e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6772:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6776:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b677a:	2304      	movs	r3, #4
   b677c:	6041      	str	r1, [r0, #4]
   b677e:	7503      	strb	r3, [r0, #20]
}
   b6780:	bd10      	pop	{r4, pc}
	...

000b6784 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6784:	b507      	push	{r0, r1, r2, lr}
   b6786:	4b06      	ldr	r3, [pc, #24]	; (b67a0 <_ZN9IPAddressC1EPKh+0x1c>)
   b6788:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b678a:	78cb      	ldrb	r3, [r1, #3]
   b678c:	9300      	str	r3, [sp, #0]
   b678e:	788b      	ldrb	r3, [r1, #2]
   b6790:	784a      	ldrb	r2, [r1, #1]
   b6792:	7809      	ldrb	r1, [r1, #0]
   b6794:	f7ff ffe8 	bl	b6768 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6798:	b003      	add	sp, #12
   b679a:	f85d fb04 	ldr.w	pc, [sp], #4
   b679e:	bf00      	nop
   b67a0:	000b8158 	.word	0x000b8158

000b67a4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b67a4:	7441      	strb	r1, [r0, #17]
}
   b67a6:	4770      	bx	lr

000b67a8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b67a8:	4770      	bx	lr

000b67aa <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b67aa:	4770      	bx	lr

000b67ac <_ZN9USBSerial4readEv>:
{
   b67ac:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b67ae:	2100      	movs	r1, #0
   b67b0:	7c00      	ldrb	r0, [r0, #16]
   b67b2:	f7fe f9b3 	bl	b4b1c <HAL_USB_USART_Receive_Data>
}
   b67b6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b67ba:	bd08      	pop	{r3, pc}

000b67bc <_ZN9USBSerial4peekEv>:
{
   b67bc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b67be:	2101      	movs	r1, #1
   b67c0:	7c00      	ldrb	r0, [r0, #16]
   b67c2:	f7fe f9ab 	bl	b4b1c <HAL_USB_USART_Receive_Data>
}
   b67c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b67ca:	bd08      	pop	{r3, pc}

000b67cc <_ZN9USBSerial17availableForWriteEv>:
{
   b67cc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b67ce:	7c00      	ldrb	r0, [r0, #16]
   b67d0:	f7fe f99c 	bl	b4b0c <HAL_USB_USART_Available_Data_For_Write>
}
   b67d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b67d8:	bd08      	pop	{r3, pc}

000b67da <_ZN9USBSerial9availableEv>:
{
   b67da:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b67dc:	7c00      	ldrb	r0, [r0, #16]
   b67de:	f7fe f98d 	bl	b4afc <HAL_USB_USART_Available_Data>
}
   b67e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b67e6:	bd08      	pop	{r3, pc}

000b67e8 <_ZN9USBSerial5writeEh>:
{
   b67e8:	b513      	push	{r0, r1, r4, lr}
   b67ea:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b67ec:	7c00      	ldrb	r0, [r0, #16]
{
   b67ee:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b67f0:	f7fe f98c 	bl	b4b0c <HAL_USB_USART_Available_Data_For_Write>
   b67f4:	2800      	cmp	r0, #0
   b67f6:	9901      	ldr	r1, [sp, #4]
   b67f8:	dc01      	bgt.n	b67fe <_ZN9USBSerial5writeEh+0x16>
   b67fa:	7c60      	ldrb	r0, [r4, #17]
   b67fc:	b120      	cbz	r0, b6808 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b67fe:	7c20      	ldrb	r0, [r4, #16]
   b6800:	f7fe f994 	bl	b4b2c <HAL_USB_USART_Send_Data>
   b6804:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6808:	b002      	add	sp, #8
   b680a:	bd10      	pop	{r4, pc}

000b680c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b680c:	7c00      	ldrb	r0, [r0, #16]
   b680e:	f7fe b995 	b.w	b4b3c <HAL_USB_USART_Flush_Data>

000b6812 <_ZN9USBSerialD0Ev>:
   b6812:	b510      	push	{r4, lr}
   b6814:	2114      	movs	r1, #20
   b6816:	4604      	mov	r4, r0
   b6818:	f7fd fc3f 	bl	b409a <_ZdlPvj>
   b681c:	4620      	mov	r0, r4
   b681e:	bd10      	pop	{r4, pc}

000b6820 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6820:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6826:	4604      	mov	r4, r0
   b6828:	4608      	mov	r0, r1
   b682a:	2100      	movs	r1, #0
   b682c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6830:	4b04      	ldr	r3, [pc, #16]	; (b6844 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6832:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6834:	2301      	movs	r3, #1
  _serial = serial;
   b6836:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6838:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b683a:	4611      	mov	r1, r2
   b683c:	f7fe f946 	bl	b4acc <HAL_USB_USART_Init>
}
   b6840:	4620      	mov	r0, r4
   b6842:	bd10      	pop	{r4, pc}
   b6844:	000b816c 	.word	0x000b816c

000b6848 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6848:	7c00      	ldrb	r0, [r0, #16]
   b684a:	2200      	movs	r2, #0
   b684c:	f7fe b946 	b.w	b4adc <HAL_USB_USART_Begin>

000b6850 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b6850:	7c00      	ldrb	r0, [r0, #16]
   b6852:	f7fe b94b 	b.w	b4aec <HAL_USB_USART_End>

000b6856 <_Z19acquireSerialBufferv>:
{
   b6856:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6858:	2214      	movs	r2, #20
{
   b685a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b685c:	2100      	movs	r1, #0
   b685e:	f001 f953 	bl	b7b08 <memset>
}
   b6862:	4620      	mov	r0, r4
   b6864:	bd10      	pop	{r4, pc}
	...

000b6868 <_Z16_fetch_usbserialv>:
{
   b6868:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b686a:	4c0f      	ldr	r4, [pc, #60]	; (b68a8 <_Z16_fetch_usbserialv+0x40>)
{
   b686c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b686e:	a803      	add	r0, sp, #12
   b6870:	f7ff fff1 	bl	b6856 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6874:	7821      	ldrb	r1, [r4, #0]
   b6876:	f3bf 8f5b 	dmb	ish
   b687a:	f011 0101 	ands.w	r1, r1, #1
   b687e:	d10f      	bne.n	b68a0 <_Z16_fetch_usbserialv+0x38>
   b6880:	4620      	mov	r0, r4
   b6882:	9101      	str	r1, [sp, #4]
   b6884:	f7fd fc18 	bl	b40b8 <__cxa_guard_acquire>
   b6888:	9901      	ldr	r1, [sp, #4]
   b688a:	b148      	cbz	r0, b68a0 <_Z16_fetch_usbserialv+0x38>
   b688c:	aa03      	add	r2, sp, #12
   b688e:	4807      	ldr	r0, [pc, #28]	; (b68ac <_Z16_fetch_usbserialv+0x44>)
   b6890:	f7ff ffc6 	bl	b6820 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6894:	4620      	mov	r0, r4
   b6896:	f7fd fc14 	bl	b40c2 <__cxa_guard_release>
   b689a:	4805      	ldr	r0, [pc, #20]	; (b68b0 <_Z16_fetch_usbserialv+0x48>)
   b689c:	f001 f8fe 	bl	b7a9c <atexit>
	return _usbserial;
}
   b68a0:	4802      	ldr	r0, [pc, #8]	; (b68ac <_Z16_fetch_usbserialv+0x44>)
   b68a2:	b008      	add	sp, #32
   b68a4:	bd10      	pop	{r4, pc}
   b68a6:	bf00      	nop
   b68a8:	2003e6f4 	.word	0x2003e6f4
   b68ac:	2003e6f8 	.word	0x2003e6f8
   b68b0:	000b67a9 	.word	0x000b67a9

000b68b4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b68b4:	4700      	bx	r0
	...

000b68b8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b68b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b68bc:	2400      	movs	r4, #0
{
   b68be:	461d      	mov	r5, r3
   b68c0:	460f      	mov	r7, r1
   b68c2:	4690      	mov	r8, r2
   b68c4:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b68c6:	f7fe f821 	bl	b490c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b68ca:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b68cc:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b68d0:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b68d4:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b68d8:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b68dc:	bfa2      	ittt	ge
   b68de:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b68e2:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b68e6:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b68e8:	4907      	ldr	r1, [pc, #28]	; (b6908 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b68ea:	9400      	str	r4, [sp, #0]
   b68ec:	4643      	mov	r3, r8
   b68ee:	463a      	mov	r2, r7
   b68f0:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b68f2:	bfa8      	it	ge
   b68f4:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b68f8:	f7fe f800 	bl	b48fc <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b68fc:	fab0 f080 	clz	r0, r0
   b6900:	0940      	lsrs	r0, r0, #5
   b6902:	b004      	add	sp, #16
   b6904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6908:	000b68b5 	.word	0x000b68b5

000b690c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b690c:	4770      	bx	lr

000b690e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b690e:	7441      	strb	r1, [r0, #17]
}
   b6910:	4770      	bx	lr

000b6912 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6912:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6914:	7c00      	ldrb	r0, [r0, #16]
   b6916:	f7fe f879 	bl	b4a0c <hal_usart_available_data_for_write>
}
   b691a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b691e:	bd08      	pop	{r3, pc}

000b6920 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6920:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6922:	7c00      	ldrb	r0, [r0, #16]
   b6924:	f7fe f84a 	bl	b49bc <hal_usart_available>
}
   b6928:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b692c:	bd08      	pop	{r3, pc}

000b692e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b692e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6930:	7c00      	ldrb	r0, [r0, #16]
   b6932:	f7fe f853 	bl	b49dc <hal_usart_peek>
}
   b6936:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b693a:	bd08      	pop	{r3, pc}

000b693c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b693c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b693e:	7c00      	ldrb	r0, [r0, #16]
   b6940:	f7fe f844 	bl	b49cc <hal_usart_read>
}
   b6944:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6948:	bd08      	pop	{r3, pc}

000b694a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b694a:	7c00      	ldrb	r0, [r0, #16]
   b694c:	f7fe b84e 	b.w	b49ec <hal_usart_flush>

000b6950 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6950:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6952:	7c45      	ldrb	r5, [r0, #17]
{
   b6954:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6956:	b12d      	cbz	r5, b6964 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6958:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b695a:	b003      	add	sp, #12
   b695c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6960:	f7fe b824 	b.w	b49ac <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6964:	7c00      	ldrb	r0, [r0, #16]
   b6966:	9101      	str	r1, [sp, #4]
   b6968:	f7fe f850 	bl	b4a0c <hal_usart_available_data_for_write>
   b696c:	2800      	cmp	r0, #0
   b696e:	9901      	ldr	r1, [sp, #4]
   b6970:	dcf2      	bgt.n	b6958 <_ZN11USARTSerial5writeEh+0x8>
}
   b6972:	4628      	mov	r0, r5
   b6974:	b003      	add	sp, #12
   b6976:	bd30      	pop	{r4, r5, pc}

000b6978 <_ZN11USARTSerialD0Ev>:
   b6978:	b510      	push	{r4, lr}
   b697a:	2114      	movs	r1, #20
   b697c:	4604      	mov	r4, r0
   b697e:	f7fd fb8c 	bl	b409a <_ZdlPvj>
   b6982:	4620      	mov	r0, r4
   b6984:	bd10      	pop	{r4, pc}
	...

000b6988 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6988:	b510      	push	{r4, lr}
   b698a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b698e:	4604      	mov	r4, r0
   b6990:	4608      	mov	r0, r1
   b6992:	4611      	mov	r1, r2
   b6994:	2200      	movs	r2, #0
   b6996:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b699a:	4b04      	ldr	r3, [pc, #16]	; (b69ac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b699c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b699e:	2301      	movs	r3, #1
  _serial = serial;
   b69a0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b69a2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b69a4:	f7fe f842 	bl	b4a2c <hal_usart_init_ex>
}
   b69a8:	4620      	mov	r0, r4
   b69aa:	bd10      	pop	{r4, pc}
   b69ac:	000b819c 	.word	0x000b819c

000b69b0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b69b0:	7c00      	ldrb	r0, [r0, #16]
   b69b2:	2300      	movs	r3, #0
   b69b4:	f7fe b832 	b.w	b4a1c <hal_usart_begin_config>

000b69b8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b69b8:	2200      	movs	r2, #0
   b69ba:	f7ff bff9 	b.w	b69b0 <_ZN11USARTSerial5beginEmm>

000b69be <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b69be:	7c00      	ldrb	r0, [r0, #16]
   b69c0:	f7fd bfec 	b.w	b499c <hal_usart_end>

000b69c4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b69c4:	b510      	push	{r4, lr}
      if (_M_empty())
   b69c6:	6883      	ldr	r3, [r0, #8]
   b69c8:	4604      	mov	r4, r0
   b69ca:	b90b      	cbnz	r3, b69d0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b69cc:	f000 fc44 	bl	b7258 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b69d0:	68c3      	ldr	r3, [r0, #12]
   b69d2:	4798      	blx	r3
      if (_M_manager)
   b69d4:	68a3      	ldr	r3, [r4, #8]
   b69d6:	b11b      	cbz	r3, b69e0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b69d8:	2203      	movs	r2, #3
   b69da:	4621      	mov	r1, r4
   b69dc:	4620      	mov	r0, r4
   b69de:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b69e0:	4620      	mov	r0, r4
   b69e2:	2110      	movs	r1, #16
}
   b69e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b69e8:	f7fd bb57 	b.w	b409a <_ZdlPvj>

000b69ec <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b69ec:	4770      	bx	lr

000b69ee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b69ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b69f0:	4606      	mov	r6, r0
   b69f2:	4615      	mov	r5, r2
   b69f4:	460c      	mov	r4, r1
   b69f6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b69f8:	42bc      	cmp	r4, r7
   b69fa:	d006      	beq.n	b6a0a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b69fc:	6833      	ldr	r3, [r6, #0]
   b69fe:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6a02:	689b      	ldr	r3, [r3, #8]
   b6a04:	4630      	mov	r0, r6
   b6a06:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6a08:	e7f6      	b.n	b69f8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6a0a:	4628      	mov	r0, r5
   b6a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6a0e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6a0e:	7c00      	ldrb	r0, [r0, #16]
   b6a10:	2200      	movs	r2, #0
   b6a12:	f7fe b813 	b.w	b4a3c <hal_i2c_write>

000b6a16 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6a16:	7c00      	ldrb	r0, [r0, #16]
   b6a18:	2100      	movs	r1, #0
   b6a1a:	f7fe b817 	b.w	b4a4c <hal_i2c_available>

000b6a1e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6a1e:	7c00      	ldrb	r0, [r0, #16]
   b6a20:	2100      	movs	r1, #0
   b6a22:	f7fe b81b 	b.w	b4a5c <hal_i2c_read>

000b6a26 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6a26:	7c00      	ldrb	r0, [r0, #16]
   b6a28:	2100      	movs	r1, #0
   b6a2a:	f7fe b81f 	b.w	b4a6c <hal_i2c_peek>

000b6a2e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6a2e:	7c00      	ldrb	r0, [r0, #16]
   b6a30:	2100      	movs	r1, #0
   b6a32:	f7fe b823 	b.w	b4a7c <hal_i2c_flush>

000b6a36 <_ZN7TwoWireD0Ev>:
   b6a36:	b510      	push	{r4, lr}
   b6a38:	2114      	movs	r1, #20
   b6a3a:	4604      	mov	r4, r0
   b6a3c:	f7fd fb2d 	bl	b409a <_ZdlPvj>
   b6a40:	4620      	mov	r0, r4
   b6a42:	bd10      	pop	{r4, pc}

000b6a44 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6a44:	b538      	push	{r3, r4, r5, lr}
   b6a46:	4604      	mov	r4, r0
   b6a48:	4615      	mov	r5, r2
   b6a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6a4e:	2200      	movs	r2, #0
   b6a50:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6a54:	4b09      	ldr	r3, [pc, #36]	; (b6a7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6a56:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6a58:	4608      	mov	r0, r1
   b6a5a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6a5c:	4629      	mov	r1, r5
   b6a5e:	f7fe f81d 	bl	b4a9c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6a62:	30bf      	adds	r0, #191	; 0xbf
   b6a64:	d108      	bne.n	b6a78 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6a66:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6a68:	07db      	lsls	r3, r3, #31
   b6a6a:	d505      	bpl.n	b6a78 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6a6c:	6868      	ldr	r0, [r5, #4]
   b6a6e:	f7fe f959 	bl	b4d24 <free>
    free(conf.tx_buffer);
   b6a72:	68e8      	ldr	r0, [r5, #12]
   b6a74:	f7fe f956 	bl	b4d24 <free>
}
   b6a78:	4620      	mov	r0, r4
   b6a7a:	bd38      	pop	{r3, r4, r5, pc}
   b6a7c:	000b81cc 	.word	0x000b81cc

000b6a80 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6a80:	2200      	movs	r2, #0
   b6a82:	6840      	ldr	r0, [r0, #4]
   b6a84:	4611      	mov	r1, r2
   b6a86:	f7fe b8d5 	b.w	b4c34 <network_ready>

000b6a8a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6a8a:	2200      	movs	r2, #0
   b6a8c:	6840      	ldr	r0, [r0, #4]
   b6a8e:	4611      	mov	r1, r2
   b6a90:	f7fe b8f0 	b.w	b4c74 <network_listening>

000b6a94 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6a94:	2200      	movs	r2, #0
   b6a96:	6840      	ldr	r0, [r0, #4]
   b6a98:	4611      	mov	r1, r2
   b6a9a:	f7fe b8fb 	b.w	b4c94 <network_get_listen_timeout>

000b6a9e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6a9e:	6840      	ldr	r0, [r0, #4]
   b6aa0:	2200      	movs	r2, #0
   b6aa2:	f7fe b8ef 	b.w	b4c84 <network_set_listen_timeout>

000b6aa6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6aa6:	6840      	ldr	r0, [r0, #4]
   b6aa8:	2200      	movs	r2, #0
   b6aaa:	f081 0101 	eor.w	r1, r1, #1
   b6aae:	f7fe b8d9 	b.w	b4c64 <network_listen>

000b6ab2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6ab2:	2300      	movs	r3, #0
   b6ab4:	6840      	ldr	r0, [r0, #4]
   b6ab6:	461a      	mov	r2, r3
   b6ab8:	4619      	mov	r1, r3
   b6aba:	f7fe b8cb 	b.w	b4c54 <network_off>

000b6abe <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6abe:	2300      	movs	r3, #0
   b6ac0:	6840      	ldr	r0, [r0, #4]
   b6ac2:	461a      	mov	r2, r3
   b6ac4:	4619      	mov	r1, r3
   b6ac6:	f7fe b8bd 	b.w	b4c44 <network_on>

000b6aca <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6aca:	2200      	movs	r2, #0
   b6acc:	6840      	ldr	r0, [r0, #4]
   b6ace:	4611      	mov	r1, r2
   b6ad0:	f7fe b8a0 	b.w	b4c14 <network_connecting>

000b6ad4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6ad4:	6840      	ldr	r0, [r0, #4]
   b6ad6:	2200      	movs	r2, #0
   b6ad8:	2102      	movs	r1, #2
   b6ada:	f7fe b8a3 	b.w	b4c24 <network_disconnect>

000b6ade <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6ade:	2300      	movs	r3, #0
   b6ae0:	6840      	ldr	r0, [r0, #4]
   b6ae2:	461a      	mov	r2, r3
   b6ae4:	f7fe b88e 	b.w	b4c04 <network_connect>

000b6ae8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6ae8:	4b02      	ldr	r3, [pc, #8]	; (b6af4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6aea:	2204      	movs	r2, #4
   b6aec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6aee:	4a02      	ldr	r2, [pc, #8]	; (b6af8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6af0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6af2:	4770      	bx	lr
   b6af4:	2003e70c 	.word	0x2003e70c
   b6af8:	000b81f4 	.word	0x000b81f4

000b6afc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6afc:	2300      	movs	r3, #0
   b6afe:	6840      	ldr	r0, [r0, #4]
   b6b00:	461a      	mov	r2, r3
   b6b02:	f7fe b87f 	b.w	b4c04 <network_connect>

000b6b06 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6b06:	6840      	ldr	r0, [r0, #4]
   b6b08:	2200      	movs	r2, #0
   b6b0a:	2102      	movs	r1, #2
   b6b0c:	f7fe b88a 	b.w	b4c24 <network_disconnect>

000b6b10 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6b10:	2200      	movs	r2, #0
   b6b12:	6840      	ldr	r0, [r0, #4]
   b6b14:	4611      	mov	r1, r2
   b6b16:	f7fe b87d 	b.w	b4c14 <network_connecting>

000b6b1a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6b1a:	2200      	movs	r2, #0
   b6b1c:	6840      	ldr	r0, [r0, #4]
   b6b1e:	4611      	mov	r1, r2
   b6b20:	f7fe b888 	b.w	b4c34 <network_ready>

000b6b24 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6b24:	2300      	movs	r3, #0
   b6b26:	6840      	ldr	r0, [r0, #4]
   b6b28:	461a      	mov	r2, r3
   b6b2a:	4619      	mov	r1, r3
   b6b2c:	f7fe b88a 	b.w	b4c44 <network_on>

000b6b30 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6b30:	2300      	movs	r3, #0
   b6b32:	6840      	ldr	r0, [r0, #4]
   b6b34:	461a      	mov	r2, r3
   b6b36:	4619      	mov	r1, r3
   b6b38:	f7fe b88c 	b.w	b4c54 <network_off>

000b6b3c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6b3c:	6840      	ldr	r0, [r0, #4]
   b6b3e:	2100      	movs	r1, #0
   b6b40:	f7fe b8b0 	b.w	b4ca4 <network_is_on>

000b6b44 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6b44:	6840      	ldr	r0, [r0, #4]
   b6b46:	2100      	movs	r1, #0
   b6b48:	f7fe b8b4 	b.w	b4cb4 <network_is_off>

000b6b4c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6b4c:	6840      	ldr	r0, [r0, #4]
   b6b4e:	2200      	movs	r2, #0
   b6b50:	f081 0101 	eor.w	r1, r1, #1
   b6b54:	f7fe b886 	b.w	b4c64 <network_listen>

000b6b58 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6b58:	6840      	ldr	r0, [r0, #4]
   b6b5a:	2200      	movs	r2, #0
   b6b5c:	f7fe b892 	b.w	b4c84 <network_set_listen_timeout>

000b6b60 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6b60:	2200      	movs	r2, #0
   b6b62:	6840      	ldr	r0, [r0, #4]
   b6b64:	4611      	mov	r1, r2
   b6b66:	f7fe b895 	b.w	b4c94 <network_get_listen_timeout>

000b6b6a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6b6a:	2200      	movs	r2, #0
   b6b6c:	6840      	ldr	r0, [r0, #4]
   b6b6e:	4611      	mov	r1, r2
   b6b70:	f7fe b880 	b.w	b4c74 <network_listening>

000b6b74 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6b78:	b095      	sub	sp, #84	; 0x54
   b6b7a:	4614      	mov	r4, r2
   b6b7c:	460d      	mov	r5, r1
   b6b7e:	4607      	mov	r7, r0
    IPAddress addr;
   b6b80:	f7ff fdd2 	bl	b6728 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6b84:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6b86:	221c      	movs	r2, #28
   b6b88:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6b8a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6b8c:	f000 ffbc 	bl	b7b08 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6b90:	2340      	movs	r3, #64	; 0x40
   b6b92:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6b94:	4620      	mov	r0, r4
   b6b96:	466b      	mov	r3, sp
   b6b98:	aa0c      	add	r2, sp, #48	; 0x30
   b6b9a:	2100      	movs	r1, #0
   b6b9c:	f7fd fe86 	bl	b48ac <netdb_getaddrinfo>
    if (!r) {
   b6ba0:	4604      	mov	r4, r0
   b6ba2:	2800      	cmp	r0, #0
   b6ba4:	d14b      	bne.n	b6c3e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6ba6:	4602      	mov	r2, r0
   b6ba8:	2101      	movs	r1, #1
   b6baa:	6868      	ldr	r0, [r5, #4]
   b6bac:	f7fe f842 	bl	b4c34 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6bb0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6bb2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6bb4:	4622      	mov	r2, r4
   b6bb6:	6868      	ldr	r0, [r5, #4]
   b6bb8:	f7fe f83c 	bl	b4c34 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6bbc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6bbe:	4681      	mov	r9, r0
        bool ok = false;
   b6bc0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6bc2:	2e00      	cmp	r6, #0
   b6bc4:	d03b      	beq.n	b6c3e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6bc6:	2900      	cmp	r1, #0
   b6bc8:	d139      	bne.n	b6c3e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6bca:	6873      	ldr	r3, [r6, #4]
   b6bcc:	2b02      	cmp	r3, #2
   b6bce:	d003      	beq.n	b6bd8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6bd0:	2b0a      	cmp	r3, #10
   b6bd2:	d011      	beq.n	b6bf8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6bd4:	69f6      	ldr	r6, [r6, #28]
   b6bd6:	e7f4      	b.n	b6bc2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6bd8:	f1b8 0f00 	cmp.w	r8, #0
   b6bdc:	d0fa      	beq.n	b6bd4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6bde:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6be0:	a806      	add	r0, sp, #24
   b6be2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6be4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6be6:	f7ff fdcd 	bl	b6784 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6bec:	1d3c      	adds	r4, r7, #4
   b6bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6bf0:	682b      	ldr	r3, [r5, #0]
   b6bf2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6bf4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6bf6:	e7ed      	b.n	b6bd4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6bf8:	f1b9 0f00 	cmp.w	r9, #0
   b6bfc:	d0ea      	beq.n	b6bd4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6bfe:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6c00:	2210      	movs	r2, #16
   b6c02:	a801      	add	r0, sp, #4
   b6c04:	f000 ff80 	bl	b7b08 <memset>
                    a.v = 6;
   b6c08:	2306      	movs	r3, #6
   b6c0a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6c0e:	ad01      	add	r5, sp, #4
   b6c10:	f104 0308 	add.w	r3, r4, #8
   b6c14:	3418      	adds	r4, #24
   b6c16:	6818      	ldr	r0, [r3, #0]
   b6c18:	6859      	ldr	r1, [r3, #4]
   b6c1a:	462a      	mov	r2, r5
   b6c1c:	c203      	stmia	r2!, {r0, r1}
   b6c1e:	3308      	adds	r3, #8
   b6c20:	42a3      	cmp	r3, r4
   b6c22:	4615      	mov	r5, r2
   b6c24:	d1f7      	bne.n	b6c16 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6c26:	a901      	add	r1, sp, #4
   b6c28:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6c2a:	ad07      	add	r5, sp, #28
   b6c2c:	f7ff fd8a 	bl	b6744 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c32:	1d3c      	adds	r4, r7, #4
   b6c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c36:	682b      	ldr	r3, [r5, #0]
   b6c38:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6c3a:	4649      	mov	r1, r9
   b6c3c:	e7ca      	b.n	b6bd4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6c3e:	9800      	ldr	r0, [sp, #0]
   b6c40:	f7fd fe2c 	bl	b489c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6c44:	4638      	mov	r0, r7
   b6c46:	b015      	add	sp, #84	; 0x54
   b6c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6c4c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6c4c:	4b02      	ldr	r3, [pc, #8]	; (b6c58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6c4e:	4a03      	ldr	r2, [pc, #12]	; (b6c5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6c50:	601a      	str	r2, [r3, #0]
   b6c52:	2200      	movs	r2, #0
   b6c54:	605a      	str	r2, [r3, #4]

} // spark
   b6c56:	4770      	bx	lr
   b6c58:	2003e714 	.word	0x2003e714
   b6c5c:	000b8230 	.word	0x000b8230

000b6c60 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b6c60:	f100 0310 	add.w	r3, r0, #16
   b6c64:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b6c66:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b6c6a:	2901      	cmp	r1, #1
   b6c6c:	4618      	mov	r0, r3
   b6c6e:	d108      	bne.n	b6c82 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b6c70:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b6c74:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b6c78:	3a01      	subs	r2, #1
   b6c7a:	f103 0310 	add.w	r3, r3, #16
   b6c7e:	d1f2      	bne.n	b6c66 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b6c80:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b6c82:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b6c84:	bf04      	itt	eq
   b6c86:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b6c8a:	1852      	addeq	r2, r2, r1
   b6c8c:	e7f4      	b.n	b6c78 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b6c8e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b6c8e:	b40e      	push	{r1, r2, r3}
   b6c90:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6c92:	b088      	sub	sp, #32
   b6c94:	af00      	add	r7, sp, #0
   b6c96:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6c9a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6c9c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6ca0:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6ca2:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6ca4:	462b      	mov	r3, r5
   b6ca6:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b6ca8:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6caa:	f7fe f853 	bl	b4d54 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b6cae:	280f      	cmp	r0, #15
   b6cb0:	687a      	ldr	r2, [r7, #4]
   b6cb2:	d91a      	bls.n	b6cea <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b6cb4:	f100 0308 	add.w	r3, r0, #8
   b6cb8:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b6cbc:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b6cbe:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6cc2:	1c41      	adds	r1, r0, #1
   b6cc4:	462b      	mov	r3, r5
   b6cc6:	4668      	mov	r0, sp
        va_start(args, fmt);
   b6cc8:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6cca:	f7fe f843 	bl	b4d54 <vsnprintf>
        if (n > 0) {
   b6cce:	1e02      	subs	r2, r0, #0
   b6cd0:	dd04      	ble.n	b6cdc <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b6cd2:	6823      	ldr	r3, [r4, #0]
   b6cd4:	4669      	mov	r1, sp
   b6cd6:	689b      	ldr	r3, [r3, #8]
   b6cd8:	4620      	mov	r0, r4
   b6cda:	4798      	blx	r3
   b6cdc:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b6cde:	3720      	adds	r7, #32
   b6ce0:	46bd      	mov	sp, r7
   b6ce2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6ce6:	b003      	add	sp, #12
   b6ce8:	4770      	bx	lr
    } else if (n > 0) {
   b6cea:	2800      	cmp	r0, #0
   b6cec:	d0f7      	beq.n	b6cde <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b6cee:	6823      	ldr	r3, [r4, #0]
   b6cf0:	4602      	mov	r2, r0
   b6cf2:	689b      	ldr	r3, [r3, #8]
   b6cf4:	f107 0110 	add.w	r1, r7, #16
   b6cf8:	4620      	mov	r0, r4
   b6cfa:	4798      	blx	r3
}
   b6cfc:	e7ef      	b.n	b6cde <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b6cfe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6cfe:	b538      	push	{r3, r4, r5, lr}
   b6d00:	680b      	ldr	r3, [r1, #0]
   b6d02:	6003      	str	r3, [r0, #0]
   b6d04:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b6d06:	6843      	ldr	r3, [r0, #4]
   b6d08:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6d0a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b6d0c:	d008      	beq.n	b6d20 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b6d0e:	b115      	cbz	r5, b6d16 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b6d10:	686b      	ldr	r3, [r5, #4]
   b6d12:	3301      	adds	r3, #1
   b6d14:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b6d16:	6860      	ldr	r0, [r4, #4]
   b6d18:	b108      	cbz	r0, b6d1e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b6d1a:	f7fe f933 	bl	b4f84 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b6d1e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6d20:	bd38      	pop	{r3, r4, r5, pc}

000b6d22 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   b6d22:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b6d24:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b6d26:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6d2a:	689b      	ldr	r3, [r3, #8]
   b6d2c:	2201      	movs	r2, #1
   b6d2e:	f10d 0107 	add.w	r1, sp, #7
   b6d32:	4798      	blx	r3
}
   b6d34:	b003      	add	sp, #12
   b6d36:	f85d fb04 	ldr.w	pc, [sp], #4

000b6d3a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6d3a:	460b      	mov	r3, r1
   b6d3c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b6d3e:	2200      	movs	r2, #0
   b6d40:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b6d42:	e9c0 2200 	strd	r2, r2, [r0]
   b6d46:	4604      	mov	r4, r0
        t_ = t;
   b6d48:	6083      	str	r3, [r0, #8]
    if (t) {
   b6d4a:	b90b      	cbnz	r3, b6d50 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b6d4c:	4620      	mov	r0, r4
   b6d4e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b6d50:	f7ff ffd5 	bl	b6cfe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b6d54:	e7fa      	b.n	b6d4c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b6d56 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b6d56:	6883      	ldr	r3, [r0, #8]
   b6d58:	b1eb      	cbz	r3, b6d96 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b6d5a:	781a      	ldrb	r2, [r3, #0]
   b6d5c:	2a03      	cmp	r2, #3
   b6d5e:	d81a      	bhi.n	b6d96 <_ZNK5spark9JSONValue4typeEv+0x40>
   b6d60:	e8df f002 	tbb	[pc, r2]
   b6d64:	1b021704 	.word	0x1b021704
   b6d68:	2005      	movs	r0, #5
   b6d6a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b6d6c:	6802      	ldr	r2, [r0, #0]
   b6d6e:	685b      	ldr	r3, [r3, #4]
   b6d70:	6852      	ldr	r2, [r2, #4]
   b6d72:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b6d74:	282d      	cmp	r0, #45	; 0x2d
   b6d76:	d012      	beq.n	b6d9e <_ZNK5spark9JSONValue4typeEv+0x48>
   b6d78:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6d7c:	2b09      	cmp	r3, #9
   b6d7e:	d90e      	bls.n	b6d9e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b6d80:	2874      	cmp	r0, #116	; 0x74
   b6d82:	d00e      	beq.n	b6da2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b6d84:	2866      	cmp	r0, #102	; 0x66
   b6d86:	d00c      	beq.n	b6da2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b6d88:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b6d8c:	4258      	negs	r0, r3
   b6d8e:	4158      	adcs	r0, r3
   b6d90:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b6d92:	2006      	movs	r0, #6
   b6d94:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b6d96:	2000      	movs	r0, #0
   b6d98:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b6d9a:	2004      	movs	r0, #4
   b6d9c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b6d9e:	2003      	movs	r0, #3
   b6da0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b6da2:	2002      	movs	r0, #2
}
   b6da4:	4770      	bx	lr

000b6da6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b6da6:	b510      	push	{r4, lr}
   b6da8:	4604      	mov	r4, r0
    switch (type()) {
   b6daa:	f7ff ffd4 	bl	b6d56 <_ZNK5spark9JSONValue4typeEv>
   b6dae:	2802      	cmp	r0, #2
   b6db0:	d00e      	beq.n	b6dd0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b6db2:	1ec3      	subs	r3, r0, #3
   b6db4:	b2db      	uxtb	r3, r3
   b6db6:	2b01      	cmp	r3, #1
   b6db8:	d814      	bhi.n	b6de4 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b6dba:	6822      	ldr	r2, [r4, #0]
   b6dbc:	68a3      	ldr	r3, [r4, #8]
   b6dbe:	6850      	ldr	r0, [r2, #4]
   b6dc0:	685b      	ldr	r3, [r3, #4]
}
   b6dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b6dc6:	220a      	movs	r2, #10
   b6dc8:	2100      	movs	r1, #0
   b6dca:	4418      	add	r0, r3
   b6dcc:	f000 bfcc 	b.w	b7d68 <strtol>
        const char* const s = d_->json + t_->start;
   b6dd0:	6822      	ldr	r2, [r4, #0]
   b6dd2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b6dd4:	6852      	ldr	r2, [r2, #4]
   b6dd6:	685b      	ldr	r3, [r3, #4]
   b6dd8:	5cd0      	ldrb	r0, [r2, r3]
   b6dda:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b6dde:	4258      	negs	r0, r3
   b6de0:	4158      	adcs	r0, r3
}
   b6de2:	bd10      	pop	{r4, pc}
    switch (type()) {
   b6de4:	2000      	movs	r0, #0
   b6de6:	e7fc      	b.n	b6de2 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b6de8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6de8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6dea:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b6dec:	e9c0 3300 	strd	r3, r3, [r0]
   b6df0:	4604      	mov	r4, r0
        n_(0) {
   b6df2:	480e      	ldr	r0, [pc, #56]	; (b6e2c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b6df4:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b6df8:	b1a9      	cbz	r1, b6e26 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b6dfa:	780b      	ldrb	r3, [r1, #0]
   b6dfc:	2b03      	cmp	r3, #3
   b6dfe:	d006      	beq.n	b6e0e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b6e00:	b98b      	cbnz	r3, b6e26 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b6e02:	6813      	ldr	r3, [r2, #0]
   b6e04:	6858      	ldr	r0, [r3, #4]
   b6e06:	684b      	ldr	r3, [r1, #4]
   b6e08:	5cc3      	ldrb	r3, [r0, r3]
   b6e0a:	2b6e      	cmp	r3, #110	; 0x6e
   b6e0c:	d007      	beq.n	b6e1e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b6e0e:	6813      	ldr	r3, [r2, #0]
   b6e10:	684d      	ldr	r5, [r1, #4]
   b6e12:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b6e14:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b6e16:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b6e18:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b6e1a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b6e1c:	60e3      	str	r3, [r4, #12]
   b6e1e:	4611      	mov	r1, r2
   b6e20:	4620      	mov	r0, r4
   b6e22:	f7ff ff6c 	bl	b6cfe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6e26:	4620      	mov	r0, r4
   b6e28:	bd38      	pop	{r3, r4, r5, pc}
   b6e2a:	bf00      	nop
   b6e2c:	000b8089 	.word	0x000b8089

000b6e30 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6e30:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6e32:	2500      	movs	r5, #0
   b6e34:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b6e36:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b6e3a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b6e3e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b6e42:	4604      	mov	r4, r0
   b6e44:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b6e46:	b14b      	cbz	r3, b6e5c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b6e48:	781a      	ldrb	r2, [r3, #0]
   b6e4a:	2a01      	cmp	r2, #1
   b6e4c:	d106      	bne.n	b6e5c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b6e4e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b6e52:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b6e54:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b6e56:	6143      	str	r3, [r0, #20]
   b6e58:	f7ff ff51 	bl	b6cfe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6e5c:	4620      	mov	r0, r4
   b6e5e:	bd38      	pop	{r3, r4, r5, pc}

000b6e60 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b6e60:	b510      	push	{r4, lr}
    if (!n_) {
   b6e62:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b6e64:	4604      	mov	r4, r0
    if (!n_) {
   b6e66:	b163      	cbz	r3, b6e82 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b6e68:	6880      	ldr	r0, [r0, #8]
   b6e6a:	60e0      	str	r0, [r4, #12]
    --n_;
   b6e6c:	3b01      	subs	r3, #1
    ++t_;
   b6e6e:	3010      	adds	r0, #16
   b6e70:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b6e72:	6120      	str	r0, [r4, #16]
    --n_;
   b6e74:	6163      	str	r3, [r4, #20]
    if (n_) {
   b6e76:	b113      	cbz	r3, b6e7e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b6e78:	f7ff fef2 	bl	b6c60 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b6e7c:	60a0      	str	r0, [r4, #8]
    return true;
   b6e7e:	2001      	movs	r0, #1
   b6e80:	e000      	b.n	b6e84 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b6e82:	4618      	mov	r0, r3
}
   b6e84:	bd10      	pop	{r4, pc}

000b6e86 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6e86:	b510      	push	{r4, lr}
    write('}');
   b6e88:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6e8a:	4604      	mov	r4, r0
    write('}');
   b6e8c:	f7ff ff49 	bl	b6d22 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b6e90:	2301      	movs	r3, #1
   b6e92:	7123      	strb	r3, [r4, #4]
}
   b6e94:	4620      	mov	r0, r4
   b6e96:	bd10      	pop	{r4, pc}

000b6e98 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b6e98:	b508      	push	{r3, lr}
    switch (state_) {
   b6e9a:	7903      	ldrb	r3, [r0, #4]
   b6e9c:	2b01      	cmp	r3, #1
   b6e9e:	d002      	beq.n	b6ea6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b6ea0:	2b02      	cmp	r3, #2
   b6ea2:	d004      	beq.n	b6eae <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b6ea4:	bd08      	pop	{r3, pc}
        write(',');
   b6ea6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b6ea8:	f7ff ff3b 	bl	b6d22 <_ZN5spark10JSONWriter5writeEc>
}
   b6eac:	e7fa      	b.n	b6ea4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b6eae:	213a      	movs	r1, #58	; 0x3a
   b6eb0:	e7fa      	b.n	b6ea8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b6eb2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b6eb2:	b510      	push	{r4, lr}
   b6eb4:	4604      	mov	r4, r0
    writeSeparator();
   b6eb6:	f7ff ffef 	bl	b6e98 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b6eba:	4620      	mov	r0, r4
   b6ebc:	217b      	movs	r1, #123	; 0x7b
   b6ebe:	f7ff ff30 	bl	b6d22 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b6ec2:	2300      	movs	r3, #0
   b6ec4:	7123      	strb	r3, [r4, #4]
}
   b6ec6:	4620      	mov	r0, r4
   b6ec8:	bd10      	pop	{r4, pc}
	...

000b6ecc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b6ecc:	b513      	push	{r0, r1, r4, lr}
   b6ece:	4604      	mov	r4, r0
   b6ed0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b6ed2:	f7ff ffe1 	bl	b6e98 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b6ed6:	6823      	ldr	r3, [r4, #0]
   b6ed8:	9a01      	ldr	r2, [sp, #4]
   b6eda:	68db      	ldr	r3, [r3, #12]
   b6edc:	4903      	ldr	r1, [pc, #12]	; (b6eec <_ZN5spark10JSONWriter5valueEi+0x20>)
   b6ede:	4620      	mov	r0, r4
   b6ee0:	4798      	blx	r3
    state_ = NEXT;
   b6ee2:	2301      	movs	r3, #1
}
   b6ee4:	4620      	mov	r0, r4
    state_ = NEXT;
   b6ee6:	7123      	strb	r3, [r4, #4]
}
   b6ee8:	b002      	add	sp, #8
   b6eea:	bd10      	pop	{r4, pc}
   b6eec:	000b8063 	.word	0x000b8063

000b6ef0 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b6ef0:	b513      	push	{r0, r1, r4, lr}
   b6ef2:	4604      	mov	r4, r0
   b6ef4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b6ef6:	f7ff ffcf 	bl	b6e98 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b6efa:	6823      	ldr	r3, [r4, #0]
   b6efc:	9a01      	ldr	r2, [sp, #4]
   b6efe:	68db      	ldr	r3, [r3, #12]
   b6f00:	4903      	ldr	r1, [pc, #12]	; (b6f10 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b6f02:	4620      	mov	r0, r4
   b6f04:	4798      	blx	r3
    state_ = NEXT;
   b6f06:	2301      	movs	r3, #1
}
   b6f08:	4620      	mov	r0, r4
    state_ = NEXT;
   b6f0a:	7123      	strb	r3, [r4, #4]
}
   b6f0c:	b002      	add	sp, #8
   b6f0e:	bd10      	pop	{r4, pc}
   b6f10:	000b8264 	.word	0x000b8264

000b6f14 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6f18:	460d      	mov	r5, r1
    write('"');
   b6f1a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6f1c:	4690      	mov	r8, r2
   b6f1e:	4604      	mov	r4, r0
    write('"');
   b6f20:	f7ff feff 	bl	b6d22 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b6f24:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b6fcc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b6f28:	44a8      	add	r8, r5
    const char *s = str;
   b6f2a:	462f      	mov	r7, r5
    while (s != end) {
   b6f2c:	4547      	cmp	r7, r8
   b6f2e:	46ba      	mov	sl, r7
   b6f30:	d03d      	beq.n	b6fae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b6f32:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b6f36:	2e22      	cmp	r6, #34	; 0x22
   b6f38:	d006      	beq.n	b6f48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6f3a:	2e5c      	cmp	r6, #92	; 0x5c
   b6f3c:	d004      	beq.n	b6f48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6f3e:	4630      	mov	r0, r6
   b6f40:	f000 fdb2 	bl	b7aa8 <isprint>
   b6f44:	2800      	cmp	r0, #0
   b6f46:	d1f1      	bne.n	b6f2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b6f48:	6823      	ldr	r3, [r4, #0]
   b6f4a:	ebaa 0205 	sub.w	r2, sl, r5
   b6f4e:	689b      	ldr	r3, [r3, #8]
   b6f50:	4629      	mov	r1, r5
   b6f52:	4620      	mov	r0, r4
   b6f54:	4798      	blx	r3
            write('\\');
   b6f56:	215c      	movs	r1, #92	; 0x5c
   b6f58:	4620      	mov	r0, r4
   b6f5a:	f7ff fee2 	bl	b6d22 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b6f5e:	2e0d      	cmp	r6, #13
   b6f60:	d80a      	bhi.n	b6f78 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b6f62:	2e07      	cmp	r6, #7
   b6f64:	d91c      	bls.n	b6fa0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6f66:	f1a6 0308 	sub.w	r3, r6, #8
   b6f6a:	2b05      	cmp	r3, #5
   b6f6c:	d818      	bhi.n	b6fa0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6f6e:	e8df f003 	tbb	[pc, r3]
   b6f72:	0f0d      	.short	0x0f0d
   b6f74:	15131711 	.word	0x15131711
   b6f78:	2e22      	cmp	r6, #34	; 0x22
   b6f7a:	d001      	beq.n	b6f80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b6f7c:	2e5c      	cmp	r6, #92	; 0x5c
   b6f7e:	d10f      	bne.n	b6fa0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b6f80:	4631      	mov	r1, r6
                write('b');
   b6f82:	4620      	mov	r0, r4
   b6f84:	f7ff fecd 	bl	b6d22 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b6f88:	463d      	mov	r5, r7
    while (s != end) {
   b6f8a:	e7cf      	b.n	b6f2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b6f8c:	2162      	movs	r1, #98	; 0x62
   b6f8e:	e7f8      	b.n	b6f82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b6f90:	2174      	movs	r1, #116	; 0x74
   b6f92:	e7f6      	b.n	b6f82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b6f94:	216e      	movs	r1, #110	; 0x6e
   b6f96:	e7f4      	b.n	b6f82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b6f98:	2166      	movs	r1, #102	; 0x66
   b6f9a:	e7f2      	b.n	b6f82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b6f9c:	2172      	movs	r1, #114	; 0x72
   b6f9e:	e7f0      	b.n	b6f82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b6fa0:	6823      	ldr	r3, [r4, #0]
   b6fa2:	4632      	mov	r2, r6
   b6fa4:	68db      	ldr	r3, [r3, #12]
   b6fa6:	4649      	mov	r1, r9
   b6fa8:	4620      	mov	r0, r4
   b6faa:	4798      	blx	r3
                break;
   b6fac:	e7ec      	b.n	b6f88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b6fae:	42bd      	cmp	r5, r7
   b6fb0:	d005      	beq.n	b6fbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b6fb2:	6823      	ldr	r3, [r4, #0]
   b6fb4:	1b7a      	subs	r2, r7, r5
   b6fb6:	689b      	ldr	r3, [r3, #8]
   b6fb8:	4629      	mov	r1, r5
   b6fba:	4620      	mov	r0, r4
   b6fbc:	4798      	blx	r3
    }
    write('"');
   b6fbe:	2122      	movs	r1, #34	; 0x22
   b6fc0:	4620      	mov	r0, r4
   b6fc2:	f7ff feae 	bl	b6d22 <_ZN5spark10JSONWriter5writeEc>
}
   b6fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6fca:	bf00      	nop
   b6fcc:	000b8267 	.word	0x000b8267

000b6fd0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b6fd0:	b513      	push	{r0, r1, r4, lr}
   b6fd2:	4604      	mov	r4, r0
   b6fd4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b6fd8:	f7ff ff5e 	bl	b6e98 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b6fdc:	4620      	mov	r0, r4
   b6fde:	e9dd 2100 	ldrd	r2, r1, [sp]
   b6fe2:	f7ff ff97 	bl	b6f14 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b6fe6:	2302      	movs	r3, #2
}
   b6fe8:	4620      	mov	r0, r4
    state_ = VALUE;
   b6fea:	7123      	strb	r3, [r4, #4]
}
   b6fec:	b002      	add	sp, #8
   b6fee:	bd10      	pop	{r4, pc}

000b6ff0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b6ff0:	b513      	push	{r0, r1, r4, lr}
   b6ff2:	4604      	mov	r4, r0
   b6ff4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b6ff8:	f7ff ff4e 	bl	b6e98 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b6ffc:	4620      	mov	r0, r4
   b6ffe:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7002:	f7ff ff87 	bl	b6f14 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b7006:	2301      	movs	r3, #1
}
   b7008:	4620      	mov	r0, r4
    state_ = NEXT;
   b700a:	7123      	strb	r3, [r4, #4]
}
   b700c:	b002      	add	sp, #8
   b700e:	bd10      	pop	{r4, pc}

000b7010 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7010:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7012:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7014:	d902      	bls.n	b701c <pinAvailable+0xc>
    return false;
   b7016:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7018:	b002      	add	sp, #8
   b701a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b701c:	f1a0 030b 	sub.w	r3, r0, #11
   b7020:	2b02      	cmp	r3, #2
   b7022:	d81a      	bhi.n	b705a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7024:	4c17      	ldr	r4, [pc, #92]	; (b7084 <pinAvailable+0x74>)
   b7026:	7821      	ldrb	r1, [r4, #0]
   b7028:	f3bf 8f5b 	dmb	ish
   b702c:	f011 0101 	ands.w	r1, r1, #1
   b7030:	d10b      	bne.n	b704a <pinAvailable+0x3a>
   b7032:	4620      	mov	r0, r4
   b7034:	9101      	str	r1, [sp, #4]
   b7036:	f7fd f83f 	bl	b40b8 <__cxa_guard_acquire>
   b703a:	9901      	ldr	r1, [sp, #4]
   b703c:	b128      	cbz	r0, b704a <pinAvailable+0x3a>
   b703e:	4812      	ldr	r0, [pc, #72]	; (b7088 <pinAvailable+0x78>)
   b7040:	f7fd fef6 	bl	b4e30 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7044:	4620      	mov	r0, r4
   b7046:	f7fd f83c 	bl	b40c2 <__cxa_guard_release>
   b704a:	4b0f      	ldr	r3, [pc, #60]	; (b7088 <pinAvailable+0x78>)
   b704c:	7818      	ldrb	r0, [r3, #0]
   b704e:	f7fd fd35 	bl	b4abc <hal_spi_is_enabled>
   b7052:	2800      	cmp	r0, #0
   b7054:	d1df      	bne.n	b7016 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7056:	2001      	movs	r0, #1
   b7058:	e7de      	b.n	b7018 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b705a:	2801      	cmp	r0, #1
   b705c:	d809      	bhi.n	b7072 <pinAvailable+0x62>
   b705e:	f000 f8d3 	bl	b7208 <_Z19__fetch_global_Wirev>
   b7062:	2100      	movs	r1, #0
   b7064:	7c00      	ldrb	r0, [r0, #16]
   b7066:	f7fd fd11 	bl	b4a8c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b706a:	f080 0001 	eor.w	r0, r0, #1
   b706e:	b2c0      	uxtb	r0, r0
   b7070:	e7d2      	b.n	b7018 <pinAvailable+0x8>
   b7072:	3809      	subs	r0, #9
   b7074:	2801      	cmp	r0, #1
   b7076:	d8ee      	bhi.n	b7056 <pinAvailable+0x46>
   b7078:	f000 f886 	bl	b7188 <_Z22__fetch_global_Serial1v>
   b707c:	7c00      	ldrb	r0, [r0, #16]
   b707e:	f7fd fcbd 	bl	b49fc <hal_usart_is_enabled>
   b7082:	e7f2      	b.n	b706a <pinAvailable+0x5a>
   b7084:	2003e71c 	.word	0x2003e71c
   b7088:	2003e720 	.word	0x2003e720

000b708c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b708c:	2823      	cmp	r0, #35	; 0x23
{
   b708e:	b538      	push	{r3, r4, r5, lr}
   b7090:	4604      	mov	r4, r0
   b7092:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7094:	d80a      	bhi.n	b70ac <pinMode+0x20>
   b7096:	29ff      	cmp	r1, #255	; 0xff
   b7098:	d008      	beq.n	b70ac <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b709a:	f7ff ffb9 	bl	b7010 <pinAvailable>
   b709e:	b128      	cbz	r0, b70ac <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b70a0:	4629      	mov	r1, r5
   b70a2:	4620      	mov	r0, r4
}
   b70a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b70a8:	f7fd bc08 	b.w	b48bc <HAL_Pin_Mode>
}
   b70ac:	bd38      	pop	{r3, r4, r5, pc}

000b70ae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b70ae:	b538      	push	{r3, r4, r5, lr}
   b70b0:	4604      	mov	r4, r0
   b70b2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b70b4:	f7fd fc0a 	bl	b48cc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b70b8:	28ff      	cmp	r0, #255	; 0xff
   b70ba:	d010      	beq.n	b70de <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b70bc:	2806      	cmp	r0, #6
   b70be:	d804      	bhi.n	b70ca <digitalWrite+0x1c>
   b70c0:	234d      	movs	r3, #77	; 0x4d
   b70c2:	fa23 f000 	lsr.w	r0, r3, r0
   b70c6:	07c3      	lsls	r3, r0, #31
   b70c8:	d409      	bmi.n	b70de <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b70ca:	4620      	mov	r0, r4
   b70cc:	f7ff ffa0 	bl	b7010 <pinAvailable>
   b70d0:	b128      	cbz	r0, b70de <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b70d2:	4629      	mov	r1, r5
   b70d4:	4620      	mov	r0, r4
}
   b70d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b70da:	f7fd bbff 	b.w	b48dc <HAL_GPIO_Write>
}
   b70de:	bd38      	pop	{r3, r4, r5, pc}

000b70e0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b70e0:	b510      	push	{r4, lr}
   b70e2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b70e4:	f7fd fbf2 	bl	b48cc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b70e8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b70ea:	b2db      	uxtb	r3, r3
   b70ec:	2b01      	cmp	r3, #1
   b70ee:	d908      	bls.n	b7102 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b70f0:	4620      	mov	r0, r4
   b70f2:	f7ff ff8d 	bl	b7010 <pinAvailable>
   b70f6:	b120      	cbz	r0, b7102 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b70f8:	4620      	mov	r0, r4
}
   b70fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b70fe:	f7fd bbf5 	b.w	b48ec <HAL_GPIO_Read>
}
   b7102:	2000      	movs	r0, #0
   b7104:	bd10      	pop	{r4, pc}

000b7106 <shiftIn>:
  }

  return hal_pwm_get_max_frequency(pin);
}

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
   b7106:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b710a:	4690      	mov	r8, r2
   b710c:	2507      	movs	r5, #7
  uint8_t value = 0;
   b710e:	2400      	movs	r4, #0
  uint8_t i;

  for (i = 0; i < 8; ++i) {
    digitalWrite(clockPin, HIGH);
   b7110:	460e      	mov	r6, r1
    if (bitOrder == LSBFIRST)
      value |= digitalRead(dataPin) << i;
   b7112:	4607      	mov	r7, r0
    digitalWrite(clockPin, HIGH);
   b7114:	4630      	mov	r0, r6
   b7116:	2101      	movs	r1, #1
   b7118:	f7ff ffc9 	bl	b70ae <digitalWrite>
    if (bitOrder == LSBFIRST)
   b711c:	f1c5 0907 	rsb	r9, r5, #7
      value |= digitalRead(dataPin) << i;
   b7120:	b264      	sxtb	r4, r4
   b7122:	4638      	mov	r0, r7
    if (bitOrder == LSBFIRST)
   b7124:	f1b8 0f00 	cmp.w	r8, #0
   b7128:	d10e      	bne.n	b7148 <shiftIn+0x42>
      value |= digitalRead(dataPin) << i;
   b712a:	f7ff ffd9 	bl	b70e0 <digitalRead>
   b712e:	fa00 f009 	lsl.w	r0, r0, r9
    else
      value |= digitalRead(dataPin) << (7 - i);
   b7132:	4304      	orrs	r4, r0
    digitalWrite(clockPin, LOW);
   b7134:	2100      	movs	r1, #0
   b7136:	4630      	mov	r0, r6
   b7138:	f7ff ffb9 	bl	b70ae <digitalWrite>
  for (i = 0; i < 8; ++i) {
   b713c:	3d01      	subs	r5, #1
      value |= digitalRead(dataPin) << (7 - i);
   b713e:	b2e4      	uxtb	r4, r4
  for (i = 0; i < 8; ++i) {
   b7140:	d2e8      	bcs.n	b7114 <shiftIn+0xe>
  }
  return value;
}
   b7142:	4620      	mov	r0, r4
   b7144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      value |= digitalRead(dataPin) << (7 - i);
   b7148:	f7ff ffca 	bl	b70e0 <digitalRead>
   b714c:	40a8      	lsls	r0, r5
   b714e:	e7f0      	b.n	b7132 <shiftIn+0x2c>

000b7150 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7150:	4770      	bx	lr
	...

000b7154 <_Z20acquireSerial1Bufferv>:
{
   b7154:	b538      	push	{r3, r4, r5, lr}
   b7156:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7158:	2514      	movs	r5, #20
   b715a:	462a      	mov	r2, r5
   b715c:	2100      	movs	r1, #0
   b715e:	f000 fcd3 	bl	b7b08 <memset>
   b7162:	8025      	strh	r5, [r4, #0]
   b7164:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7166:	4907      	ldr	r1, [pc, #28]	; (b7184 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7168:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b716a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b716c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b716e:	f000 f871 	bl	b7254 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7172:	4904      	ldr	r1, [pc, #16]	; (b7184 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7174:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7176:	4628      	mov	r0, r5
   b7178:	f000 f86c 	bl	b7254 <_ZnajRKSt9nothrow_t>
    };
   b717c:	60e0      	str	r0, [r4, #12]
}
   b717e:	4620      	mov	r0, r4
   b7180:	bd38      	pop	{r3, r4, r5, pc}
   b7182:	bf00      	nop
   b7184:	000b826d 	.word	0x000b826d

000b7188 <_Z22__fetch_global_Serial1v>:
{
   b7188:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b718a:	4d0e      	ldr	r5, [pc, #56]	; (b71c4 <_Z22__fetch_global_Serial1v+0x3c>)
   b718c:	7829      	ldrb	r1, [r5, #0]
   b718e:	f3bf 8f5b 	dmb	ish
   b7192:	f011 0401 	ands.w	r4, r1, #1
{
   b7196:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7198:	d111      	bne.n	b71be <_Z22__fetch_global_Serial1v+0x36>
   b719a:	4628      	mov	r0, r5
   b719c:	f7fc ff8c 	bl	b40b8 <__cxa_guard_acquire>
   b71a0:	b168      	cbz	r0, b71be <_Z22__fetch_global_Serial1v+0x36>
   b71a2:	a801      	add	r0, sp, #4
   b71a4:	f7ff ffd6 	bl	b7154 <_Z20acquireSerial1Bufferv>
   b71a8:	aa01      	add	r2, sp, #4
   b71aa:	4621      	mov	r1, r4
   b71ac:	4806      	ldr	r0, [pc, #24]	; (b71c8 <_Z22__fetch_global_Serial1v+0x40>)
   b71ae:	f7ff fbeb 	bl	b6988 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b71b2:	4628      	mov	r0, r5
   b71b4:	f7fc ff85 	bl	b40c2 <__cxa_guard_release>
   b71b8:	4804      	ldr	r0, [pc, #16]	; (b71cc <_Z22__fetch_global_Serial1v+0x44>)
   b71ba:	f000 fc6f 	bl	b7a9c <atexit>
    return serial1;
}
   b71be:	4802      	ldr	r0, [pc, #8]	; (b71c8 <_Z22__fetch_global_Serial1v+0x40>)
   b71c0:	b007      	add	sp, #28
   b71c2:	bd30      	pop	{r4, r5, pc}
   b71c4:	2003e728 	.word	0x2003e728
   b71c8:	2003e72c 	.word	0x2003e72c
   b71cc:	000b7151 	.word	0x000b7151

000b71d0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b71d0:	4770      	bx	lr
	...

000b71d4 <_Z17acquireWireBufferv>:
{
   b71d4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b71d6:	4b0a      	ldr	r3, [pc, #40]	; (b7200 <_Z17acquireWireBufferv+0x2c>)
   b71d8:	6003      	str	r3, [r0, #0]
   b71da:	2301      	movs	r3, #1
{
   b71dc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b71de:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b71e0:	4908      	ldr	r1, [pc, #32]	; (b7204 <_Z17acquireWireBufferv+0x30>)
   b71e2:	2020      	movs	r0, #32
   b71e4:	f000 f836 	bl	b7254 <_ZnajRKSt9nothrow_t>
	};
   b71e8:	2520      	movs	r5, #32
   b71ea:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b71ec:	4905      	ldr	r1, [pc, #20]	; (b7204 <_Z17acquireWireBufferv+0x30>)
	};
   b71ee:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b71f0:	4628      	mov	r0, r5
   b71f2:	f000 f82f 	bl	b7254 <_ZnajRKSt9nothrow_t>
	};
   b71f6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b71fa:	4620      	mov	r0, r4
   b71fc:	bd38      	pop	{r3, r4, r5, pc}
   b71fe:	bf00      	nop
   b7200:	00010018 	.word	0x00010018
   b7204:	000b826d 	.word	0x000b826d

000b7208 <_Z19__fetch_global_Wirev>:
{
   b7208:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b720a:	4d0e      	ldr	r5, [pc, #56]	; (b7244 <_Z19__fetch_global_Wirev+0x3c>)
   b720c:	7829      	ldrb	r1, [r5, #0]
   b720e:	f3bf 8f5b 	dmb	ish
   b7212:	f011 0401 	ands.w	r4, r1, #1
{
   b7216:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7218:	d111      	bne.n	b723e <_Z19__fetch_global_Wirev+0x36>
   b721a:	4628      	mov	r0, r5
   b721c:	f7fc ff4c 	bl	b40b8 <__cxa_guard_acquire>
   b7220:	b168      	cbz	r0, b723e <_Z19__fetch_global_Wirev+0x36>
   b7222:	4668      	mov	r0, sp
   b7224:	f7ff ffd6 	bl	b71d4 <_Z17acquireWireBufferv>
   b7228:	466a      	mov	r2, sp
   b722a:	4621      	mov	r1, r4
   b722c:	4806      	ldr	r0, [pc, #24]	; (b7248 <_Z19__fetch_global_Wirev+0x40>)
   b722e:	f7ff fc09 	bl	b6a44 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7232:	4628      	mov	r0, r5
   b7234:	f7fc ff45 	bl	b40c2 <__cxa_guard_release>
   b7238:	4804      	ldr	r0, [pc, #16]	; (b724c <_Z19__fetch_global_Wirev+0x44>)
   b723a:	f000 fc2f 	bl	b7a9c <atexit>
	return wire;
}
   b723e:	4802      	ldr	r0, [pc, #8]	; (b7248 <_Z19__fetch_global_Wirev+0x40>)
   b7240:	b007      	add	sp, #28
   b7242:	bd30      	pop	{r4, r5, pc}
   b7244:	2003e744 	.word	0x2003e744
   b7248:	2003e748 	.word	0x2003e748
   b724c:	000b71d1 	.word	0x000b71d1

000b7250 <_ZnwjRKSt9nothrow_t>:
   b7250:	f7fc bf1f 	b.w	b4092 <_Znwj>

000b7254 <_ZnajRKSt9nothrow_t>:
   b7254:	f7fc bf1f 	b.w	b4096 <_Znaj>

000b7258 <_ZSt25__throw_bad_function_callv>:
   b7258:	b508      	push	{r3, lr}
   b725a:	f7fd fd83 	bl	b4d64 <abort>
	...

000b7260 <__aeabi_drsub>:
   b7260:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7264:	e002      	b.n	b726c <__adddf3>
   b7266:	bf00      	nop

000b7268 <__aeabi_dsub>:
   b7268:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b726c <__adddf3>:
   b726c:	b530      	push	{r4, r5, lr}
   b726e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7272:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7276:	ea94 0f05 	teq	r4, r5
   b727a:	bf08      	it	eq
   b727c:	ea90 0f02 	teqeq	r0, r2
   b7280:	bf1f      	itttt	ne
   b7282:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7286:	ea55 0c02 	orrsne.w	ip, r5, r2
   b728a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b728e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7292:	f000 80e2 	beq.w	b745a <__adddf3+0x1ee>
   b7296:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b729a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b729e:	bfb8      	it	lt
   b72a0:	426d      	neglt	r5, r5
   b72a2:	dd0c      	ble.n	b72be <__adddf3+0x52>
   b72a4:	442c      	add	r4, r5
   b72a6:	ea80 0202 	eor.w	r2, r0, r2
   b72aa:	ea81 0303 	eor.w	r3, r1, r3
   b72ae:	ea82 0000 	eor.w	r0, r2, r0
   b72b2:	ea83 0101 	eor.w	r1, r3, r1
   b72b6:	ea80 0202 	eor.w	r2, r0, r2
   b72ba:	ea81 0303 	eor.w	r3, r1, r3
   b72be:	2d36      	cmp	r5, #54	; 0x36
   b72c0:	bf88      	it	hi
   b72c2:	bd30      	pophi	{r4, r5, pc}
   b72c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b72c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b72cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b72d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b72d4:	d002      	beq.n	b72dc <__adddf3+0x70>
   b72d6:	4240      	negs	r0, r0
   b72d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b72dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b72e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b72e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b72e8:	d002      	beq.n	b72f0 <__adddf3+0x84>
   b72ea:	4252      	negs	r2, r2
   b72ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b72f0:	ea94 0f05 	teq	r4, r5
   b72f4:	f000 80a7 	beq.w	b7446 <__adddf3+0x1da>
   b72f8:	f1a4 0401 	sub.w	r4, r4, #1
   b72fc:	f1d5 0e20 	rsbs	lr, r5, #32
   b7300:	db0d      	blt.n	b731e <__adddf3+0xb2>
   b7302:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7306:	fa22 f205 	lsr.w	r2, r2, r5
   b730a:	1880      	adds	r0, r0, r2
   b730c:	f141 0100 	adc.w	r1, r1, #0
   b7310:	fa03 f20e 	lsl.w	r2, r3, lr
   b7314:	1880      	adds	r0, r0, r2
   b7316:	fa43 f305 	asr.w	r3, r3, r5
   b731a:	4159      	adcs	r1, r3
   b731c:	e00e      	b.n	b733c <__adddf3+0xd0>
   b731e:	f1a5 0520 	sub.w	r5, r5, #32
   b7322:	f10e 0e20 	add.w	lr, lr, #32
   b7326:	2a01      	cmp	r2, #1
   b7328:	fa03 fc0e 	lsl.w	ip, r3, lr
   b732c:	bf28      	it	cs
   b732e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7332:	fa43 f305 	asr.w	r3, r3, r5
   b7336:	18c0      	adds	r0, r0, r3
   b7338:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b733c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7340:	d507      	bpl.n	b7352 <__adddf3+0xe6>
   b7342:	f04f 0e00 	mov.w	lr, #0
   b7346:	f1dc 0c00 	rsbs	ip, ip, #0
   b734a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b734e:	eb6e 0101 	sbc.w	r1, lr, r1
   b7352:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7356:	d31b      	bcc.n	b7390 <__adddf3+0x124>
   b7358:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b735c:	d30c      	bcc.n	b7378 <__adddf3+0x10c>
   b735e:	0849      	lsrs	r1, r1, #1
   b7360:	ea5f 0030 	movs.w	r0, r0, rrx
   b7364:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7368:	f104 0401 	add.w	r4, r4, #1
   b736c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7370:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7374:	f080 809a 	bcs.w	b74ac <__adddf3+0x240>
   b7378:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b737c:	bf08      	it	eq
   b737e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7382:	f150 0000 	adcs.w	r0, r0, #0
   b7386:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b738a:	ea41 0105 	orr.w	r1, r1, r5
   b738e:	bd30      	pop	{r4, r5, pc}
   b7390:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7394:	4140      	adcs	r0, r0
   b7396:	eb41 0101 	adc.w	r1, r1, r1
   b739a:	3c01      	subs	r4, #1
   b739c:	bf28      	it	cs
   b739e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b73a2:	d2e9      	bcs.n	b7378 <__adddf3+0x10c>
   b73a4:	f091 0f00 	teq	r1, #0
   b73a8:	bf04      	itt	eq
   b73aa:	4601      	moveq	r1, r0
   b73ac:	2000      	moveq	r0, #0
   b73ae:	fab1 f381 	clz	r3, r1
   b73b2:	bf08      	it	eq
   b73b4:	3320      	addeq	r3, #32
   b73b6:	f1a3 030b 	sub.w	r3, r3, #11
   b73ba:	f1b3 0220 	subs.w	r2, r3, #32
   b73be:	da0c      	bge.n	b73da <__adddf3+0x16e>
   b73c0:	320c      	adds	r2, #12
   b73c2:	dd08      	ble.n	b73d6 <__adddf3+0x16a>
   b73c4:	f102 0c14 	add.w	ip, r2, #20
   b73c8:	f1c2 020c 	rsb	r2, r2, #12
   b73cc:	fa01 f00c 	lsl.w	r0, r1, ip
   b73d0:	fa21 f102 	lsr.w	r1, r1, r2
   b73d4:	e00c      	b.n	b73f0 <__adddf3+0x184>
   b73d6:	f102 0214 	add.w	r2, r2, #20
   b73da:	bfd8      	it	le
   b73dc:	f1c2 0c20 	rsble	ip, r2, #32
   b73e0:	fa01 f102 	lsl.w	r1, r1, r2
   b73e4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b73e8:	bfdc      	itt	le
   b73ea:	ea41 010c 	orrle.w	r1, r1, ip
   b73ee:	4090      	lslle	r0, r2
   b73f0:	1ae4      	subs	r4, r4, r3
   b73f2:	bfa2      	ittt	ge
   b73f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b73f8:	4329      	orrge	r1, r5
   b73fa:	bd30      	popge	{r4, r5, pc}
   b73fc:	ea6f 0404 	mvn.w	r4, r4
   b7400:	3c1f      	subs	r4, #31
   b7402:	da1c      	bge.n	b743e <__adddf3+0x1d2>
   b7404:	340c      	adds	r4, #12
   b7406:	dc0e      	bgt.n	b7426 <__adddf3+0x1ba>
   b7408:	f104 0414 	add.w	r4, r4, #20
   b740c:	f1c4 0220 	rsb	r2, r4, #32
   b7410:	fa20 f004 	lsr.w	r0, r0, r4
   b7414:	fa01 f302 	lsl.w	r3, r1, r2
   b7418:	ea40 0003 	orr.w	r0, r0, r3
   b741c:	fa21 f304 	lsr.w	r3, r1, r4
   b7420:	ea45 0103 	orr.w	r1, r5, r3
   b7424:	bd30      	pop	{r4, r5, pc}
   b7426:	f1c4 040c 	rsb	r4, r4, #12
   b742a:	f1c4 0220 	rsb	r2, r4, #32
   b742e:	fa20 f002 	lsr.w	r0, r0, r2
   b7432:	fa01 f304 	lsl.w	r3, r1, r4
   b7436:	ea40 0003 	orr.w	r0, r0, r3
   b743a:	4629      	mov	r1, r5
   b743c:	bd30      	pop	{r4, r5, pc}
   b743e:	fa21 f004 	lsr.w	r0, r1, r4
   b7442:	4629      	mov	r1, r5
   b7444:	bd30      	pop	{r4, r5, pc}
   b7446:	f094 0f00 	teq	r4, #0
   b744a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b744e:	bf06      	itte	eq
   b7450:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7454:	3401      	addeq	r4, #1
   b7456:	3d01      	subne	r5, #1
   b7458:	e74e      	b.n	b72f8 <__adddf3+0x8c>
   b745a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b745e:	bf18      	it	ne
   b7460:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7464:	d029      	beq.n	b74ba <__adddf3+0x24e>
   b7466:	ea94 0f05 	teq	r4, r5
   b746a:	bf08      	it	eq
   b746c:	ea90 0f02 	teqeq	r0, r2
   b7470:	d005      	beq.n	b747e <__adddf3+0x212>
   b7472:	ea54 0c00 	orrs.w	ip, r4, r0
   b7476:	bf04      	itt	eq
   b7478:	4619      	moveq	r1, r3
   b747a:	4610      	moveq	r0, r2
   b747c:	bd30      	pop	{r4, r5, pc}
   b747e:	ea91 0f03 	teq	r1, r3
   b7482:	bf1e      	ittt	ne
   b7484:	2100      	movne	r1, #0
   b7486:	2000      	movne	r0, #0
   b7488:	bd30      	popne	{r4, r5, pc}
   b748a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b748e:	d105      	bne.n	b749c <__adddf3+0x230>
   b7490:	0040      	lsls	r0, r0, #1
   b7492:	4149      	adcs	r1, r1
   b7494:	bf28      	it	cs
   b7496:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b749a:	bd30      	pop	{r4, r5, pc}
   b749c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b74a0:	bf3c      	itt	cc
   b74a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b74a6:	bd30      	popcc	{r4, r5, pc}
   b74a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b74ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b74b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b74b4:	f04f 0000 	mov.w	r0, #0
   b74b8:	bd30      	pop	{r4, r5, pc}
   b74ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b74be:	bf1a      	itte	ne
   b74c0:	4619      	movne	r1, r3
   b74c2:	4610      	movne	r0, r2
   b74c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b74c8:	bf1c      	itt	ne
   b74ca:	460b      	movne	r3, r1
   b74cc:	4602      	movne	r2, r0
   b74ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b74d2:	bf06      	itte	eq
   b74d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b74d8:	ea91 0f03 	teqeq	r1, r3
   b74dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b74e0:	bd30      	pop	{r4, r5, pc}
   b74e2:	bf00      	nop

000b74e4 <__aeabi_ui2d>:
   b74e4:	f090 0f00 	teq	r0, #0
   b74e8:	bf04      	itt	eq
   b74ea:	2100      	moveq	r1, #0
   b74ec:	4770      	bxeq	lr
   b74ee:	b530      	push	{r4, r5, lr}
   b74f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b74f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b74f8:	f04f 0500 	mov.w	r5, #0
   b74fc:	f04f 0100 	mov.w	r1, #0
   b7500:	e750      	b.n	b73a4 <__adddf3+0x138>
   b7502:	bf00      	nop

000b7504 <__aeabi_i2d>:
   b7504:	f090 0f00 	teq	r0, #0
   b7508:	bf04      	itt	eq
   b750a:	2100      	moveq	r1, #0
   b750c:	4770      	bxeq	lr
   b750e:	b530      	push	{r4, r5, lr}
   b7510:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7514:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7518:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b751c:	bf48      	it	mi
   b751e:	4240      	negmi	r0, r0
   b7520:	f04f 0100 	mov.w	r1, #0
   b7524:	e73e      	b.n	b73a4 <__adddf3+0x138>
   b7526:	bf00      	nop

000b7528 <__aeabi_f2d>:
   b7528:	0042      	lsls	r2, r0, #1
   b752a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b752e:	ea4f 0131 	mov.w	r1, r1, rrx
   b7532:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7536:	bf1f      	itttt	ne
   b7538:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b753c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7540:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7544:	4770      	bxne	lr
   b7546:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b754a:	bf08      	it	eq
   b754c:	4770      	bxeq	lr
   b754e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7552:	bf04      	itt	eq
   b7554:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7558:	4770      	bxeq	lr
   b755a:	b530      	push	{r4, r5, lr}
   b755c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7564:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7568:	e71c      	b.n	b73a4 <__adddf3+0x138>
   b756a:	bf00      	nop

000b756c <__aeabi_ul2d>:
   b756c:	ea50 0201 	orrs.w	r2, r0, r1
   b7570:	bf08      	it	eq
   b7572:	4770      	bxeq	lr
   b7574:	b530      	push	{r4, r5, lr}
   b7576:	f04f 0500 	mov.w	r5, #0
   b757a:	e00a      	b.n	b7592 <__aeabi_l2d+0x16>

000b757c <__aeabi_l2d>:
   b757c:	ea50 0201 	orrs.w	r2, r0, r1
   b7580:	bf08      	it	eq
   b7582:	4770      	bxeq	lr
   b7584:	b530      	push	{r4, r5, lr}
   b7586:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b758a:	d502      	bpl.n	b7592 <__aeabi_l2d+0x16>
   b758c:	4240      	negs	r0, r0
   b758e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7592:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7596:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b759a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b759e:	f43f aed8 	beq.w	b7352 <__adddf3+0xe6>
   b75a2:	f04f 0203 	mov.w	r2, #3
   b75a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b75aa:	bf18      	it	ne
   b75ac:	3203      	addne	r2, #3
   b75ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b75b2:	bf18      	it	ne
   b75b4:	3203      	addne	r2, #3
   b75b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b75ba:	f1c2 0320 	rsb	r3, r2, #32
   b75be:	fa00 fc03 	lsl.w	ip, r0, r3
   b75c2:	fa20 f002 	lsr.w	r0, r0, r2
   b75c6:	fa01 fe03 	lsl.w	lr, r1, r3
   b75ca:	ea40 000e 	orr.w	r0, r0, lr
   b75ce:	fa21 f102 	lsr.w	r1, r1, r2
   b75d2:	4414      	add	r4, r2
   b75d4:	e6bd      	b.n	b7352 <__adddf3+0xe6>
   b75d6:	bf00      	nop

000b75d8 <__aeabi_dmul>:
   b75d8:	b570      	push	{r4, r5, r6, lr}
   b75da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b75de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b75e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b75e6:	bf1d      	ittte	ne
   b75e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b75ec:	ea94 0f0c 	teqne	r4, ip
   b75f0:	ea95 0f0c 	teqne	r5, ip
   b75f4:	f000 f8de 	bleq	b77b4 <__aeabi_dmul+0x1dc>
   b75f8:	442c      	add	r4, r5
   b75fa:	ea81 0603 	eor.w	r6, r1, r3
   b75fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7602:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7606:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b760a:	bf18      	it	ne
   b760c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7610:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7618:	d038      	beq.n	b768c <__aeabi_dmul+0xb4>
   b761a:	fba0 ce02 	umull	ip, lr, r0, r2
   b761e:	f04f 0500 	mov.w	r5, #0
   b7622:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7626:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b762a:	fbe0 e503 	umlal	lr, r5, r0, r3
   b762e:	f04f 0600 	mov.w	r6, #0
   b7632:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7636:	f09c 0f00 	teq	ip, #0
   b763a:	bf18      	it	ne
   b763c:	f04e 0e01 	orrne.w	lr, lr, #1
   b7640:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7644:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7648:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b764c:	d204      	bcs.n	b7658 <__aeabi_dmul+0x80>
   b764e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7652:	416d      	adcs	r5, r5
   b7654:	eb46 0606 	adc.w	r6, r6, r6
   b7658:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b765c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7660:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7664:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7668:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b766c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7670:	bf88      	it	hi
   b7672:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7676:	d81e      	bhi.n	b76b6 <__aeabi_dmul+0xde>
   b7678:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b767c:	bf08      	it	eq
   b767e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7682:	f150 0000 	adcs.w	r0, r0, #0
   b7686:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b768a:	bd70      	pop	{r4, r5, r6, pc}
   b768c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7690:	ea46 0101 	orr.w	r1, r6, r1
   b7694:	ea40 0002 	orr.w	r0, r0, r2
   b7698:	ea81 0103 	eor.w	r1, r1, r3
   b769c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b76a0:	bfc2      	ittt	gt
   b76a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b76a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b76aa:	bd70      	popgt	{r4, r5, r6, pc}
   b76ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b76b0:	f04f 0e00 	mov.w	lr, #0
   b76b4:	3c01      	subs	r4, #1
   b76b6:	f300 80ab 	bgt.w	b7810 <__aeabi_dmul+0x238>
   b76ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b76be:	bfde      	ittt	le
   b76c0:	2000      	movle	r0, #0
   b76c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b76c6:	bd70      	pople	{r4, r5, r6, pc}
   b76c8:	f1c4 0400 	rsb	r4, r4, #0
   b76cc:	3c20      	subs	r4, #32
   b76ce:	da35      	bge.n	b773c <__aeabi_dmul+0x164>
   b76d0:	340c      	adds	r4, #12
   b76d2:	dc1b      	bgt.n	b770c <__aeabi_dmul+0x134>
   b76d4:	f104 0414 	add.w	r4, r4, #20
   b76d8:	f1c4 0520 	rsb	r5, r4, #32
   b76dc:	fa00 f305 	lsl.w	r3, r0, r5
   b76e0:	fa20 f004 	lsr.w	r0, r0, r4
   b76e4:	fa01 f205 	lsl.w	r2, r1, r5
   b76e8:	ea40 0002 	orr.w	r0, r0, r2
   b76ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b76f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b76f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b76f8:	fa21 f604 	lsr.w	r6, r1, r4
   b76fc:	eb42 0106 	adc.w	r1, r2, r6
   b7700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7704:	bf08      	it	eq
   b7706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b770a:	bd70      	pop	{r4, r5, r6, pc}
   b770c:	f1c4 040c 	rsb	r4, r4, #12
   b7710:	f1c4 0520 	rsb	r5, r4, #32
   b7714:	fa00 f304 	lsl.w	r3, r0, r4
   b7718:	fa20 f005 	lsr.w	r0, r0, r5
   b771c:	fa01 f204 	lsl.w	r2, r1, r4
   b7720:	ea40 0002 	orr.w	r0, r0, r2
   b7724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b772c:	f141 0100 	adc.w	r1, r1, #0
   b7730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7734:	bf08      	it	eq
   b7736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b773a:	bd70      	pop	{r4, r5, r6, pc}
   b773c:	f1c4 0520 	rsb	r5, r4, #32
   b7740:	fa00 f205 	lsl.w	r2, r0, r5
   b7744:	ea4e 0e02 	orr.w	lr, lr, r2
   b7748:	fa20 f304 	lsr.w	r3, r0, r4
   b774c:	fa01 f205 	lsl.w	r2, r1, r5
   b7750:	ea43 0302 	orr.w	r3, r3, r2
   b7754:	fa21 f004 	lsr.w	r0, r1, r4
   b7758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b775c:	fa21 f204 	lsr.w	r2, r1, r4
   b7760:	ea20 0002 	bic.w	r0, r0, r2
   b7764:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b776c:	bf08      	it	eq
   b776e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7772:	bd70      	pop	{r4, r5, r6, pc}
   b7774:	f094 0f00 	teq	r4, #0
   b7778:	d10f      	bne.n	b779a <__aeabi_dmul+0x1c2>
   b777a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b777e:	0040      	lsls	r0, r0, #1
   b7780:	eb41 0101 	adc.w	r1, r1, r1
   b7784:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7788:	bf08      	it	eq
   b778a:	3c01      	subeq	r4, #1
   b778c:	d0f7      	beq.n	b777e <__aeabi_dmul+0x1a6>
   b778e:	ea41 0106 	orr.w	r1, r1, r6
   b7792:	f095 0f00 	teq	r5, #0
   b7796:	bf18      	it	ne
   b7798:	4770      	bxne	lr
   b779a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b779e:	0052      	lsls	r2, r2, #1
   b77a0:	eb43 0303 	adc.w	r3, r3, r3
   b77a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b77a8:	bf08      	it	eq
   b77aa:	3d01      	subeq	r5, #1
   b77ac:	d0f7      	beq.n	b779e <__aeabi_dmul+0x1c6>
   b77ae:	ea43 0306 	orr.w	r3, r3, r6
   b77b2:	4770      	bx	lr
   b77b4:	ea94 0f0c 	teq	r4, ip
   b77b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b77bc:	bf18      	it	ne
   b77be:	ea95 0f0c 	teqne	r5, ip
   b77c2:	d00c      	beq.n	b77de <__aeabi_dmul+0x206>
   b77c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b77c8:	bf18      	it	ne
   b77ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b77ce:	d1d1      	bne.n	b7774 <__aeabi_dmul+0x19c>
   b77d0:	ea81 0103 	eor.w	r1, r1, r3
   b77d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b77d8:	f04f 0000 	mov.w	r0, #0
   b77dc:	bd70      	pop	{r4, r5, r6, pc}
   b77de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b77e2:	bf06      	itte	eq
   b77e4:	4610      	moveq	r0, r2
   b77e6:	4619      	moveq	r1, r3
   b77e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b77ec:	d019      	beq.n	b7822 <__aeabi_dmul+0x24a>
   b77ee:	ea94 0f0c 	teq	r4, ip
   b77f2:	d102      	bne.n	b77fa <__aeabi_dmul+0x222>
   b77f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b77f8:	d113      	bne.n	b7822 <__aeabi_dmul+0x24a>
   b77fa:	ea95 0f0c 	teq	r5, ip
   b77fe:	d105      	bne.n	b780c <__aeabi_dmul+0x234>
   b7800:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7804:	bf1c      	itt	ne
   b7806:	4610      	movne	r0, r2
   b7808:	4619      	movne	r1, r3
   b780a:	d10a      	bne.n	b7822 <__aeabi_dmul+0x24a>
   b780c:	ea81 0103 	eor.w	r1, r1, r3
   b7810:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7814:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7818:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b781c:	f04f 0000 	mov.w	r0, #0
   b7820:	bd70      	pop	{r4, r5, r6, pc}
   b7822:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7826:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b782a:	bd70      	pop	{r4, r5, r6, pc}

000b782c <__aeabi_ddiv>:
   b782c:	b570      	push	{r4, r5, r6, lr}
   b782e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7832:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7836:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b783a:	bf1d      	ittte	ne
   b783c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7840:	ea94 0f0c 	teqne	r4, ip
   b7844:	ea95 0f0c 	teqne	r5, ip
   b7848:	f000 f8a7 	bleq	b799a <__aeabi_ddiv+0x16e>
   b784c:	eba4 0405 	sub.w	r4, r4, r5
   b7850:	ea81 0e03 	eor.w	lr, r1, r3
   b7854:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7858:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b785c:	f000 8088 	beq.w	b7970 <__aeabi_ddiv+0x144>
   b7860:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7864:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7868:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b786c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7870:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7874:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7878:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b787c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7880:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7884:	429d      	cmp	r5, r3
   b7886:	bf08      	it	eq
   b7888:	4296      	cmpeq	r6, r2
   b788a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b788e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7892:	d202      	bcs.n	b789a <__aeabi_ddiv+0x6e>
   b7894:	085b      	lsrs	r3, r3, #1
   b7896:	ea4f 0232 	mov.w	r2, r2, rrx
   b789a:	1ab6      	subs	r6, r6, r2
   b789c:	eb65 0503 	sbc.w	r5, r5, r3
   b78a0:	085b      	lsrs	r3, r3, #1
   b78a2:	ea4f 0232 	mov.w	r2, r2, rrx
   b78a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b78aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b78ae:	ebb6 0e02 	subs.w	lr, r6, r2
   b78b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b78b6:	bf22      	ittt	cs
   b78b8:	1ab6      	subcs	r6, r6, r2
   b78ba:	4675      	movcs	r5, lr
   b78bc:	ea40 000c 	orrcs.w	r0, r0, ip
   b78c0:	085b      	lsrs	r3, r3, #1
   b78c2:	ea4f 0232 	mov.w	r2, r2, rrx
   b78c6:	ebb6 0e02 	subs.w	lr, r6, r2
   b78ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   b78ce:	bf22      	ittt	cs
   b78d0:	1ab6      	subcs	r6, r6, r2
   b78d2:	4675      	movcs	r5, lr
   b78d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b78d8:	085b      	lsrs	r3, r3, #1
   b78da:	ea4f 0232 	mov.w	r2, r2, rrx
   b78de:	ebb6 0e02 	subs.w	lr, r6, r2
   b78e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b78e6:	bf22      	ittt	cs
   b78e8:	1ab6      	subcs	r6, r6, r2
   b78ea:	4675      	movcs	r5, lr
   b78ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b78f0:	085b      	lsrs	r3, r3, #1
   b78f2:	ea4f 0232 	mov.w	r2, r2, rrx
   b78f6:	ebb6 0e02 	subs.w	lr, r6, r2
   b78fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   b78fe:	bf22      	ittt	cs
   b7900:	1ab6      	subcs	r6, r6, r2
   b7902:	4675      	movcs	r5, lr
   b7904:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7908:	ea55 0e06 	orrs.w	lr, r5, r6
   b790c:	d018      	beq.n	b7940 <__aeabi_ddiv+0x114>
   b790e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b7912:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b7916:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b791a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b791e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b7922:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b7926:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b792a:	d1c0      	bne.n	b78ae <__aeabi_ddiv+0x82>
   b792c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7930:	d10b      	bne.n	b794a <__aeabi_ddiv+0x11e>
   b7932:	ea41 0100 	orr.w	r1, r1, r0
   b7936:	f04f 0000 	mov.w	r0, #0
   b793a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b793e:	e7b6      	b.n	b78ae <__aeabi_ddiv+0x82>
   b7940:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7944:	bf04      	itt	eq
   b7946:	4301      	orreq	r1, r0
   b7948:	2000      	moveq	r0, #0
   b794a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b794e:	bf88      	it	hi
   b7950:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7954:	f63f aeaf 	bhi.w	b76b6 <__aeabi_dmul+0xde>
   b7958:	ebb5 0c03 	subs.w	ip, r5, r3
   b795c:	bf04      	itt	eq
   b795e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b7962:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7966:	f150 0000 	adcs.w	r0, r0, #0
   b796a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b796e:	bd70      	pop	{r4, r5, r6, pc}
   b7970:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7974:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7978:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b797c:	bfc2      	ittt	gt
   b797e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7982:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7986:	bd70      	popgt	{r4, r5, r6, pc}
   b7988:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b798c:	f04f 0e00 	mov.w	lr, #0
   b7990:	3c01      	subs	r4, #1
   b7992:	e690      	b.n	b76b6 <__aeabi_dmul+0xde>
   b7994:	ea45 0e06 	orr.w	lr, r5, r6
   b7998:	e68d      	b.n	b76b6 <__aeabi_dmul+0xde>
   b799a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b799e:	ea94 0f0c 	teq	r4, ip
   b79a2:	bf08      	it	eq
   b79a4:	ea95 0f0c 	teqeq	r5, ip
   b79a8:	f43f af3b 	beq.w	b7822 <__aeabi_dmul+0x24a>
   b79ac:	ea94 0f0c 	teq	r4, ip
   b79b0:	d10a      	bne.n	b79c8 <__aeabi_ddiv+0x19c>
   b79b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b79b6:	f47f af34 	bne.w	b7822 <__aeabi_dmul+0x24a>
   b79ba:	ea95 0f0c 	teq	r5, ip
   b79be:	f47f af25 	bne.w	b780c <__aeabi_dmul+0x234>
   b79c2:	4610      	mov	r0, r2
   b79c4:	4619      	mov	r1, r3
   b79c6:	e72c      	b.n	b7822 <__aeabi_dmul+0x24a>
   b79c8:	ea95 0f0c 	teq	r5, ip
   b79cc:	d106      	bne.n	b79dc <__aeabi_ddiv+0x1b0>
   b79ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b79d2:	f43f aefd 	beq.w	b77d0 <__aeabi_dmul+0x1f8>
   b79d6:	4610      	mov	r0, r2
   b79d8:	4619      	mov	r1, r3
   b79da:	e722      	b.n	b7822 <__aeabi_dmul+0x24a>
   b79dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b79e0:	bf18      	it	ne
   b79e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b79e6:	f47f aec5 	bne.w	b7774 <__aeabi_dmul+0x19c>
   b79ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b79ee:	f47f af0d 	bne.w	b780c <__aeabi_dmul+0x234>
   b79f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b79f6:	f47f aeeb 	bne.w	b77d0 <__aeabi_dmul+0x1f8>
   b79fa:	e712      	b.n	b7822 <__aeabi_dmul+0x24a>

000b79fc <__aeabi_d2f>:
   b79fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b7a04:	bf24      	itt	cs
   b7a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b7a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b7a0e:	d90d      	bls.n	b7a2c <__aeabi_d2f+0x30>
   b7a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b7a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b7a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b7a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b7a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7a24:	bf08      	it	eq
   b7a26:	f020 0001 	biceq.w	r0, r0, #1
   b7a2a:	4770      	bx	lr
   b7a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b7a30:	d121      	bne.n	b7a76 <__aeabi_d2f+0x7a>
   b7a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7a36:	bfbc      	itt	lt
   b7a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7a3c:	4770      	bxlt	lr
   b7a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7a46:	f1c2 0218 	rsb	r2, r2, #24
   b7a4a:	f1c2 0c20 	rsb	ip, r2, #32
   b7a4e:	fa10 f30c 	lsls.w	r3, r0, ip
   b7a52:	fa20 f002 	lsr.w	r0, r0, r2
   b7a56:	bf18      	it	ne
   b7a58:	f040 0001 	orrne.w	r0, r0, #1
   b7a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7a64:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7a68:	ea40 000c 	orr.w	r0, r0, ip
   b7a6c:	fa23 f302 	lsr.w	r3, r3, r2
   b7a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7a74:	e7cc      	b.n	b7a10 <__aeabi_d2f+0x14>
   b7a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7a7a:	d107      	bne.n	b7a8c <__aeabi_d2f+0x90>
   b7a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7a80:	bf1e      	ittt	ne
   b7a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7a8a:	4770      	bxne	lr
   b7a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7a98:	4770      	bx	lr
   b7a9a:	bf00      	nop

000b7a9c <atexit>:
   b7a9c:	2300      	movs	r3, #0
   b7a9e:	4601      	mov	r1, r0
   b7aa0:	461a      	mov	r2, r3
   b7aa2:	4618      	mov	r0, r3
   b7aa4:	f000 b96a 	b.w	b7d7c <__register_exitproc>

000b7aa8 <isprint>:
   b7aa8:	4b02      	ldr	r3, [pc, #8]	; (b7ab4 <isprint+0xc>)
   b7aaa:	4418      	add	r0, r3
   b7aac:	7840      	ldrb	r0, [r0, #1]
   b7aae:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b7ab2:	4770      	bx	lr
   b7ab4:	000b8302 	.word	0x000b8302

000b7ab8 <memcpy>:
   b7ab8:	440a      	add	r2, r1
   b7aba:	4291      	cmp	r1, r2
   b7abc:	f100 33ff 	add.w	r3, r0, #4294967295
   b7ac0:	d100      	bne.n	b7ac4 <memcpy+0xc>
   b7ac2:	4770      	bx	lr
   b7ac4:	b510      	push	{r4, lr}
   b7ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7aca:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7ace:	4291      	cmp	r1, r2
   b7ad0:	d1f9      	bne.n	b7ac6 <memcpy+0xe>
   b7ad2:	bd10      	pop	{r4, pc}

000b7ad4 <memmove>:
   b7ad4:	4288      	cmp	r0, r1
   b7ad6:	b510      	push	{r4, lr}
   b7ad8:	eb01 0402 	add.w	r4, r1, r2
   b7adc:	d902      	bls.n	b7ae4 <memmove+0x10>
   b7ade:	4284      	cmp	r4, r0
   b7ae0:	4623      	mov	r3, r4
   b7ae2:	d807      	bhi.n	b7af4 <memmove+0x20>
   b7ae4:	1e43      	subs	r3, r0, #1
   b7ae6:	42a1      	cmp	r1, r4
   b7ae8:	d008      	beq.n	b7afc <memmove+0x28>
   b7aea:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7aee:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7af2:	e7f8      	b.n	b7ae6 <memmove+0x12>
   b7af4:	4402      	add	r2, r0
   b7af6:	4601      	mov	r1, r0
   b7af8:	428a      	cmp	r2, r1
   b7afa:	d100      	bne.n	b7afe <memmove+0x2a>
   b7afc:	bd10      	pop	{r4, pc}
   b7afe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b7b02:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b7b06:	e7f7      	b.n	b7af8 <memmove+0x24>

000b7b08 <memset>:
   b7b08:	4402      	add	r2, r0
   b7b0a:	4603      	mov	r3, r0
   b7b0c:	4293      	cmp	r3, r2
   b7b0e:	d100      	bne.n	b7b12 <memset+0xa>
   b7b10:	4770      	bx	lr
   b7b12:	f803 1b01 	strb.w	r1, [r3], #1
   b7b16:	e7f9      	b.n	b7b0c <memset+0x4>

000b7b18 <srand>:
   b7b18:	b538      	push	{r3, r4, r5, lr}
   b7b1a:	4b10      	ldr	r3, [pc, #64]	; (b7b5c <srand+0x44>)
   b7b1c:	681d      	ldr	r5, [r3, #0]
   b7b1e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7b20:	4604      	mov	r4, r0
   b7b22:	b9b3      	cbnz	r3, b7b52 <srand+0x3a>
   b7b24:	2018      	movs	r0, #24
   b7b26:	f7fd f8f5 	bl	b4d14 <malloc>
   b7b2a:	4602      	mov	r2, r0
   b7b2c:	63a8      	str	r0, [r5, #56]	; 0x38
   b7b2e:	b920      	cbnz	r0, b7b3a <srand+0x22>
   b7b30:	4b0b      	ldr	r3, [pc, #44]	; (b7b60 <srand+0x48>)
   b7b32:	480c      	ldr	r0, [pc, #48]	; (b7b64 <srand+0x4c>)
   b7b34:	2142      	movs	r1, #66	; 0x42
   b7b36:	f7fd f92d 	bl	b4d94 <__assert_func>
   b7b3a:	490b      	ldr	r1, [pc, #44]	; (b7b68 <srand+0x50>)
   b7b3c:	4b0b      	ldr	r3, [pc, #44]	; (b7b6c <srand+0x54>)
   b7b3e:	e9c0 1300 	strd	r1, r3, [r0]
   b7b42:	4b0b      	ldr	r3, [pc, #44]	; (b7b70 <srand+0x58>)
   b7b44:	6083      	str	r3, [r0, #8]
   b7b46:	230b      	movs	r3, #11
   b7b48:	8183      	strh	r3, [r0, #12]
   b7b4a:	2100      	movs	r1, #0
   b7b4c:	2001      	movs	r0, #1
   b7b4e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7b52:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7b54:	2200      	movs	r2, #0
   b7b56:	611c      	str	r4, [r3, #16]
   b7b58:	615a      	str	r2, [r3, #20]
   b7b5a:	bd38      	pop	{r3, r4, r5, pc}
   b7b5c:	2003e458 	.word	0x2003e458
   b7b60:	000b826e 	.word	0x000b826e
   b7b64:	000b8285 	.word	0x000b8285
   b7b68:	abcd330e 	.word	0xabcd330e
   b7b6c:	e66d1234 	.word	0xe66d1234
   b7b70:	0005deec 	.word	0x0005deec

000b7b74 <strchr>:
   b7b74:	b2c9      	uxtb	r1, r1
   b7b76:	4603      	mov	r3, r0
   b7b78:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7b7c:	b11a      	cbz	r2, b7b86 <strchr+0x12>
   b7b7e:	428a      	cmp	r2, r1
   b7b80:	d1f9      	bne.n	b7b76 <strchr+0x2>
   b7b82:	4618      	mov	r0, r3
   b7b84:	4770      	bx	lr
   b7b86:	2900      	cmp	r1, #0
   b7b88:	bf18      	it	ne
   b7b8a:	2300      	movne	r3, #0
   b7b8c:	e7f9      	b.n	b7b82 <strchr+0xe>

000b7b8e <strchrnul>:
   b7b8e:	b510      	push	{r4, lr}
   b7b90:	4604      	mov	r4, r0
   b7b92:	f7ff ffef 	bl	b7b74 <strchr>
   b7b96:	b918      	cbnz	r0, b7ba0 <strchrnul+0x12>
   b7b98:	4620      	mov	r0, r4
   b7b9a:	f000 f832 	bl	b7c02 <strlen>
   b7b9e:	4420      	add	r0, r4
   b7ba0:	bd10      	pop	{r4, pc}

000b7ba2 <strcmp>:
   b7ba2:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7ba6:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7baa:	2a01      	cmp	r2, #1
   b7bac:	bf28      	it	cs
   b7bae:	429a      	cmpcs	r2, r3
   b7bb0:	d0f7      	beq.n	b7ba2 <strcmp>
   b7bb2:	1ad0      	subs	r0, r2, r3
   b7bb4:	4770      	bx	lr

000b7bb6 <strcpy>:
   b7bb6:	4603      	mov	r3, r0
   b7bb8:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7bbc:	f803 2b01 	strb.w	r2, [r3], #1
   b7bc0:	2a00      	cmp	r2, #0
   b7bc2:	d1f9      	bne.n	b7bb8 <strcpy+0x2>
   b7bc4:	4770      	bx	lr
	...

000b7bc8 <strdup>:
   b7bc8:	4b02      	ldr	r3, [pc, #8]	; (b7bd4 <strdup+0xc>)
   b7bca:	4601      	mov	r1, r0
   b7bcc:	6818      	ldr	r0, [r3, #0]
   b7bce:	f000 b803 	b.w	b7bd8 <_strdup_r>
   b7bd2:	bf00      	nop
   b7bd4:	2003e458 	.word	0x2003e458

000b7bd8 <_strdup_r>:
   b7bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7bda:	4604      	mov	r4, r0
   b7bdc:	4608      	mov	r0, r1
   b7bde:	460d      	mov	r5, r1
   b7be0:	f000 f80f 	bl	b7c02 <strlen>
   b7be4:	1c42      	adds	r2, r0, #1
   b7be6:	4611      	mov	r1, r2
   b7be8:	4620      	mov	r0, r4
   b7bea:	9201      	str	r2, [sp, #4]
   b7bec:	f7fd f8c2 	bl	b4d74 <_malloc_r>
   b7bf0:	4604      	mov	r4, r0
   b7bf2:	b118      	cbz	r0, b7bfc <_strdup_r+0x24>
   b7bf4:	9a01      	ldr	r2, [sp, #4]
   b7bf6:	4629      	mov	r1, r5
   b7bf8:	f7ff ff5e 	bl	b7ab8 <memcpy>
   b7bfc:	4620      	mov	r0, r4
   b7bfe:	b003      	add	sp, #12
   b7c00:	bd30      	pop	{r4, r5, pc}

000b7c02 <strlen>:
   b7c02:	4603      	mov	r3, r0
   b7c04:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7c08:	2a00      	cmp	r2, #0
   b7c0a:	d1fb      	bne.n	b7c04 <strlen+0x2>
   b7c0c:	1a18      	subs	r0, r3, r0
   b7c0e:	3801      	subs	r0, #1
   b7c10:	4770      	bx	lr

000b7c12 <strncmp>:
   b7c12:	b510      	push	{r4, lr}
   b7c14:	b17a      	cbz	r2, b7c36 <strncmp+0x24>
   b7c16:	4603      	mov	r3, r0
   b7c18:	3901      	subs	r1, #1
   b7c1a:	1884      	adds	r4, r0, r2
   b7c1c:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7c20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7c24:	4290      	cmp	r0, r2
   b7c26:	d101      	bne.n	b7c2c <strncmp+0x1a>
   b7c28:	42a3      	cmp	r3, r4
   b7c2a:	d101      	bne.n	b7c30 <strncmp+0x1e>
   b7c2c:	1a80      	subs	r0, r0, r2
   b7c2e:	bd10      	pop	{r4, pc}
   b7c30:	2800      	cmp	r0, #0
   b7c32:	d1f3      	bne.n	b7c1c <strncmp+0xa>
   b7c34:	e7fa      	b.n	b7c2c <strncmp+0x1a>
   b7c36:	4610      	mov	r0, r2
   b7c38:	e7f9      	b.n	b7c2e <strncmp+0x1c>

000b7c3a <strrchr>:
   b7c3a:	b538      	push	{r3, r4, r5, lr}
   b7c3c:	4603      	mov	r3, r0
   b7c3e:	460c      	mov	r4, r1
   b7c40:	b969      	cbnz	r1, b7c5e <strrchr+0x24>
   b7c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7c46:	f7ff bf95 	b.w	b7b74 <strchr>
   b7c4a:	1c43      	adds	r3, r0, #1
   b7c4c:	4605      	mov	r5, r0
   b7c4e:	4621      	mov	r1, r4
   b7c50:	4618      	mov	r0, r3
   b7c52:	f7ff ff8f 	bl	b7b74 <strchr>
   b7c56:	2800      	cmp	r0, #0
   b7c58:	d1f7      	bne.n	b7c4a <strrchr+0x10>
   b7c5a:	4628      	mov	r0, r5
   b7c5c:	bd38      	pop	{r3, r4, r5, pc}
   b7c5e:	2500      	movs	r5, #0
   b7c60:	e7f5      	b.n	b7c4e <strrchr+0x14>
	...

000b7c64 <_strtol_l.constprop.0>:
   b7c64:	2b01      	cmp	r3, #1
   b7c66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7c6a:	d001      	beq.n	b7c70 <_strtol_l.constprop.0+0xc>
   b7c6c:	2b24      	cmp	r3, #36	; 0x24
   b7c6e:	d906      	bls.n	b7c7e <_strtol_l.constprop.0+0x1a>
   b7c70:	f7fd f888 	bl	b4d84 <__errno>
   b7c74:	2316      	movs	r3, #22
   b7c76:	6003      	str	r3, [r0, #0]
   b7c78:	2000      	movs	r0, #0
   b7c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7c7e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b7d64 <_strtol_l.constprop.0+0x100>
   b7c82:	460d      	mov	r5, r1
   b7c84:	462e      	mov	r6, r5
   b7c86:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7c8a:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7c8e:	f017 0708 	ands.w	r7, r7, #8
   b7c92:	d1f7      	bne.n	b7c84 <_strtol_l.constprop.0+0x20>
   b7c94:	2c2d      	cmp	r4, #45	; 0x2d
   b7c96:	d132      	bne.n	b7cfe <_strtol_l.constprop.0+0x9a>
   b7c98:	782c      	ldrb	r4, [r5, #0]
   b7c9a:	2701      	movs	r7, #1
   b7c9c:	1cb5      	adds	r5, r6, #2
   b7c9e:	2b00      	cmp	r3, #0
   b7ca0:	d05b      	beq.n	b7d5a <_strtol_l.constprop.0+0xf6>
   b7ca2:	2b10      	cmp	r3, #16
   b7ca4:	d109      	bne.n	b7cba <_strtol_l.constprop.0+0x56>
   b7ca6:	2c30      	cmp	r4, #48	; 0x30
   b7ca8:	d107      	bne.n	b7cba <_strtol_l.constprop.0+0x56>
   b7caa:	782c      	ldrb	r4, [r5, #0]
   b7cac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7cb0:	2c58      	cmp	r4, #88	; 0x58
   b7cb2:	d14d      	bne.n	b7d50 <_strtol_l.constprop.0+0xec>
   b7cb4:	786c      	ldrb	r4, [r5, #1]
   b7cb6:	2310      	movs	r3, #16
   b7cb8:	3502      	adds	r5, #2
   b7cba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7cbe:	f108 38ff 	add.w	r8, r8, #4294967295
   b7cc2:	f04f 0c00 	mov.w	ip, #0
   b7cc6:	fbb8 f9f3 	udiv	r9, r8, r3
   b7cca:	4666      	mov	r6, ip
   b7ccc:	fb03 8a19 	mls	sl, r3, r9, r8
   b7cd0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7cd4:	f1be 0f09 	cmp.w	lr, #9
   b7cd8:	d816      	bhi.n	b7d08 <_strtol_l.constprop.0+0xa4>
   b7cda:	4674      	mov	r4, lr
   b7cdc:	42a3      	cmp	r3, r4
   b7cde:	dd24      	ble.n	b7d2a <_strtol_l.constprop.0+0xc6>
   b7ce0:	f1bc 0f00 	cmp.w	ip, #0
   b7ce4:	db1e      	blt.n	b7d24 <_strtol_l.constprop.0+0xc0>
   b7ce6:	45b1      	cmp	r9, r6
   b7ce8:	d31c      	bcc.n	b7d24 <_strtol_l.constprop.0+0xc0>
   b7cea:	d101      	bne.n	b7cf0 <_strtol_l.constprop.0+0x8c>
   b7cec:	45a2      	cmp	sl, r4
   b7cee:	db19      	blt.n	b7d24 <_strtol_l.constprop.0+0xc0>
   b7cf0:	fb06 4603 	mla	r6, r6, r3, r4
   b7cf4:	f04f 0c01 	mov.w	ip, #1
   b7cf8:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7cfc:	e7e8      	b.n	b7cd0 <_strtol_l.constprop.0+0x6c>
   b7cfe:	2c2b      	cmp	r4, #43	; 0x2b
   b7d00:	bf04      	itt	eq
   b7d02:	782c      	ldrbeq	r4, [r5, #0]
   b7d04:	1cb5      	addeq	r5, r6, #2
   b7d06:	e7ca      	b.n	b7c9e <_strtol_l.constprop.0+0x3a>
   b7d08:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7d0c:	f1be 0f19 	cmp.w	lr, #25
   b7d10:	d801      	bhi.n	b7d16 <_strtol_l.constprop.0+0xb2>
   b7d12:	3c37      	subs	r4, #55	; 0x37
   b7d14:	e7e2      	b.n	b7cdc <_strtol_l.constprop.0+0x78>
   b7d16:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b7d1a:	f1be 0f19 	cmp.w	lr, #25
   b7d1e:	d804      	bhi.n	b7d2a <_strtol_l.constprop.0+0xc6>
   b7d20:	3c57      	subs	r4, #87	; 0x57
   b7d22:	e7db      	b.n	b7cdc <_strtol_l.constprop.0+0x78>
   b7d24:	f04f 3cff 	mov.w	ip, #4294967295
   b7d28:	e7e6      	b.n	b7cf8 <_strtol_l.constprop.0+0x94>
   b7d2a:	f1bc 0f00 	cmp.w	ip, #0
   b7d2e:	da05      	bge.n	b7d3c <_strtol_l.constprop.0+0xd8>
   b7d30:	2322      	movs	r3, #34	; 0x22
   b7d32:	6003      	str	r3, [r0, #0]
   b7d34:	4646      	mov	r6, r8
   b7d36:	b942      	cbnz	r2, b7d4a <_strtol_l.constprop.0+0xe6>
   b7d38:	4630      	mov	r0, r6
   b7d3a:	e79e      	b.n	b7c7a <_strtol_l.constprop.0+0x16>
   b7d3c:	b107      	cbz	r7, b7d40 <_strtol_l.constprop.0+0xdc>
   b7d3e:	4276      	negs	r6, r6
   b7d40:	2a00      	cmp	r2, #0
   b7d42:	d0f9      	beq.n	b7d38 <_strtol_l.constprop.0+0xd4>
   b7d44:	f1bc 0f00 	cmp.w	ip, #0
   b7d48:	d000      	beq.n	b7d4c <_strtol_l.constprop.0+0xe8>
   b7d4a:	1e69      	subs	r1, r5, #1
   b7d4c:	6011      	str	r1, [r2, #0]
   b7d4e:	e7f3      	b.n	b7d38 <_strtol_l.constprop.0+0xd4>
   b7d50:	2430      	movs	r4, #48	; 0x30
   b7d52:	2b00      	cmp	r3, #0
   b7d54:	d1b1      	bne.n	b7cba <_strtol_l.constprop.0+0x56>
   b7d56:	2308      	movs	r3, #8
   b7d58:	e7af      	b.n	b7cba <_strtol_l.constprop.0+0x56>
   b7d5a:	2c30      	cmp	r4, #48	; 0x30
   b7d5c:	d0a5      	beq.n	b7caa <_strtol_l.constprop.0+0x46>
   b7d5e:	230a      	movs	r3, #10
   b7d60:	e7ab      	b.n	b7cba <_strtol_l.constprop.0+0x56>
   b7d62:	bf00      	nop
   b7d64:	000b8303 	.word	0x000b8303

000b7d68 <strtol>:
   b7d68:	4613      	mov	r3, r2
   b7d6a:	460a      	mov	r2, r1
   b7d6c:	4601      	mov	r1, r0
   b7d6e:	4802      	ldr	r0, [pc, #8]	; (b7d78 <strtol+0x10>)
   b7d70:	6800      	ldr	r0, [r0, #0]
   b7d72:	f7ff bf77 	b.w	b7c64 <_strtol_l.constprop.0>
   b7d76:	bf00      	nop
   b7d78:	2003e458 	.word	0x2003e458

000b7d7c <__register_exitproc>:
   b7d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7d80:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7e3c <__register_exitproc+0xc0>
   b7d84:	4606      	mov	r6, r0
   b7d86:	f8d8 0000 	ldr.w	r0, [r8]
   b7d8a:	461f      	mov	r7, r3
   b7d8c:	460d      	mov	r5, r1
   b7d8e:	4691      	mov	r9, r2
   b7d90:	f000 f856 	bl	b7e40 <__retarget_lock_acquire_recursive>
   b7d94:	4b25      	ldr	r3, [pc, #148]	; (b7e2c <__register_exitproc+0xb0>)
   b7d96:	681c      	ldr	r4, [r3, #0]
   b7d98:	b934      	cbnz	r4, b7da8 <__register_exitproc+0x2c>
   b7d9a:	4c25      	ldr	r4, [pc, #148]	; (b7e30 <__register_exitproc+0xb4>)
   b7d9c:	601c      	str	r4, [r3, #0]
   b7d9e:	4b25      	ldr	r3, [pc, #148]	; (b7e34 <__register_exitproc+0xb8>)
   b7da0:	b113      	cbz	r3, b7da8 <__register_exitproc+0x2c>
   b7da2:	681b      	ldr	r3, [r3, #0]
   b7da4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7da8:	6863      	ldr	r3, [r4, #4]
   b7daa:	2b1f      	cmp	r3, #31
   b7dac:	dd07      	ble.n	b7dbe <__register_exitproc+0x42>
   b7dae:	f8d8 0000 	ldr.w	r0, [r8]
   b7db2:	f000 f847 	bl	b7e44 <__retarget_lock_release_recursive>
   b7db6:	f04f 30ff 	mov.w	r0, #4294967295
   b7dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7dbe:	b34e      	cbz	r6, b7e14 <__register_exitproc+0x98>
   b7dc0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7dc4:	b988      	cbnz	r0, b7dea <__register_exitproc+0x6e>
   b7dc6:	4b1c      	ldr	r3, [pc, #112]	; (b7e38 <__register_exitproc+0xbc>)
   b7dc8:	b923      	cbnz	r3, b7dd4 <__register_exitproc+0x58>
   b7dca:	f8d8 0000 	ldr.w	r0, [r8]
   b7dce:	f000 f838 	bl	b7e42 <__retarget_lock_release>
   b7dd2:	e7f0      	b.n	b7db6 <__register_exitproc+0x3a>
   b7dd4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7dd8:	f7fc ff9c 	bl	b4d14 <malloc>
   b7ddc:	2800      	cmp	r0, #0
   b7dde:	d0f4      	beq.n	b7dca <__register_exitproc+0x4e>
   b7de0:	2300      	movs	r3, #0
   b7de2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7de6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7dea:	6863      	ldr	r3, [r4, #4]
   b7dec:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7df0:	2201      	movs	r2, #1
   b7df2:	409a      	lsls	r2, r3
   b7df4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7df8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7dfc:	4313      	orrs	r3, r2
   b7dfe:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7e02:	2e02      	cmp	r6, #2
   b7e04:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7e08:	bf02      	ittt	eq
   b7e0a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7e0e:	4313      	orreq	r3, r2
   b7e10:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7e14:	6863      	ldr	r3, [r4, #4]
   b7e16:	f8d8 0000 	ldr.w	r0, [r8]
   b7e1a:	1c5a      	adds	r2, r3, #1
   b7e1c:	3302      	adds	r3, #2
   b7e1e:	6062      	str	r2, [r4, #4]
   b7e20:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7e24:	f000 f80e 	bl	b7e44 <__retarget_lock_release_recursive>
   b7e28:	2000      	movs	r0, #0
   b7e2a:	e7c6      	b.n	b7dba <__register_exitproc+0x3e>
   b7e2c:	2003e7e8 	.word	0x2003e7e8
   b7e30:	2003e75c 	.word	0x2003e75c
   b7e34:	00000000 	.word	0x00000000
   b7e38:	000b4d15 	.word	0x000b4d15
   b7e3c:	2003e4bc 	.word	0x2003e4bc

000b7e40 <__retarget_lock_acquire_recursive>:
   b7e40:	4770      	bx	lr

000b7e42 <__retarget_lock_release>:
   b7e42:	4770      	bx	lr

000b7e44 <__retarget_lock_release_recursive>:
   b7e44:	4770      	bx	lr

000b7e46 <link_code_end>:
	...

000b7e48 <dynalib_user>:
   b7e48:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7e58:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7e68:	7620 7269 7574 6c61 5b00 6425 252c 2c64      virtual.[%d,%d,
   b7e78:	6425 252c 2c64 6425 252c 2c64 6425 252c     %d,%d,%d,%d,%d,%
   b7e88:	2c64 6425 252c 2c64 6425 252c 2c64 6425     d,%d,%d,%d,%d,%d
   b7e98:	252c 2c64 6425 252c 2c64 6425 252c 2c64     ,%d,%d,%d,%d,%d,
   b7ea8:	6425 252c 2c64 6425 252c 2c64 6425 252c     %d,%d,%d,%d,%d,%
   b7eb8:	2c64 6425 252c 2c64 6425 252c 2c64 6425     d,%d,%d,%d,%d,%d
   b7ec8:	252c 2c64 6425 252c 2c64 6425 252c 2c64     ,%d,%d,%d,%d,%d,
   b7ed8:	6425 252c 2c64 6425 252c 2c64 6425 252c     %d,%d,%d,%d,%d,%
   b7ee8:	2c64 6425 252c 2c64 6425 252c 2c64 6425     d,%d,%d,%d,%d,%d
   b7ef8:	252c 2c64 6425 252c 2c64 6425 252c 2c64     ,%d,%d,%d,%d,%d,
   b7f08:	6425 252c 2c64 6425 252c 2c64 6425 252c     %d,%d,%d,%d,%d,%
   b7f18:	2c64 6425 252c 2c64 6425 252c 2c64 6425     d,%d,%d,%d,%d,%d
   b7f28:	252c 2c64 6425 252c 2c64 6425 252c 2c64     ,%d,%d,%d,%d,%d,
   b7f38:	6425 252c 2c64 6425 252c 2c64 6425 252c     %d,%d,%d,%d,%d,%
   b7f48:	2c64 6425 252c 2c64 6425 252c 2c64 6425     d,%d,%d,%d,%d,%d
   b7f58:	252c 2c64 6425 252c 2c64 6425 252c 2c64     ,%d,%d,%d,%d,%d,
   b7f68:	6425 252c 2c64 6425 252c 2c64 6425 252c     %d,%d,%d,%d,%d,%
   b7f78:	2c64 6425 252c 5d64 7000 6275 696c 6873     d,%d,%d].publish
   b7f88:	6465 203a 7325 6700 7465 772d 6965 6867     ed: %s.get-weigh
   b7f98:	0074 0000                                   t...

000b7f9c <_ZTVN5spark10LogHandlerE>:
	...
   b7fac:	40a1 000b 40c9 000b                         .@...@..

000b7fb4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b7fbc:	4129 000b 415d 000b 5cf1 000b 40cb 000b     )A..]A...\...@..
   b7fcc:	6157 6873 6e69 5f67 694c 656e 445f 7461     Washing_Line_Dat
   b7fdc:	0061 0000                                   a...

000b7fe0 <_ZTV8HX711ADC>:
	...
   b7fe8:	46f5 000b 46f7 000b                         .F...F..

000b7ff0 <_ZTVN5spark13EthernetClassE>:
	...
   b7ff8:	4e13 000b 4e09 000b 4dff 000b 4df5 000b     .N...N...M...M..
   b8008:	4de9 000b 4ddd 000b 6b3d 000b 6b45 000b     .M...M..=k..Ek..
   b8018:	4dd1 000b 4dc9 000b 4dbf 000b 4db5 000b     .M...M...M...M..
   b8028:	6b75 000b 6162 6475 5300 7265 6169 006c     uk..baud.Serial.
   b8038:	6553 6972 6c61 0031 534a 4e4f 7453 6572     Serial1.JSONStre
   b8048:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
   b8058:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
   b8068:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   b8078:	2500 0069 6564 6174 6c69 2073 203d 0d00     .%i.details = ..
   b8088:	000a 006d 0066 6e6c 6600 006e 6f63 6564     ..m.f.ln.fn.code
   b8098:	6400 7465 6961 006c                         .detail.

000b80a0 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b80a8:	513d 000b 5163 000b 5121 000b 6c8f 000b     =Q..cQ..!Q...l..

000b80b8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b80c0:	5599 000b 55b1 000b 5cf1 000b 40cb 000b     .U...U...\...@..

000b80d0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b80d8:	55c5 000b 55d9 000b 5e95 000b 5129 000b     .U...U...^..)Q..

000b80e8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b80f0:	513b 000b 5171 000b 5c55 000b 512b 000b     ;Q..qQ..U\..+Q..

000b8100 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b8108:	5139 000b 517f 000b 5501 000b 51a1 000b     9Q...Q...U...Q..
   b8118:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   b8128:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000b8134 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b813c:	6169 000b 616f 000b 61ad 000b 617d 000b     ia..oa...a..}a..
   b814c:	616b 000b                                   ka..

000b8150 <_ZTV9IPAddress>:
	...
   b8158:	66c5 000b 66b5 000b 66b7 000b               .f...f...f..

000b8164 <_ZTV9USBSerial>:
	...
   b816c:	67ab 000b 6813 000b 67e9 000b 5015 000b     .g...h...g...P..
   b817c:	67db 000b 67ad 000b 67bd 000b 680d 000b     .g...g...g...h..
   b818c:	67cd 000b 67a5 000b                         .g...g..

000b8194 <_ZTV11USARTSerial>:
	...
   b819c:	690d 000b 6979 000b 6951 000b 5015 000b     .i..yi..Qi...P..
   b81ac:	6921 000b 693d 000b 692f 000b 694b 000b     !i..=i../i..Ki..
   b81bc:	690f 000b 6913 000b                         .i...i..

000b81c4 <_ZTV7TwoWire>:
	...
   b81cc:	69ed 000b 6a37 000b 6a0f 000b 69ef 000b     .i..7j...j...i..
   b81dc:	6a17 000b 6a1f 000b 6a27 000b 6a2f 000b     .j...j..'j../j..

000b81ec <_ZTVN5spark9WiFiClassE>:
	...
   b81f4:	6adf 000b 6ad5 000b 6acb 000b 6a81 000b     .j...j...j...j..
   b8204:	6abf 000b 6ab3 000b 6b3d 000b 6b45 000b     .j...j..=k..Ek..
   b8214:	6aa7 000b 6a9f 000b 6a95 000b 6a8b 000b     .j...j...j...j..
   b8224:	6b75 000b                                   uk..

000b8228 <_ZTVN5spark12NetworkClassE>:
	...
   b8230:	6afd 000b 6b07 000b 6b11 000b 6b1b 000b     .j...k...k...k..
   b8240:	6b25 000b 6b31 000b 6b3d 000b 6b45 000b     %k..1k..=k..Ek..
   b8250:	6b4d 000b 6b59 000b 6b61 000b 6b6b 000b     Mk..Yk..ak..kk..
   b8260:	6b75 000b 7525 7500 3025 7834                uk..%u.u%04x.

000b826d <_ZSt7nothrow>:
   b826d:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b827d:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b828d:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b829d:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b82ad:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b82bd:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b82cd:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b82dd:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b82ed:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b82fd:	646e 632e                                    nd.c.

000b8302 <_ctype_>:
   b8302:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b8312:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b8322:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b8332:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b8342:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b8352:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b8362:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b8372:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b8382:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b8403 <link_const_variable_data_end>:
	...

000b8404 <link_constructors_location>:
   b8404:	000b4629 	.word	0x000b4629
   b8408:	000b4e1d 	.word	0x000b4e1d
   b840c:	000b4e45 	.word	0x000b4e45
   b8410:	000b5005 	.word	0x000b5005
   b8414:	000b5ce1 	.word	0x000b5ce1
   b8418:	000b6009 	.word	0x000b6009
   b841c:	000b6025 	.word	0x000b6025
   b8420:	000b6ae9 	.word	0x000b6ae9
   b8424:	000b6c4d 	.word	0x000b6c4d

000b8428 <link_constructors_end>:
	...
